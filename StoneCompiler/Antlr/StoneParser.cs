//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 Stone.g 2013-02-23 21:13:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Stone.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class StoneParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Class_Def", "Class_Def_Body", "DEDENT", "DOUBLE", "Data_Body", "Data_Def", "Data_Def_Item", "EXPONENT", "Expr_Access", "Expr_Call", "Expr_Lambda", "Expr_Message", "Expr_New_Data", "Func_Args", "Func_Declare", "Func_Def", "INDENT", "INT", "LIDENT", "Lambda_Args", "Match_Cross", "Match_Var", "Message_Args", "Message_Declare", "Message_Def", "Message_Item", "Module_Def", "NEWLINE", "NORMAL_STRING", "OP_DIV", "OP_MINUS", "OP_MUL", "OP_PLUS", "Proxy_Def", "Proxy_Def_Body", "Root", "Stmt_Alloc", "Stmt_Assign", "Stmt_Block", "Stmt_Call", "Stmt_If", "Stmt_Return", "Type_Atom", "Type_Cross", "Type_Func", "UIDENT", "WS", "'('", "')'", "','", "'->'", "':'", "'::'", "'='", "'=>'", "'class'", "'data'", "'if'", "'module'", "'proxy'", "'return'", "'|'", "'¡Á'", "'¦Ë'"
	};
	public const int EOF=-1;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int Class_Def=4;
	public const int Class_Def_Body=5;
	public const int DEDENT=6;
	public const int DOUBLE=7;
	public const int Data_Body=8;
	public const int Data_Def=9;
	public const int Data_Def_Item=10;
	public const int EXPONENT=11;
	public const int Expr_Access=12;
	public const int Expr_Call=13;
	public const int Expr_Lambda=14;
	public const int Expr_Message=15;
	public const int Expr_New_Data=16;
	public const int Func_Args=17;
	public const int Func_Declare=18;
	public const int Func_Def=19;
	public const int INDENT=20;
	public const int INT=21;
	public const int LIDENT=22;
	public const int Lambda_Args=23;
	public const int Match_Cross=24;
	public const int Match_Var=25;
	public const int Message_Args=26;
	public const int Message_Declare=27;
	public const int Message_Def=28;
	public const int Message_Item=29;
	public const int Module_Def=30;
	public const int NEWLINE=31;
	public const int NORMAL_STRING=32;
	public const int OP_DIV=33;
	public const int OP_MINUS=34;
	public const int OP_MUL=35;
	public const int OP_PLUS=36;
	public const int Proxy_Def=37;
	public const int Proxy_Def_Body=38;
	public const int Root=39;
	public const int Stmt_Alloc=40;
	public const int Stmt_Assign=41;
	public const int Stmt_Block=42;
	public const int Stmt_Call=43;
	public const int Stmt_If=44;
	public const int Stmt_Return=45;
	public const int Type_Atom=46;
	public const int Type_Cross=47;
	public const int Type_Func=48;
	public const int UIDENT=49;
	public const int WS=50;

	public StoneParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public StoneParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[46+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return StoneParser.tokenNames; } }
	public override string GrammarFileName { get { return "Stone.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();

	// $ANTLR start "parse"
	// Stone.g:98:8: public parse : ( module_def )+ ( NEWLINE )* EOF -> ^( Root ( module_def )+ ) ;
	[GrammarRule("parse")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE2 = default(CommonToken);
		CommonToken EOF3 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_def1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_module_def=new RewriteRuleSubtreeStream(adaptor,"rule module_def");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(98, 1);
		try
		{
			// Stone.g:99:2: ( ( module_def )+ ( NEWLINE )* EOF -> ^( Root ( module_def )+ ) )
			DebugEnterAlt(1);
			// Stone.g:99:4: ( module_def )+ ( NEWLINE )* EOF
			{
			DebugLocation(99, 4);
			// Stone.g:99:4: ( module_def )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				try
				{
					alt1 = dfa1.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:99:4: module_def
					{
					DebugLocation(99, 4);
					PushFollow(Follow._module_def_in_parse296);
					module_def1=module_def();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_module_def.Add(module_def1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(99, 16);
			// Stone.g:99:16: ( NEWLINE )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==NEWLINE))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:99:16: NEWLINE
					{
					DebugLocation(99, 16);
					NEWLINE2=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_parse299); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE2);


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(99, 25);
			EOF3=(CommonToken)Match(input,EOF,Follow._EOF_in_parse302); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: module_def
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 99:29: -> ^( Root ( module_def )+ )
			{
				DebugLocation(99, 32);
				// Stone.g:99:32: ^( Root ( module_def )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(99, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(99, 39);
				if (!(stream_module_def.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_module_def.HasNext )
				{
					DebugLocation(99, 39);
					adaptor.AddChild(root_1, stream_module_def.NextTree());

				}
				stream_module_def.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	partial void EnterRule_module_def();
	partial void LeaveRule_module_def();

	// $ANTLR start "module_def"
	// Stone.g:102:1: module_def : ( NEWLINE )* 'module' UIDENT NEWLINE ( INDENT module_inner ( NEWLINE )* DEDENT ) -> ^( Module_Def UIDENT module_inner ) ;
	[GrammarRule("module_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> module_def()
	{
		EnterRule_module_def();
		EnterRule("module_def", 2);
		TraceIn("module_def", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE4 = default(CommonToken);
		CommonToken string_literal5 = default(CommonToken);
		CommonToken UIDENT6 = default(CommonToken);
		CommonToken NEWLINE7 = default(CommonToken);
		CommonToken INDENT8 = default(CommonToken);
		CommonToken NEWLINE10 = default(CommonToken);
		CommonToken DEDENT11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_inner9 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		CommonTree string_literal5_tree = default(CommonTree);
		CommonTree UIDENT6_tree = default(CommonTree);
		CommonTree NEWLINE7_tree = default(CommonTree);
		CommonTree INDENT8_tree = default(CommonTree);
		CommonTree NEWLINE10_tree = default(CommonTree);
		CommonTree DEDENT11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UIDENT=new RewriteRuleITokenStream(adaptor,"token UIDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_module_inner=new RewriteRuleSubtreeStream(adaptor,"rule module_inner");
		try { DebugEnterRule(GrammarFileName, "module_def");
		DebugLocation(102, 1);
		try
		{
			// Stone.g:103:2: ( ( NEWLINE )* 'module' UIDENT NEWLINE ( INDENT module_inner ( NEWLINE )* DEDENT ) -> ^( Module_Def UIDENT module_inner ) )
			DebugEnterAlt(1);
			// Stone.g:103:4: ( NEWLINE )* 'module' UIDENT NEWLINE ( INDENT module_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(103, 4);
			// Stone.g:103:4: ( NEWLINE )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==NEWLINE))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:103:4: NEWLINE
					{
					DebugLocation(103, 4);
					NEWLINE4=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_def322); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE4);


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(103, 13);
			string_literal5=(CommonToken)Match(input,62,Follow._62_in_module_def325); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(string_literal5);

			DebugLocation(103, 22);
			UIDENT6=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_module_def327); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UIDENT.Add(UIDENT6);

			DebugLocation(103, 29);
			NEWLINE7=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_def329); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE7);

			DebugLocation(103, 37);
			// Stone.g:103:37: ( INDENT module_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:103:38: INDENT module_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(103, 38);
			INDENT8=(CommonToken)Match(input,INDENT,Follow._INDENT_in_module_def332); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT8);

			DebugLocation(103, 45);
			PushFollow(Follow._module_inner_in_module_def334);
			module_inner9=module_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_module_inner.Add(module_inner9.Tree);
			DebugLocation(103, 58);
			// Stone.g:103:58: ( NEWLINE )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==NEWLINE))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:103:58: NEWLINE
					{
					DebugLocation(103, 58);
					NEWLINE10=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_def336); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE10);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(103, 67);
			DEDENT11=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_module_def339); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT11);


			}



			{
			// AST REWRITE
			// elements: module_inner, UIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 103:75: -> ^( Module_Def UIDENT module_inner )
			{
				DebugLocation(103, 78);
				// Stone.g:103:78: ^( Module_Def UIDENT module_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(103, 80);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Module_Def, "Module_Def"), root_1);

				DebugLocation(103, 91);
				adaptor.AddChild(root_1, stream_UIDENT.NextNode());
				DebugLocation(103, 98);
				adaptor.AddChild(root_1, stream_module_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_def", 2);
			LeaveRule("module_def", 2);
			LeaveRule_module_def();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "module_def"); }
		return retval;

	}
	// $ANTLR end "module_def"

	partial void EnterRule_module_inner();
	partial void LeaveRule_module_inner();

	// $ANTLR start "module_inner"
	// Stone.g:106:1: module_inner : ( ( block )+ -> ( block )+ | INDENT module_inner ( NEWLINE )* DEDENT -> module_inner );
	[GrammarRule("module_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> module_inner()
	{
		EnterRule_module_inner();
		EnterRule("module_inner", 3);
		TraceIn("module_inner", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT13 = default(CommonToken);
		CommonToken NEWLINE15 = default(CommonToken);
		CommonToken DEDENT16 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_inner14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT13_tree = default(CommonTree);
		CommonTree NEWLINE15_tree = default(CommonTree);
		CommonTree DEDENT16_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_module_inner=new RewriteRuleSubtreeStream(adaptor,"rule module_inner");
		try { DebugEnterRule(GrammarFileName, "module_inner");
		DebugLocation(106, 1);
		try
		{
			// Stone.g:107:2: ( ( block )+ -> ( block )+ | INDENT module_inner ( NEWLINE )* DEDENT -> module_inner )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==LIDENT||LA7_0==NEWLINE||(LA7_0>=59 && LA7_0<=60)||(LA7_0>=62 && LA7_0<=63)))
			{
				alt7 = 1;
			}
			else if ((LA7_0==INDENT))
			{
				alt7 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:107:4: ( block )+
				{
				DebugLocation(107, 4);
				// Stone.g:107:4: ( block )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					try
					{
						alt5 = dfa5.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:107:4: block
						{
						DebugLocation(107, 4);
						PushFollow(Follow._block_in_module_inner361);
						block12=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_block.Add(block12.Tree);

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }



				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 107:11: -> ( block )+
				{
					DebugLocation(107, 14);
					if (!(stream_block.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_block.HasNext )
					{
						DebugLocation(107, 14);
						adaptor.AddChild(root_0, stream_block.NextTree());

					}
					stream_block.Reset();

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:108:4: INDENT module_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(108, 4);
				INDENT13=(CommonToken)Match(input,INDENT,Follow._INDENT_in_module_inner372); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT13);

				DebugLocation(108, 11);
				PushFollow(Follow._module_inner_in_module_inner374);
				module_inner14=module_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_module_inner.Add(module_inner14.Tree);
				DebugLocation(108, 24);
				// Stone.g:108:24: ( NEWLINE )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==NEWLINE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:108:24: NEWLINE
						{
						DebugLocation(108, 24);
						NEWLINE15=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_inner376); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE15);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(108, 33);
				DEDENT16=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_module_inner379); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT16);



				{
				// AST REWRITE
				// elements: module_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 108:40: -> module_inner
				{
					DebugLocation(108, 43);
					adaptor.AddChild(root_0, stream_module_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_inner", 3);
			LeaveRule("module_inner", 3);
			LeaveRule_module_inner();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "module_inner"); }
		return retval;

	}
	// $ANTLR end "module_inner"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// Stone.g:111:1: block : ( data_def | class_def | proxy_def | func_def | module_def );
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 4);
		TraceIn("block", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> data_def17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> class_def18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> func_def20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_def21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(111, 1);
		try
		{
			// Stone.g:112:2: ( data_def | class_def | proxy_def | func_def | module_def )
			int alt8=5;
			try { DebugEnterDecision(8, false);
			try
			{
				alt8 = dfa8.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:112:4: data_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._data_def_in_block394);
				data_def17=data_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, data_def17.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:113:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._class_def_in_block399);
				class_def18=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def18.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:114:4: proxy_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._proxy_def_in_block404);
				proxy_def19=proxy_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, proxy_def19.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Stone.g:115:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._func_def_in_block409);
				func_def20=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def20.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Stone.g:116:4: module_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._module_def_in_block414);
				module_def21=module_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, module_def21.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 4);
			LeaveRule("block", 4);
			LeaveRule_block();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_data_def();
	partial void LeaveRule_data_def();

	// $ANTLR start "data_def"
	// Stone.g:120:1: data_def : ( NEWLINE )* 'data' UIDENT NEWLINE ( INDENT data_def_inner ( NEWLINE )* DEDENT ) -> ^( Data_Def UIDENT data_def_inner ) ;
	[GrammarRule("data_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> data_def()
	{
		EnterRule_data_def();
		EnterRule("data_def", 5);
		TraceIn("data_def", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE22 = default(CommonToken);
		CommonToken string_literal23 = default(CommonToken);
		CommonToken UIDENT24 = default(CommonToken);
		CommonToken NEWLINE25 = default(CommonToken);
		CommonToken INDENT26 = default(CommonToken);
		CommonToken NEWLINE28 = default(CommonToken);
		CommonToken DEDENT29 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> data_def_inner27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree UIDENT24_tree = default(CommonTree);
		CommonTree NEWLINE25_tree = default(CommonTree);
		CommonTree INDENT26_tree = default(CommonTree);
		CommonTree NEWLINE28_tree = default(CommonTree);
		CommonTree DEDENT29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UIDENT=new RewriteRuleITokenStream(adaptor,"token UIDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_data_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule data_def_inner");
		try { DebugEnterRule(GrammarFileName, "data_def");
		DebugLocation(120, 1);
		try
		{
			// Stone.g:121:2: ( ( NEWLINE )* 'data' UIDENT NEWLINE ( INDENT data_def_inner ( NEWLINE )* DEDENT ) -> ^( Data_Def UIDENT data_def_inner ) )
			DebugEnterAlt(1);
			// Stone.g:121:4: ( NEWLINE )* 'data' UIDENT NEWLINE ( INDENT data_def_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(121, 4);
			// Stone.g:121:4: ( NEWLINE )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==NEWLINE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:121:4: NEWLINE
					{
					DebugLocation(121, 4);
					NEWLINE22=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def426); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE22);


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(121, 13);
			string_literal23=(CommonToken)Match(input,60,Follow._60_in_data_def429); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(string_literal23);

			DebugLocation(121, 20);
			UIDENT24=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_data_def431); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UIDENT.Add(UIDENT24);

			DebugLocation(121, 27);
			NEWLINE25=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def433); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE25);

			DebugLocation(121, 35);
			// Stone.g:121:35: ( INDENT data_def_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:121:36: INDENT data_def_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(121, 36);
			INDENT26=(CommonToken)Match(input,INDENT,Follow._INDENT_in_data_def436); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT26);

			DebugLocation(121, 43);
			PushFollow(Follow._data_def_inner_in_data_def438);
			data_def_inner27=data_def_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_data_def_inner.Add(data_def_inner27.Tree);
			DebugLocation(121, 58);
			// Stone.g:121:58: ( NEWLINE )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==NEWLINE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:121:58: NEWLINE
					{
					DebugLocation(121, 58);
					NEWLINE28=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def440); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE28);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(121, 67);
			DEDENT29=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_data_def443); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT29);


			}



			{
			// AST REWRITE
			// elements: UIDENT, data_def_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 121:75: -> ^( Data_Def UIDENT data_def_inner )
			{
				DebugLocation(121, 78);
				// Stone.g:121:78: ^( Data_Def UIDENT data_def_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(121, 80);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Data_Def, "Data_Def"), root_1);

				DebugLocation(121, 89);
				adaptor.AddChild(root_1, stream_UIDENT.NextNode());
				DebugLocation(121, 96);
				adaptor.AddChild(root_1, stream_data_def_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_def", 5);
			LeaveRule("data_def", 5);
			LeaveRule_data_def();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "data_def"); }
		return retval;

	}
	// $ANTLR end "data_def"

	partial void EnterRule_data_def_inner();
	partial void LeaveRule_data_def_inner();

	// $ANTLR start "data_def_inner"
	// Stone.g:124:1: data_def_inner : ( ( data_def_item )+ -> ^( Data_Body ( data_def_item )+ ) | INDENT data_def_inner ( NEWLINE )* DEDENT -> data_def_inner );
	[GrammarRule("data_def_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> data_def_inner()
	{
		EnterRule_data_def_inner();
		EnterRule("data_def_inner", 6);
		TraceIn("data_def_inner", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT31 = default(CommonToken);
		CommonToken NEWLINE33 = default(CommonToken);
		CommonToken DEDENT34 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> data_def_item30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> data_def_inner32 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT31_tree = default(CommonTree);
		CommonTree NEWLINE33_tree = default(CommonTree);
		CommonTree DEDENT34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_data_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule data_def_inner");
		RewriteRuleSubtreeStream stream_data_def_item=new RewriteRuleSubtreeStream(adaptor,"rule data_def_item");
		try { DebugEnterRule(GrammarFileName, "data_def_inner");
		DebugLocation(124, 1);
		try
		{
			// Stone.g:125:2: ( ( data_def_item )+ -> ^( Data_Body ( data_def_item )+ ) | INDENT data_def_inner ( NEWLINE )* DEDENT -> data_def_inner )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==LIDENT||LA13_0==NEWLINE))
			{
				alt13 = 1;
			}
			else if ((LA13_0==INDENT))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:125:4: ( data_def_item )+
				{
				DebugLocation(125, 4);
				// Stone.g:125:4: ( data_def_item )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					try
					{
						alt11 = dfa11.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:125:4: data_def_item
						{
						DebugLocation(125, 4);
						PushFollow(Follow._data_def_item_in_data_def_inner465);
						data_def_item30=data_def_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_data_def_item.Add(data_def_item30.Tree);

						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: data_def_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 125:19: -> ^( Data_Body ( data_def_item )+ )
				{
					DebugLocation(125, 22);
					// Stone.g:125:22: ^( Data_Body ( data_def_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(125, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Data_Body, "Data_Body"), root_1);

					DebugLocation(125, 34);
					if (!(stream_data_def_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_data_def_item.HasNext )
					{
						DebugLocation(125, 34);
						adaptor.AddChild(root_1, stream_data_def_item.NextTree());

					}
					stream_data_def_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:126:4: INDENT data_def_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(126, 4);
				INDENT31=(CommonToken)Match(input,INDENT,Follow._INDENT_in_data_def_inner480); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT31);

				DebugLocation(126, 11);
				PushFollow(Follow._data_def_inner_in_data_def_inner482);
				data_def_inner32=data_def_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_data_def_inner.Add(data_def_inner32.Tree);
				DebugLocation(126, 26);
				// Stone.g:126:26: ( NEWLINE )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==NEWLINE))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:126:26: NEWLINE
						{
						DebugLocation(126, 26);
						NEWLINE33=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def_inner484); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE33);


						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(126, 35);
				DEDENT34=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_data_def_inner487); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT34);



				{
				// AST REWRITE
				// elements: data_def_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 126:42: -> data_def_inner
				{
					DebugLocation(126, 45);
					adaptor.AddChild(root_0, stream_data_def_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_def_inner", 6);
			LeaveRule("data_def_inner", 6);
			LeaveRule_data_def_inner();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "data_def_inner"); }
		return retval;

	}
	// $ANTLR end "data_def_inner"

	partial void EnterRule_data_def_item();
	partial void LeaveRule_data_def_item();

	// $ANTLR start "data_def_item"
	// Stone.g:129:1: data_def_item : ( NEWLINE )* LIDENT '::' type -> ^( Data_Def_Item LIDENT type ) ;
	[GrammarRule("data_def_item")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> data_def_item()
	{
		EnterRule_data_def_item();
		EnterRule("data_def_item", 7);
		TraceIn("data_def_item", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE35 = default(CommonToken);
		CommonToken LIDENT36 = default(CommonToken);
		CommonToken string_literal37 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE35_tree = default(CommonTree);
		CommonTree LIDENT36_tree = default(CommonTree);
		CommonTree string_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "data_def_item");
		DebugLocation(129, 1);
		try
		{
			// Stone.g:130:2: ( ( NEWLINE )* LIDENT '::' type -> ^( Data_Def_Item LIDENT type ) )
			DebugEnterAlt(1);
			// Stone.g:130:4: ( NEWLINE )* LIDENT '::' type
			{
			DebugLocation(130, 4);
			// Stone.g:130:4: ( NEWLINE )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==NEWLINE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:130:4: NEWLINE
					{
					DebugLocation(130, 4);
					NEWLINE35=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def_item502); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE35);


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(130, 13);
			LIDENT36=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_data_def_item505); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT36);

			DebugLocation(130, 20);
			string_literal37=(CommonToken)Match(input,56,Follow._56_in_data_def_item507); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_56.Add(string_literal37);

			DebugLocation(130, 25);
			PushFollow(Follow._type_in_data_def_item509);
			type38=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type38.Tree);


			{
			// AST REWRITE
			// elements: LIDENT, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 130:30: -> ^( Data_Def_Item LIDENT type )
			{
				DebugLocation(130, 33);
				// Stone.g:130:33: ^( Data_Def_Item LIDENT type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(130, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Data_Def_Item, "Data_Def_Item"), root_1);

				DebugLocation(130, 49);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(130, 56);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_def_item", 7);
			LeaveRule("data_def_item", 7);
			LeaveRule_data_def_item();
		}
		DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "data_def_item"); }
		return retval;

	}
	// $ANTLR end "data_def_item"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// Stone.g:134:1: class_def : ( NEWLINE )* 'class' UIDENT NEWLINE ( INDENT class_def_inner ( NEWLINE )* DEDENT ) -> ^( Class_Def UIDENT class_def_inner ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 8);
		TraceIn("class_def", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE39 = default(CommonToken);
		CommonToken string_literal40 = default(CommonToken);
		CommonToken UIDENT41 = default(CommonToken);
		CommonToken NEWLINE42 = default(CommonToken);
		CommonToken INDENT43 = default(CommonToken);
		CommonToken NEWLINE45 = default(CommonToken);
		CommonToken DEDENT46 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> class_def_inner44 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree UIDENT41_tree = default(CommonTree);
		CommonTree NEWLINE42_tree = default(CommonTree);
		CommonTree INDENT43_tree = default(CommonTree);
		CommonTree NEWLINE45_tree = default(CommonTree);
		CommonTree DEDENT46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_UIDENT=new RewriteRuleITokenStream(adaptor,"token UIDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule class_def_inner");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(134, 1);
		try
		{
			// Stone.g:135:2: ( ( NEWLINE )* 'class' UIDENT NEWLINE ( INDENT class_def_inner ( NEWLINE )* DEDENT ) -> ^( Class_Def UIDENT class_def_inner ) )
			DebugEnterAlt(1);
			// Stone.g:135:4: ( NEWLINE )* 'class' UIDENT NEWLINE ( INDENT class_def_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(135, 4);
			// Stone.g:135:4: ( NEWLINE )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==NEWLINE))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:135:4: NEWLINE
					{
					DebugLocation(135, 4);
					NEWLINE39=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def531); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE39);


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(135, 13);
			string_literal40=(CommonToken)Match(input,59,Follow._59_in_class_def534); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(string_literal40);

			DebugLocation(135, 21);
			UIDENT41=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_class_def536); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UIDENT.Add(UIDENT41);

			DebugLocation(135, 28);
			NEWLINE42=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def538); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE42);

			DebugLocation(135, 36);
			// Stone.g:135:36: ( INDENT class_def_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:135:37: INDENT class_def_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(135, 37);
			INDENT43=(CommonToken)Match(input,INDENT,Follow._INDENT_in_class_def541); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT43);

			DebugLocation(135, 44);
			PushFollow(Follow._class_def_inner_in_class_def543);
			class_def_inner44=class_def_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_class_def_inner.Add(class_def_inner44.Tree);
			DebugLocation(135, 60);
			// Stone.g:135:60: ( NEWLINE )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==NEWLINE))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:135:60: NEWLINE
					{
					DebugLocation(135, 60);
					NEWLINE45=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def545); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE45);


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(135, 69);
			DEDENT46=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_class_def548); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT46);


			}



			{
			// AST REWRITE
			// elements: UIDENT, class_def_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 135:77: -> ^( Class_Def UIDENT class_def_inner )
			{
				DebugLocation(135, 80);
				// Stone.g:135:80: ^( Class_Def UIDENT class_def_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(135, 82);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class_Def, "Class_Def"), root_1);

				DebugLocation(135, 92);
				adaptor.AddChild(root_1, stream_UIDENT.NextNode());
				DebugLocation(135, 99);
				adaptor.AddChild(root_1, stream_class_def_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 8);
			LeaveRule("class_def", 8);
			LeaveRule_class_def();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_def_inner();
	partial void LeaveRule_class_def_inner();

	// $ANTLR start "class_def_inner"
	// Stone.g:138:1: class_def_inner : ( ( message_declare )+ -> ^( Class_Def_Body ( message_declare )+ ) | INDENT class_def_inner ( NEWLINE )* DEDENT -> class_def_inner );
	[GrammarRule("class_def_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> class_def_inner()
	{
		EnterRule_class_def_inner();
		EnterRule("class_def_inner", 9);
		TraceIn("class_def_inner", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT48 = default(CommonToken);
		CommonToken NEWLINE50 = default(CommonToken);
		CommonToken DEDENT51 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_declare47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> class_def_inner49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT48_tree = default(CommonTree);
		CommonTree NEWLINE50_tree = default(CommonTree);
		CommonTree DEDENT51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule class_def_inner");
		RewriteRuleSubtreeStream stream_message_declare=new RewriteRuleSubtreeStream(adaptor,"rule message_declare");
		try { DebugEnterRule(GrammarFileName, "class_def_inner");
		DebugLocation(138, 1);
		try
		{
			// Stone.g:139:2: ( ( message_declare )+ -> ^( Class_Def_Body ( message_declare )+ ) | INDENT class_def_inner ( NEWLINE )* DEDENT -> class_def_inner )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==LIDENT||LA19_0==NEWLINE))
			{
				alt19 = 1;
			}
			else if ((LA19_0==INDENT))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:139:4: ( message_declare )+
				{
				DebugLocation(139, 4);
				// Stone.g:139:4: ( message_declare )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					try
					{
						alt17 = dfa17.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:139:4: message_declare
						{
						DebugLocation(139, 4);
						PushFollow(Follow._message_declare_in_class_def_inner570);
						message_declare47=message_declare();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_message_declare.Add(message_declare47.Tree);

						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }



				{
				// AST REWRITE
				// elements: message_declare
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 139:21: -> ^( Class_Def_Body ( message_declare )+ )
				{
					DebugLocation(139, 24);
					// Stone.g:139:24: ^( Class_Def_Body ( message_declare )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(139, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class_Def_Body, "Class_Def_Body"), root_1);

					DebugLocation(139, 41);
					if (!(stream_message_declare.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_message_declare.HasNext )
					{
						DebugLocation(139, 41);
						adaptor.AddChild(root_1, stream_message_declare.NextTree());

					}
					stream_message_declare.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:140:4: INDENT class_def_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(140, 4);
				INDENT48=(CommonToken)Match(input,INDENT,Follow._INDENT_in_class_def_inner585); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT48);

				DebugLocation(140, 11);
				PushFollow(Follow._class_def_inner_in_class_def_inner587);
				class_def_inner49=class_def_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_class_def_inner.Add(class_def_inner49.Tree);
				DebugLocation(140, 27);
				// Stone.g:140:27: ( NEWLINE )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==NEWLINE))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:140:27: NEWLINE
						{
						DebugLocation(140, 27);
						NEWLINE50=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def_inner589); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE50);


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(140, 36);
				DEDENT51=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_class_def_inner592); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT51);



				{
				// AST REWRITE
				// elements: class_def_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 140:43: -> class_def_inner
				{
					DebugLocation(140, 46);
					adaptor.AddChild(root_0, stream_class_def_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def_inner", 9);
			LeaveRule("class_def_inner", 9);
			LeaveRule_class_def_inner();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def_inner"); }
		return retval;

	}
	// $ANTLR end "class_def_inner"

	partial void EnterRule_proxy_def();
	partial void LeaveRule_proxy_def();

	// $ANTLR start "proxy_def"
	// Stone.g:144:1: proxy_def : ( NEWLINE )* 'proxy' UIDENT ':' UIDENT NEWLINE ( INDENT proxy_def_inner ( NEWLINE )* DEDENT ) -> ^( Proxy_Def UIDENT UIDENT proxy_def_inner ) ;
	[GrammarRule("proxy_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def()
	{
		EnterRule_proxy_def();
		EnterRule("proxy_def", 10);
		TraceIn("proxy_def", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE52 = default(CommonToken);
		CommonToken string_literal53 = default(CommonToken);
		CommonToken UIDENT54 = default(CommonToken);
		CommonToken char_literal55 = default(CommonToken);
		CommonToken UIDENT56 = default(CommonToken);
		CommonToken NEWLINE57 = default(CommonToken);
		CommonToken INDENT58 = default(CommonToken);
		CommonToken NEWLINE60 = default(CommonToken);
		CommonToken DEDENT61 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def_inner59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE52_tree = default(CommonTree);
		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree UIDENT54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree UIDENT56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree INDENT58_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree DEDENT61_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UIDENT=new RewriteRuleITokenStream(adaptor,"token UIDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_proxy_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule proxy_def_inner");
		try { DebugEnterRule(GrammarFileName, "proxy_def");
		DebugLocation(144, 1);
		try
		{
			// Stone.g:145:2: ( ( NEWLINE )* 'proxy' UIDENT ':' UIDENT NEWLINE ( INDENT proxy_def_inner ( NEWLINE )* DEDENT ) -> ^( Proxy_Def UIDENT UIDENT proxy_def_inner ) )
			DebugEnterAlt(1);
			// Stone.g:145:4: ( NEWLINE )* 'proxy' UIDENT ':' UIDENT NEWLINE ( INDENT proxy_def_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(145, 4);
			// Stone.g:145:4: ( NEWLINE )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==NEWLINE))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:145:4: NEWLINE
					{
					DebugLocation(145, 4);
					NEWLINE52=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(145, 13);
			string_literal53=(CommonToken)Match(input,63,Follow._63_in_proxy_def611); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(string_literal53);

			DebugLocation(145, 21);
			UIDENT54=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_proxy_def613); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UIDENT.Add(UIDENT54);

			DebugLocation(145, 28);
			char_literal55=(CommonToken)Match(input,55,Follow._55_in_proxy_def615); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_55.Add(char_literal55);

			DebugLocation(145, 32);
			UIDENT56=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_proxy_def617); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UIDENT.Add(UIDENT56);

			DebugLocation(145, 39);
			NEWLINE57=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def619); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE57);

			DebugLocation(145, 47);
			// Stone.g:145:47: ( INDENT proxy_def_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:145:48: INDENT proxy_def_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(145, 48);
			INDENT58=(CommonToken)Match(input,INDENT,Follow._INDENT_in_proxy_def622); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT58);

			DebugLocation(145, 55);
			PushFollow(Follow._proxy_def_inner_in_proxy_def624);
			proxy_def_inner59=proxy_def_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxy_def_inner.Add(proxy_def_inner59.Tree);
			DebugLocation(145, 71);
			// Stone.g:145:71: ( NEWLINE )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==NEWLINE))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:145:71: NEWLINE
					{
					DebugLocation(145, 71);
					NEWLINE60=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def626); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(145, 80);
			DEDENT61=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_proxy_def629); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT61);


			}



			{
			// AST REWRITE
			// elements: UIDENT, UIDENT, proxy_def_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 145:88: -> ^( Proxy_Def UIDENT UIDENT proxy_def_inner )
			{
				DebugLocation(145, 91);
				// Stone.g:145:91: ^( Proxy_Def UIDENT UIDENT proxy_def_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(145, 93);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Proxy_Def, "Proxy_Def"), root_1);

				DebugLocation(145, 103);
				adaptor.AddChild(root_1, stream_UIDENT.NextNode());
				DebugLocation(145, 110);
				adaptor.AddChild(root_1, stream_UIDENT.NextNode());
				DebugLocation(145, 117);
				adaptor.AddChild(root_1, stream_proxy_def_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxy_def", 10);
			LeaveRule("proxy_def", 10);
			LeaveRule_proxy_def();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "proxy_def"); }
		return retval;

	}
	// $ANTLR end "proxy_def"

	partial void EnterRule_proxy_def_inner();
	partial void LeaveRule_proxy_def_inner();

	// $ANTLR start "proxy_def_inner"
	// Stone.g:148:1: proxy_def_inner : ( ( message_def )+ -> ^( Proxy_Def_Body ( message_def )+ ) | INDENT proxy_def_inner ( NEWLINE )* DEDENT -> proxy_def_inner );
	[GrammarRule("proxy_def_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def_inner()
	{
		EnterRule_proxy_def_inner();
		EnterRule("proxy_def_inner", 11);
		TraceIn("proxy_def_inner", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT63 = default(CommonToken);
		CommonToken NEWLINE65 = default(CommonToken);
		CommonToken DEDENT66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_def62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def_inner64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT63_tree = default(CommonTree);
		CommonTree NEWLINE65_tree = default(CommonTree);
		CommonTree DEDENT66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_message_def=new RewriteRuleSubtreeStream(adaptor,"rule message_def");
		RewriteRuleSubtreeStream stream_proxy_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule proxy_def_inner");
		try { DebugEnterRule(GrammarFileName, "proxy_def_inner");
		DebugLocation(148, 1);
		try
		{
			// Stone.g:149:2: ( ( message_def )+ -> ^( Proxy_Def_Body ( message_def )+ ) | INDENT proxy_def_inner ( NEWLINE )* DEDENT -> proxy_def_inner )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==LIDENT||LA24_0==NEWLINE))
			{
				alt24 = 1;
			}
			else if ((LA24_0==INDENT))
			{
				alt24 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:149:4: ( message_def )+
				{
				DebugLocation(149, 4);
				// Stone.g:149:4: ( message_def )+
				int cnt22=0;
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					try
					{
						alt22 = dfa22.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:149:4: message_def
						{
						DebugLocation(149, 4);
						PushFollow(Follow._message_def_in_proxy_def_inner653);
						message_def62=message_def();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_message_def.Add(message_def62.Tree);

						}
						break;

					default:
						if (cnt22 >= 1)
							goto loop22;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee22 = new EarlyExitException( 22, input );
						DebugRecognitionException(eee22);
						throw eee22;
					}
					cnt22++;
				}
				loop22:
					;

				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: message_def
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 149:17: -> ^( Proxy_Def_Body ( message_def )+ )
				{
					DebugLocation(149, 20);
					// Stone.g:149:20: ^( Proxy_Def_Body ( message_def )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(149, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Proxy_Def_Body, "Proxy_Def_Body"), root_1);

					DebugLocation(149, 37);
					if (!(stream_message_def.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_message_def.HasNext )
					{
						DebugLocation(149, 37);
						adaptor.AddChild(root_1, stream_message_def.NextTree());

					}
					stream_message_def.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:150:4: INDENT proxy_def_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(150, 4);
				INDENT63=(CommonToken)Match(input,INDENT,Follow._INDENT_in_proxy_def_inner668); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT63);

				DebugLocation(150, 11);
				PushFollow(Follow._proxy_def_inner_in_proxy_def_inner670);
				proxy_def_inner64=proxy_def_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxy_def_inner.Add(proxy_def_inner64.Tree);
				DebugLocation(150, 27);
				// Stone.g:150:27: ( NEWLINE )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==NEWLINE))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:150:27: NEWLINE
						{
						DebugLocation(150, 27);
						NEWLINE65=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def_inner672); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE65);


						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(150, 36);
				DEDENT66=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_proxy_def_inner675); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT66);



				{
				// AST REWRITE
				// elements: proxy_def_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:43: -> proxy_def_inner
				{
					DebugLocation(150, 46);
					adaptor.AddChild(root_0, stream_proxy_def_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxy_def_inner", 11);
			LeaveRule("proxy_def_inner", 11);
			LeaveRule_proxy_def_inner();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "proxy_def_inner"); }
		return retval;

	}
	// $ANTLR end "proxy_def_inner"

	partial void EnterRule_message_declare();
	partial void LeaveRule_message_declare();

	// $ANTLR start "message_declare"
	// Stone.g:154:1: message_declare : ( NEWLINE )* LIDENT '::' type NEWLINE -> ^( Message_Declare LIDENT type ) ;
	[GrammarRule("message_declare")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_declare()
	{
		EnterRule_message_declare();
		EnterRule("message_declare", 12);
		TraceIn("message_declare", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE67 = default(CommonToken);
		CommonToken LIDENT68 = default(CommonToken);
		CommonToken string_literal69 = default(CommonToken);
		CommonToken NEWLINE71 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE67_tree = default(CommonTree);
		CommonTree LIDENT68_tree = default(CommonTree);
		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree NEWLINE71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "message_declare");
		DebugLocation(154, 1);
		try
		{
			// Stone.g:155:2: ( ( NEWLINE )* LIDENT '::' type NEWLINE -> ^( Message_Declare LIDENT type ) )
			DebugEnterAlt(1);
			// Stone.g:155:4: ( NEWLINE )* LIDENT '::' type NEWLINE
			{
			DebugLocation(155, 4);
			// Stone.g:155:4: ( NEWLINE )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:155:4: NEWLINE
					{
					DebugLocation(155, 4);
					NEWLINE67=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_declare691); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE67);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(155, 13);
			LIDENT68=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_message_declare694); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT68);

			DebugLocation(155, 20);
			string_literal69=(CommonToken)Match(input,56,Follow._56_in_message_declare696); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_56.Add(string_literal69);

			DebugLocation(155, 25);
			PushFollow(Follow._type_in_message_declare698);
			type70=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type70.Tree);
			DebugLocation(155, 30);
			NEWLINE71=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_declare700); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE71);



			{
			// AST REWRITE
			// elements: type, LIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 155:38: -> ^( Message_Declare LIDENT type )
			{
				DebugLocation(155, 41);
				// Stone.g:155:41: ^( Message_Declare LIDENT type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(155, 43);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Declare, "Message_Declare"), root_1);

				DebugLocation(155, 59);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(155, 66);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_declare", 12);
			LeaveRule("message_declare", 12);
			LeaveRule_message_declare();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "message_declare"); }
		return retval;

	}
	// $ANTLR end "message_declare"

	partial void EnterRule_message_def();
	partial void LeaveRule_message_def();

	// $ANTLR start "message_def"
	// Stone.g:158:1: message_def : message_declare ( NEWLINE )* LIDENT message_def_args NEWLINE stmt_block -> ^( Message_Def LIDENT message_declare message_def_args stmt_block ) ;
	[GrammarRule("message_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_def()
	{
		EnterRule_message_def();
		EnterRule("message_def", 13);
		TraceIn("message_def", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE73 = default(CommonToken);
		CommonToken LIDENT74 = default(CommonToken);
		CommonToken NEWLINE76 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_declare72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_def_args75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE73_tree = default(CommonTree);
		CommonTree LIDENT74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_message_def_args=new RewriteRuleSubtreeStream(adaptor,"rule message_def_args");
		RewriteRuleSubtreeStream stream_message_declare=new RewriteRuleSubtreeStream(adaptor,"rule message_declare");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		try { DebugEnterRule(GrammarFileName, "message_def");
		DebugLocation(158, 1);
		try
		{
			// Stone.g:159:2: ( message_declare ( NEWLINE )* LIDENT message_def_args NEWLINE stmt_block -> ^( Message_Def LIDENT message_declare message_def_args stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:159:5: message_declare ( NEWLINE )* LIDENT message_def_args NEWLINE stmt_block
			{
			DebugLocation(159, 5);
			PushFollow(Follow._message_declare_in_message_def722);
			message_declare72=message_declare();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_message_declare.Add(message_declare72.Tree);
			DebugLocation(159, 21);
			// Stone.g:159:21: ( NEWLINE )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==NEWLINE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:159:21: NEWLINE
					{
					DebugLocation(159, 21);
					NEWLINE73=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_def724); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE73);


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(159, 30);
			LIDENT74=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_message_def727); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT74);

			DebugLocation(159, 37);
			PushFollow(Follow._message_def_args_in_message_def729);
			message_def_args75=message_def_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_message_def_args.Add(message_def_args75.Tree);
			DebugLocation(159, 54);
			NEWLINE76=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_def731); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);

			DebugLocation(159, 62);
			PushFollow(Follow._stmt_block_in_message_def733);
			stmt_block77=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block77.Tree);


			{
			// AST REWRITE
			// elements: message_def_args, stmt_block, message_declare, LIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 159:73: -> ^( Message_Def LIDENT message_declare message_def_args stmt_block )
			{
				DebugLocation(159, 76);
				// Stone.g:159:76: ^( Message_Def LIDENT message_declare message_def_args stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Def, "Message_Def"), root_1);

				DebugLocation(159, 90);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(159, 97);
				adaptor.AddChild(root_1, stream_message_declare.NextTree());
				DebugLocation(159, 113);
				adaptor.AddChild(root_1, stream_message_def_args.NextTree());
				DebugLocation(159, 130);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_def", 13);
			LeaveRule("message_def", 13);
			LeaveRule_message_def();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "message_def"); }
		return retval;

	}
	// $ANTLR end "message_def"

	partial void EnterRule_message_def_args();
	partial void LeaveRule_message_def_args();

	// $ANTLR start "message_def_args"
	// Stone.g:162:1: message_def_args : ( match )? -> ^( Message_Args ( match )? ) ;
	[GrammarRule("message_def_args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_def_args()
	{
		EnterRule_message_def_args();
		EnterRule("message_def_args", 14);
		TraceIn("message_def_args", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "message_def_args");
		DebugLocation(162, 1);
		try
		{
			// Stone.g:163:2: ( ( match )? -> ^( Message_Args ( match )? ) )
			DebugEnterAlt(1);
			// Stone.g:163:4: ( match )?
			{
			DebugLocation(163, 4);
			// Stone.g:163:4: ( match )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==LIDENT||LA27_0==51))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:163:4: match
				{
				DebugLocation(163, 4);
				PushFollow(Follow._match_in_message_def_args758);
				match78=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: match
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 163:11: -> ^( Message_Args ( match )? )
			{
				DebugLocation(163, 14);
				// Stone.g:163:14: ^( Message_Args ( match )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(163, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Args, "Message_Args"), root_1);

				DebugLocation(163, 29);
				// Stone.g:163:29: ( match )?
				if (stream_match.HasNext)
				{
					DebugLocation(163, 29);
					adaptor.AddChild(root_1, stream_match.NextTree());

				}
				stream_match.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_def_args", 14);
			LeaveRule("message_def_args", 14);
			LeaveRule_message_def_args();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "message_def_args"); }
		return retval;

	}
	// $ANTLR end "message_def_args"

	partial void EnterRule_func_declare();
	partial void LeaveRule_func_declare();

	// $ANTLR start "func_declare"
	// Stone.g:167:1: func_declare : ( NEWLINE )* LIDENT '::' type NEWLINE -> ^( Func_Declare LIDENT type ) ;
	[GrammarRule("func_declare")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> func_declare()
	{
		EnterRule_func_declare();
		EnterRule("func_declare", 15);
		TraceIn("func_declare", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE79 = default(CommonToken);
		CommonToken LIDENT80 = default(CommonToken);
		CommonToken string_literal81 = default(CommonToken);
		CommonToken NEWLINE83 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE79_tree = default(CommonTree);
		CommonTree LIDENT80_tree = default(CommonTree);
		CommonTree string_literal81_tree = default(CommonTree);
		CommonTree NEWLINE83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "func_declare");
		DebugLocation(167, 1);
		try
		{
			// Stone.g:168:2: ( ( NEWLINE )* LIDENT '::' type NEWLINE -> ^( Func_Declare LIDENT type ) )
			DebugEnterAlt(1);
			// Stone.g:168:4: ( NEWLINE )* LIDENT '::' type NEWLINE
			{
			DebugLocation(168, 4);
			// Stone.g:168:4: ( NEWLINE )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==NEWLINE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:168:4: NEWLINE
					{
					DebugLocation(168, 4);
					NEWLINE79=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_declare780); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE79);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(168, 13);
			LIDENT80=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_func_declare783); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT80);

			DebugLocation(168, 20);
			string_literal81=(CommonToken)Match(input,56,Follow._56_in_func_declare785); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_56.Add(string_literal81);

			DebugLocation(168, 25);
			PushFollow(Follow._type_in_func_declare787);
			type82=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type82.Tree);
			DebugLocation(168, 30);
			NEWLINE83=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_declare789); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE83);



			{
			// AST REWRITE
			// elements: LIDENT, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 168:38: -> ^( Func_Declare LIDENT type )
			{
				DebugLocation(168, 41);
				// Stone.g:168:41: ^( Func_Declare LIDENT type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(168, 43);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Declare, "Func_Declare"), root_1);

				DebugLocation(168, 56);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(168, 63);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_declare", 15);
			LeaveRule("func_declare", 15);
			LeaveRule_func_declare();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "func_declare"); }
		return retval;

	}
	// $ANTLR end "func_declare"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// Stone.g:171:1: func_def : func_declare ( NEWLINE )* LIDENT func_def_args NEWLINE stmt_block -> ^( Func_Def LIDENT func_declare func_def_args stmt_block ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 16);
		TraceIn("func_def", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE85 = default(CommonToken);
		CommonToken LIDENT86 = default(CommonToken);
		CommonToken NEWLINE88 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> func_declare84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> func_def_args87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE85_tree = default(CommonTree);
		CommonTree LIDENT86_tree = default(CommonTree);
		CommonTree NEWLINE88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_func_def_args=new RewriteRuleSubtreeStream(adaptor,"rule func_def_args");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_func_declare=new RewriteRuleSubtreeStream(adaptor,"rule func_declare");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(171, 1);
		try
		{
			// Stone.g:172:2: ( func_declare ( NEWLINE )* LIDENT func_def_args NEWLINE stmt_block -> ^( Func_Def LIDENT func_declare func_def_args stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:172:5: func_declare ( NEWLINE )* LIDENT func_def_args NEWLINE stmt_block
			{
			DebugLocation(172, 5);
			PushFollow(Follow._func_declare_in_func_def811);
			func_declare84=func_declare();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_declare.Add(func_declare84.Tree);
			DebugLocation(172, 18);
			// Stone.g:172:18: ( NEWLINE )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:172:18: NEWLINE
					{
					DebugLocation(172, 18);
					NEWLINE85=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def813); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE85);


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(172, 27);
			LIDENT86=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_func_def816); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT86);

			DebugLocation(172, 34);
			PushFollow(Follow._func_def_args_in_func_def818);
			func_def_args87=func_def_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_def_args.Add(func_def_args87.Tree);
			DebugLocation(172, 48);
			NEWLINE88=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def820); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE88);

			DebugLocation(172, 56);
			PushFollow(Follow._stmt_block_in_func_def822);
			stmt_block89=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block89.Tree);


			{
			// AST REWRITE
			// elements: func_def_args, stmt_block, func_declare, LIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:67: -> ^( Func_Def LIDENT func_declare func_def_args stmt_block )
			{
				DebugLocation(172, 70);
				// Stone.g:172:70: ^( Func_Def LIDENT func_declare func_def_args stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

				DebugLocation(172, 81);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(172, 88);
				adaptor.AddChild(root_1, stream_func_declare.NextTree());
				DebugLocation(172, 101);
				adaptor.AddChild(root_1, stream_func_def_args.NextTree());
				DebugLocation(172, 115);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 16);
			LeaveRule("func_def", 16);
			LeaveRule_func_def();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_func_def_args();
	partial void LeaveRule_func_def_args();

	// $ANTLR start "func_def_args"
	// Stone.g:175:1: func_def_args : ( match )? -> ^( Func_Args ( match )? ) ;
	[GrammarRule("func_def_args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> func_def_args()
	{
		EnterRule_func_def_args();
		EnterRule("func_def_args", 17);
		TraceIn("func_def_args", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "func_def_args");
		DebugLocation(175, 1);
		try
		{
			// Stone.g:176:2: ( ( match )? -> ^( Func_Args ( match )? ) )
			DebugEnterAlt(1);
			// Stone.g:176:4: ( match )?
			{
			DebugLocation(176, 4);
			// Stone.g:176:4: ( match )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==LIDENT||LA30_0==51))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:176:4: match
				{
				DebugLocation(176, 4);
				PushFollow(Follow._match_in_func_def_args847);
				match90=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: match
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 176:11: -> ^( Func_Args ( match )? )
			{
				DebugLocation(176, 14);
				// Stone.g:176:14: ^( Func_Args ( match )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(176, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(176, 26);
				// Stone.g:176:26: ( match )?
				if (stream_match.HasNext)
				{
					DebugLocation(176, 26);
					adaptor.AddChild(root_1, stream_match.NextTree());

				}
				stream_match.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def_args", 17);
			LeaveRule("func_def_args", 17);
			LeaveRule_func_def_args();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def_args"); }
		return retval;

	}
	// $ANTLR end "func_def_args"

	partial void EnterRule_match();
	partial void LeaveRule_match();

	// $ANTLR start "match"
	// Stone.g:180:1: match : match_cross ;
	[GrammarRule("match")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> match()
	{
		EnterRule_match();
		EnterRule("match", 18);
		TraceIn("match", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match_cross91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "match");
		DebugLocation(180, 1);
		try
		{
			// Stone.g:181:2: ( match_cross )
			DebugEnterAlt(1);
			// Stone.g:181:4: match_cross
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(181, 4);
			PushFollow(Follow._match_cross_in_match869);
			match_cross91=match_cross();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, match_cross91.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match", 18);
			LeaveRule("match", 18);
			LeaveRule_match();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "match"); }
		return retval;

	}
	// $ANTLR end "match"

	partial void EnterRule_match_cross();
	partial void LeaveRule_match_cross();

	// $ANTLR start "match_cross"
	// Stone.g:184:1: match_cross options {backtrack=true; memoize=true; } : ( match_var ( ',' match_var )+ -> ^( Match_Cross ( match_var )+ ) | match_var );
	[GrammarRule("match_cross")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> match_cross()
	{
		EnterRule_match_cross();
		EnterRule("match_cross", 19);
		TraceIn("match_cross", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int match_cross_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal93 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> match_var92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> match_var94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> match_var95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleSubtreeStream stream_match_var=new RewriteRuleSubtreeStream(adaptor,"rule match_var");
		try { DebugEnterRule(GrammarFileName, "match_cross");
		DebugLocation(184, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Stone.g:189:2: ( match_var ( ',' match_var )+ -> ^( Match_Cross ( match_var )+ ) | match_var )
			int alt32=2;
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==LIDENT))
			{
				int LA32_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_Stone_fragment)))
				{
					alt32 = 1;
				}
				else if ((true))
				{
					alt32 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA32_0==51))
			{
				int LA32_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_Stone_fragment)))
				{
					alt32 = 1;
				}
				else if ((true))
				{
					alt32 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:189:4: match_var ( ',' match_var )+
				{
				DebugLocation(189, 4);
				PushFollow(Follow._match_var_in_match_cross896);
				match_var92=match_var();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match_var.Add(match_var92.Tree);
				DebugLocation(189, 14);
				// Stone.g:189:14: ( ',' match_var )+
				int cnt31=0;
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==53))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:189:15: ',' match_var
						{
						DebugLocation(189, 15);
						char_literal93=(CommonToken)Match(input,53,Follow._53_in_match_cross899); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_53.Add(char_literal93);

						DebugLocation(189, 19);
						PushFollow(Follow._match_var_in_match_cross901);
						match_var94=match_var();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_match_var.Add(match_var94.Tree);

						}
						break;

					default:
						if (cnt31 >= 1)
							goto loop31;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee31 = new EarlyExitException( 31, input );
						DebugRecognitionException(eee31);
						throw eee31;
					}
					cnt31++;
				}
				loop31:
					;

				} finally { DebugExitSubRule(31); }



				{
				// AST REWRITE
				// elements: match_var
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 189:31: -> ^( Match_Cross ( match_var )+ )
				{
					DebugLocation(189, 34);
					// Stone.g:189:34: ^( Match_Cross ( match_var )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(189, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Cross, "Match_Cross"), root_1);

					DebugLocation(189, 48);
					if (!(stream_match_var.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_match_var.HasNext )
					{
						DebugLocation(189, 48);
						adaptor.AddChild(root_1, stream_match_var.NextTree());

					}
					stream_match_var.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:190:4: match_var
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._match_var_in_match_cross917);
				match_var95=match_var();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_var95.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_cross", 19);
			LeaveRule("match_cross", 19);
			LeaveRule_match_cross();
			if (state.backtracking > 0) { Memoize(input, 19, match_cross_StartIndex); }

		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "match_cross"); }
		return retval;

	}
	// $ANTLR end "match_cross"

	partial void EnterRule_match_var();
	partial void LeaveRule_match_var();

	// $ANTLR start "match_var"
	// Stone.g:193:1: match_var : ( LIDENT -> ^( Match_Var LIDENT ) | '(' match ')' -> match );
	[GrammarRule("match_var")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> match_var()
	{
		EnterRule_match_var();
		EnterRule("match_var", 20);
		TraceIn("match_var", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LIDENT96 = default(CommonToken);
		CommonToken char_literal97 = default(CommonToken);
		CommonToken char_literal99 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> match98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LIDENT96_tree = default(CommonTree);
		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "match_var");
		DebugLocation(193, 1);
		try
		{
			// Stone.g:194:2: ( LIDENT -> ^( Match_Var LIDENT ) | '(' match ')' -> match )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==LIDENT))
			{
				alt33 = 1;
			}
			else if ((LA33_0==51))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:194:4: LIDENT
				{
				DebugLocation(194, 4);
				LIDENT96=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_match_var928); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIDENT.Add(LIDENT96);



				{
				// AST REWRITE
				// elements: LIDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 194:11: -> ^( Match_Var LIDENT )
				{
					DebugLocation(194, 14);
					// Stone.g:194:14: ^( Match_Var LIDENT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Var, "Match_Var"), root_1);

					DebugLocation(194, 26);
					adaptor.AddChild(root_1, stream_LIDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:195:4: '(' match ')'
				{
				DebugLocation(195, 4);
				char_literal97=(CommonToken)Match(input,51,Follow._51_in_match_var941); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_51.Add(char_literal97);

				DebugLocation(195, 8);
				PushFollow(Follow._match_in_match_var943);
				match98=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match98.Tree);
				DebugLocation(195, 14);
				char_literal99=(CommonToken)Match(input,52,Follow._52_in_match_var945); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_52.Add(char_literal99);



				{
				// AST REWRITE
				// elements: match
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:18: -> match
				{
					DebugLocation(195, 21);
					adaptor.AddChild(root_0, stream_match.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_var", 20);
			LeaveRule("match_var", 20);
			LeaveRule_match_var();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "match_var"); }
		return retval;

	}
	// $ANTLR end "match_var"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// Stone.g:199:1: type : type_func ;
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type()
	{
		EnterRule_type();
		EnterRule("type", 21);
		TraceIn("type", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> type_func100 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(199, 1);
		try
		{
			// Stone.g:200:2: ( type_func )
			DebugEnterAlt(1);
			// Stone.g:200:4: type_func
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(200, 4);
			PushFollow(Follow._type_func_in_type961);
			type_func100=type_func();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_func100.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 21);
			LeaveRule("type", 21);
			LeaveRule_type();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// Stone.g:203:1: type_func options {backtrack=true; memoize=true; } : ( type_cross '->' type_cross -> ^( Type_Func type_cross type_cross ) | type_cross );
	[GrammarRule("type_func")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 22);
		TraceIn("type_func", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int type_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal102 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_cross101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_cross103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_cross104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal102_tree = default(CommonTree);
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_type_cross=new RewriteRuleSubtreeStream(adaptor,"rule type_cross");
		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(203, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Stone.g:208:2: ( type_cross '->' type_cross -> ^( Type_Func type_cross type_cross ) | type_cross )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==UIDENT))
			{
				int LA34_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Stone_fragment)))
				{
					alt34 = 1;
				}
				else if ((true))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA34_0==51))
			{
				int LA34_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Stone_fragment)))
				{
					alt34 = 1;
				}
				else if ((true))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:208:4: type_cross '->' type_cross
				{
				DebugLocation(208, 4);
				PushFollow(Follow._type_cross_in_type_func988);
				type_cross101=type_cross();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_cross.Add(type_cross101.Tree);
				DebugLocation(208, 15);
				string_literal102=(CommonToken)Match(input,54,Follow._54_in_type_func990); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_54.Add(string_literal102);

				DebugLocation(208, 20);
				PushFollow(Follow._type_cross_in_type_func992);
				type_cross103=type_cross();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_cross.Add(type_cross103.Tree);


				{
				// AST REWRITE
				// elements: type_cross, type_cross
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 208:31: -> ^( Type_Func type_cross type_cross )
				{
					DebugLocation(208, 34);
					// Stone.g:208:34: ^( Type_Func type_cross type_cross )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(208, 46);
					adaptor.AddChild(root_1, stream_type_cross.NextTree());
					DebugLocation(208, 57);
					adaptor.AddChild(root_1, stream_type_cross.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:209:4: type_cross
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._type_cross_in_type_func1007);
				type_cross104=type_cross();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_cross104.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_func", 22);
			LeaveRule("type_func", 22);
			LeaveRule_type_func();
			if (state.backtracking > 0) { Memoize(input, 22, type_func_StartIndex); }

		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return retval;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_cross();
	partial void LeaveRule_type_cross();

	// $ANTLR start "type_cross"
	// Stone.g:212:1: type_cross options {backtrack=true; memoize=true; } : ( type_atom ( '¡Á' type_atom )+ -> ^( Type_Cross ( type_atom )+ ) | type_atom );
	[GrammarRule("type_cross")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type_cross()
	{
		EnterRule_type_cross();
		EnterRule("type_cross", 23);
		TraceIn("type_cross", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int type_cross_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal106 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_atom105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_atom107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_atom108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal106_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_type_atom=new RewriteRuleSubtreeStream(adaptor,"rule type_atom");
		try { DebugEnterRule(GrammarFileName, "type_cross");
		DebugLocation(212, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Stone.g:217:2: ( type_atom ( '¡Á' type_atom )+ -> ^( Type_Cross ( type_atom )+ ) | type_atom )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==UIDENT))
			{
				int LA36_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_Stone_fragment)))
				{
					alt36 = 1;
				}
				else if ((true))
				{
					alt36 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA36_0==51))
			{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_Stone_fragment)))
				{
					alt36 = 1;
				}
				else if ((true))
				{
					alt36 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:217:4: type_atom ( '¡Á' type_atom )+
				{
				DebugLocation(217, 4);
				PushFollow(Follow._type_atom_in_type_cross1034);
				type_atom105=type_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_atom.Add(type_atom105.Tree);
				DebugLocation(217, 14);
				// Stone.g:217:14: ( '¡Á' type_atom )+
				int cnt35=0;
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==66))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:217:15: '¡Á' type_atom
						{
						DebugLocation(217, 15);
						char_literal106=(CommonToken)Match(input,66,Follow._66_in_type_cross1037); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_66.Add(char_literal106);

						DebugLocation(217, 19);
						PushFollow(Follow._type_atom_in_type_cross1039);
						type_atom107=type_atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_atom.Add(type_atom107.Tree);

						}
						break;

					default:
						if (cnt35 >= 1)
							goto loop35;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee35 = new EarlyExitException( 35, input );
						DebugRecognitionException(eee35);
						throw eee35;
					}
					cnt35++;
				}
				loop35:
					;

				} finally { DebugExitSubRule(35); }



				{
				// AST REWRITE
				// elements: type_atom
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 217:31: -> ^( Type_Cross ( type_atom )+ )
				{
					DebugLocation(217, 34);
					// Stone.g:217:34: ^( Type_Cross ( type_atom )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(217, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Cross, "Type_Cross"), root_1);

					DebugLocation(217, 47);
					if (!(stream_type_atom.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_type_atom.HasNext )
					{
						DebugLocation(217, 47);
						adaptor.AddChild(root_1, stream_type_atom.NextTree());

					}
					stream_type_atom.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:218:4: type_atom
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._type_atom_in_type_cross1055);
				type_atom108=type_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_atom108.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_cross", 23);
			LeaveRule("type_cross", 23);
			LeaveRule_type_cross();
			if (state.backtracking > 0) { Memoize(input, 23, type_cross_StartIndex); }

		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "type_cross"); }
		return retval;

	}
	// $ANTLR end "type_cross"

	partial void EnterRule_type_atom();
	partial void LeaveRule_type_atom();

	// $ANTLR start "type_atom"
	// Stone.g:221:1: type_atom : ( UIDENT -> ^( Type_Atom UIDENT ) | '(' type ')' -> type );
	[GrammarRule("type_atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type_atom()
	{
		EnterRule_type_atom();
		EnterRule("type_atom", 24);
		TraceIn("type_atom", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken UIDENT109 = default(CommonToken);
		CommonToken char_literal110 = default(CommonToken);
		CommonToken char_literal112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree UIDENT109_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UIDENT=new RewriteRuleITokenStream(adaptor,"token UIDENT");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "type_atom");
		DebugLocation(221, 1);
		try
		{
			// Stone.g:222:2: ( UIDENT -> ^( Type_Atom UIDENT ) | '(' type ')' -> type )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==UIDENT))
			{
				alt37 = 1;
			}
			else if ((LA37_0==51))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:222:4: UIDENT
				{
				DebugLocation(222, 4);
				UIDENT109=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_type_atom1066); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UIDENT.Add(UIDENT109);



				{
				// AST REWRITE
				// elements: UIDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 222:11: -> ^( Type_Atom UIDENT )
				{
					DebugLocation(222, 14);
					// Stone.g:222:14: ^( Type_Atom UIDENT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(222, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Atom, "Type_Atom"), root_1);

					DebugLocation(222, 26);
					adaptor.AddChild(root_1, stream_UIDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:223:4: '(' type ')'
				{
				DebugLocation(223, 4);
				char_literal110=(CommonToken)Match(input,51,Follow._51_in_type_atom1079); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_51.Add(char_literal110);

				DebugLocation(223, 8);
				PushFollow(Follow._type_in_type_atom1081);
				type111=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type111.Tree);
				DebugLocation(223, 13);
				char_literal112=(CommonToken)Match(input,52,Follow._52_in_type_atom1083); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_52.Add(char_literal112);



				{
				// AST REWRITE
				// elements: type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 223:17: -> type
				{
					DebugLocation(223, 20);
					adaptor.AddChild(root_0, stream_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_atom", 24);
			LeaveRule("type_atom", 24);
			LeaveRule_type_atom();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "type_atom"); }
		return retval;

	}
	// $ANTLR end "type_atom"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// Stone.g:227:1: stmt_block : ( ( stmt )+ -> ^( Stmt_Block ( stmt )+ ) | INDENT stmt_block ( NEWLINE )* DEDENT -> stmt_block );
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT114 = default(CommonToken);
		CommonToken NEWLINE116 = default(CommonToken);
		CommonToken DEDENT117 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT114_tree = default(CommonTree);
		CommonTree NEWLINE116_tree = default(CommonTree);
		CommonTree DEDENT117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(227, 1);
		try
		{
			// Stone.g:228:2: ( ( stmt )+ -> ^( Stmt_Block ( stmt )+ ) | INDENT stmt_block ( NEWLINE )* DEDENT -> stmt_block )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==LIDENT||LA40_0==61||(LA40_0>=64 && LA40_0<=65)))
			{
				alt40 = 1;
			}
			else if ((LA40_0==INDENT))
			{
				alt40 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:228:4: ( stmt )+
				{
				DebugLocation(228, 4);
				// Stone.g:228:4: ( stmt )+
				int cnt38=0;
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==LIDENT))
					{
						int LA38_2 = input.LA(2);

						if ((LA38_2==51||LA38_2==57))
						{
							alt38 = 1;
						}


					}
					else if ((LA38_0==61||(LA38_0>=64 && LA38_0<=65)))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:228:4: stmt
						{
						DebugLocation(228, 4);
						PushFollow(Follow._stmt_in_stmt_block1099);
						stmt113=stmt();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt.Add(stmt113.Tree);

						}
						break;

					default:
						if (cnt38 >= 1)
							goto loop38;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee38 = new EarlyExitException( 38, input );
						DebugRecognitionException(eee38);
						throw eee38;
					}
					cnt38++;
				}
				loop38:
					;

				} finally { DebugExitSubRule(38); }



				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 228:10: -> ^( Stmt_Block ( stmt )+ )
				{
					DebugLocation(228, 13);
					// Stone.g:228:13: ^( Stmt_Block ( stmt )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(228, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(228, 26);
					if (!(stream_stmt.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_stmt.HasNext )
					{
						DebugLocation(228, 26);
						adaptor.AddChild(root_1, stream_stmt.NextTree());

					}
					stream_stmt.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:229:4: INDENT stmt_block ( NEWLINE )* DEDENT
				{
				DebugLocation(229, 4);
				INDENT114=(CommonToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1114); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT114);

				DebugLocation(229, 11);
				PushFollow(Follow._stmt_block_in_stmt_block1116);
				stmt_block115=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block115.Tree);
				DebugLocation(229, 22);
				// Stone.g:229:22: ( NEWLINE )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_0 = input.LA(1);

					if ((LA39_0==NEWLINE))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:229:22: NEWLINE
						{
						DebugLocation(229, 22);
						NEWLINE116=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1118); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE116);


						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(229, 31);
				DEDENT117=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1121); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT117);



				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 229:38: -> stmt_block
				{
					DebugLocation(229, 41);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// Stone.g:232:1: stmt : ( stmt_return | stmt_alloc | stmt_assign | stmt_call | stmt_if );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_return118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_alloc119 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_assign120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_call121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_if122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(232, 1);
		try
		{
			// Stone.g:233:2: ( stmt_return | stmt_alloc | stmt_assign | stmt_call | stmt_if )
			int alt41=5;
			try { DebugEnterDecision(41, false);
			switch (input.LA(1))
			{
			case 64:
				{
				alt41 = 1;
				}
				break;
			case 65:
				{
				alt41 = 2;
				}
				break;
			case LIDENT:
				{
				int LA41_3 = input.LA(2);

				if ((LA41_3==57))
				{
					alt41 = 3;
				}
				else if ((LA41_3==51))
				{
					alt41 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 61:
				{
				alt41 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:233:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				PushFollow(Follow._stmt_return_in_stmt1136);
				stmt_return118=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return118.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:234:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._stmt_alloc_in_stmt1141);
				stmt_alloc119=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc119.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:235:4: stmt_assign
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				PushFollow(Follow._stmt_assign_in_stmt1146);
				stmt_assign120=stmt_assign();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_assign120.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Stone.g:236:4: stmt_call
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._stmt_call_in_stmt1151);
				stmt_call121=stmt_call();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_call121.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Stone.g:237:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(237, 4);
				PushFollow(Follow._stmt_if_in_stmt1156);
				stmt_if122=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if122.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// Stone.g:241:1: stmt_return : 'return' expr NEWLINE -> ^( Stmt_Return expr ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 27);
		TraceIn("stmt_return", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal123 = default(CommonToken);
		CommonToken NEWLINE125 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr124 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal123_tree = default(CommonTree);
		CommonTree NEWLINE125_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(241, 1);
		try
		{
			// Stone.g:242:2: ( 'return' expr NEWLINE -> ^( Stmt_Return expr ) )
			DebugEnterAlt(1);
			// Stone.g:242:4: 'return' expr NEWLINE
			{
			DebugLocation(242, 4);
			string_literal123=(CommonToken)Match(input,64,Follow._64_in_stmt_return1168); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(string_literal123);

			DebugLocation(242, 13);
			PushFollow(Follow._expr_in_stmt_return1170);
			expr124=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr124.Tree);
			DebugLocation(242, 18);
			NEWLINE125=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_return1172); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE125);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 242:26: -> ^( Stmt_Return expr )
			{
				DebugLocation(242, 29);
				// Stone.g:242:29: ^( Stmt_Return expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(242, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(242, 43);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 27);
			LeaveRule("stmt_return", 27);
			LeaveRule_stmt_return();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// Stone.g:245:1: stmt_alloc : '|' LIDENT '|' '=' expr NEWLINE -> ^( Stmt_Alloc LIDENT expr ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 28);
		TraceIn("stmt_alloc", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal126 = default(CommonToken);
		CommonToken LIDENT127 = default(CommonToken);
		CommonToken char_literal128 = default(CommonToken);
		CommonToken char_literal129 = default(CommonToken);
		CommonToken NEWLINE131 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree LIDENT127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(245, 1);
		try
		{
			// Stone.g:246:2: ( '|' LIDENT '|' '=' expr NEWLINE -> ^( Stmt_Alloc LIDENT expr ) )
			DebugEnterAlt(1);
			// Stone.g:246:4: '|' LIDENT '|' '=' expr NEWLINE
			{
			DebugLocation(246, 4);
			char_literal126=(CommonToken)Match(input,65,Follow._65_in_stmt_alloc1192); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_65.Add(char_literal126);

			DebugLocation(246, 8);
			LIDENT127=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_stmt_alloc1194); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT127);

			DebugLocation(246, 15);
			char_literal128=(CommonToken)Match(input,65,Follow._65_in_stmt_alloc1196); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_65.Add(char_literal128);

			DebugLocation(246, 19);
			char_literal129=(CommonToken)Match(input,57,Follow._57_in_stmt_alloc1198); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_57.Add(char_literal129);

			DebugLocation(246, 23);
			PushFollow(Follow._expr_in_stmt_alloc1200);
			expr130=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr130.Tree);
			DebugLocation(246, 28);
			NEWLINE131=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_alloc1202); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE131);



			{
			// AST REWRITE
			// elements: expr, LIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:36: -> ^( Stmt_Alloc LIDENT expr )
			{
				DebugLocation(246, 39);
				// Stone.g:246:39: ^( Stmt_Alloc LIDENT expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(246, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Alloc, "Stmt_Alloc"), root_1);

				DebugLocation(246, 52);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(246, 59);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 28);
			LeaveRule("stmt_alloc", 28);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_assign();
	partial void LeaveRule_stmt_assign();

	// $ANTLR start "stmt_assign"
	// Stone.g:249:1: stmt_assign : LIDENT '=' expr NEWLINE -> ^( Stmt_Assign LIDENT expr ) ;
	[GrammarRule("stmt_assign")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_assign()
	{
		EnterRule_stmt_assign();
		EnterRule("stmt_assign", 29);
		TraceIn("stmt_assign", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LIDENT132 = default(CommonToken);
		CommonToken char_literal133 = default(CommonToken);
		CommonToken NEWLINE135 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LIDENT132_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_assign");
		DebugLocation(249, 1);
		try
		{
			// Stone.g:250:2: ( LIDENT '=' expr NEWLINE -> ^( Stmt_Assign LIDENT expr ) )
			DebugEnterAlt(1);
			// Stone.g:250:4: LIDENT '=' expr NEWLINE
			{
			DebugLocation(250, 4);
			LIDENT132=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_stmt_assign1223); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT132);

			DebugLocation(250, 11);
			char_literal133=(CommonToken)Match(input,57,Follow._57_in_stmt_assign1225); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_57.Add(char_literal133);

			DebugLocation(250, 15);
			PushFollow(Follow._expr_in_stmt_assign1227);
			expr134=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr134.Tree);
			DebugLocation(250, 20);
			NEWLINE135=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_assign1229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE135);



			{
			// AST REWRITE
			// elements: expr, LIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:28: -> ^( Stmt_Assign LIDENT expr )
			{
				DebugLocation(250, 31);
				// Stone.g:250:31: ^( Stmt_Assign LIDENT expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 33);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Assign, "Stmt_Assign"), root_1);

				DebugLocation(250, 45);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(250, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_assign", 29);
			LeaveRule("stmt_assign", 29);
			LeaveRule_stmt_assign();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_assign"); }
		return retval;

	}
	// $ANTLR end "stmt_assign"

	partial void EnterRule_stmt_call();
	partial void LeaveRule_stmt_call();

	// $ANTLR start "stmt_call"
	// Stone.g:253:1: stmt_call : LIDENT '(' ( args_list )? ')' NEWLINE -> ^( Stmt_Call LIDENT ( args_list )? ) ;
	[GrammarRule("stmt_call")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_call()
	{
		EnterRule_stmt_call();
		EnterRule("stmt_call", 30);
		TraceIn("stmt_call", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LIDENT136 = default(CommonToken);
		CommonToken char_literal137 = default(CommonToken);
		CommonToken char_literal139 = default(CommonToken);
		CommonToken NEWLINE140 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LIDENT136_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree NEWLINE140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "stmt_call");
		DebugLocation(253, 1);
		try
		{
			// Stone.g:254:2: ( LIDENT '(' ( args_list )? ')' NEWLINE -> ^( Stmt_Call LIDENT ( args_list )? ) )
			DebugEnterAlt(1);
			// Stone.g:254:4: LIDENT '(' ( args_list )? ')' NEWLINE
			{
			DebugLocation(254, 4);
			LIDENT136=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_stmt_call1250); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT136);

			DebugLocation(254, 11);
			char_literal137=(CommonToken)Match(input,51,Follow._51_in_stmt_call1252); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_51.Add(char_literal137);

			DebugLocation(254, 15);
			// Stone.g:254:15: ( args_list )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==DOUBLE||(LA42_0>=INT && LA42_0<=LIDENT)||LA42_0==NORMAL_STRING||LA42_0==UIDENT||LA42_0==51||LA42_0==67))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:254:15: args_list
				{
				DebugLocation(254, 15);
				PushFollow(Follow._args_list_in_stmt_call1254);
				args_list138=args_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_args_list.Add(args_list138.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(254, 26);
			char_literal139=(CommonToken)Match(input,52,Follow._52_in_stmt_call1257); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_52.Add(char_literal139);

			DebugLocation(254, 30);
			NEWLINE140=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_call1259); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE140);



			{
			// AST REWRITE
			// elements: args_list, LIDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:38: -> ^( Stmt_Call LIDENT ( args_list )? )
			{
				DebugLocation(254, 41);
				// Stone.g:254:41: ^( Stmt_Call LIDENT ( args_list )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 43);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Call, "Stmt_Call"), root_1);

				DebugLocation(254, 53);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(254, 60);
				// Stone.g:254:60: ( args_list )?
				if (stream_args_list.HasNext)
				{
					DebugLocation(254, 60);
					adaptor.AddChild(root_1, stream_args_list.NextTree());

				}
				stream_args_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_call", 30);
			LeaveRule("stmt_call", 30);
			LeaveRule_stmt_call();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_call"); }
		return retval;

	}
	// $ANTLR end "stmt_call"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// Stone.g:257:1: stmt_if : 'if' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_If expr stmt_block ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 31);
		TraceIn("stmt_if", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal141 = default(CommonToken);
		CommonToken NEWLINE143 = default(CommonToken);
		CommonToken INDENT144 = default(CommonToken);
		CommonToken NEWLINE146 = default(CommonToken);
		CommonToken DEDENT147 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr142 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal141_tree = default(CommonTree);
		CommonTree NEWLINE143_tree = default(CommonTree);
		CommonTree INDENT144_tree = default(CommonTree);
		CommonTree NEWLINE146_tree = default(CommonTree);
		CommonTree DEDENT147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(257, 1);
		try
		{
			// Stone.g:258:2: ( 'if' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_If expr stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:258:4: 'if' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT )
			{
			DebugLocation(258, 4);
			string_literal141=(CommonToken)Match(input,61,Follow._61_in_stmt_if1281); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(string_literal141);

			DebugLocation(258, 9);
			PushFollow(Follow._expr_in_stmt_if1283);
			expr142=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr142.Tree);
			DebugLocation(258, 14);
			NEWLINE143=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1285); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE143);

			DebugLocation(258, 22);
			// Stone.g:258:22: ( INDENT stmt_block ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:258:23: INDENT stmt_block ( NEWLINE )* DEDENT
			{
			DebugLocation(258, 23);
			INDENT144=(CommonToken)Match(input,INDENT,Follow._INDENT_in_stmt_if1288); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT144);

			DebugLocation(258, 30);
			PushFollow(Follow._stmt_block_in_stmt_if1290);
			stmt_block145=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block145.Tree);
			DebugLocation(258, 41);
			// Stone.g:258:41: ( NEWLINE )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==NEWLINE))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:258:41: NEWLINE
					{
					DebugLocation(258, 41);
					NEWLINE146=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1292); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE146);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(258, 50);
			DEDENT147=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_if1295); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT147);


			}



			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:58: -> ^( Stmt_If expr stmt_block )
			{
				DebugLocation(258, 61);
				// Stone.g:258:61: ^( Stmt_If expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(258, 71);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(258, 76);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 31);
			LeaveRule("stmt_if", 31);
			LeaveRule_stmt_if();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// Stone.g:262:1: expr : ( message_expr | lambda_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 32);
		TraceIn("expr", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> message_expr148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> lambda_expr149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(262, 1);
		try
		{
			// Stone.g:263:2: ( message_expr | lambda_expr )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==DOUBLE||(LA44_0>=INT && LA44_0<=LIDENT)||LA44_0==NORMAL_STRING||LA44_0==UIDENT||LA44_0==51))
			{
				alt44 = 1;
			}
			else if ((LA44_0==67))
			{
				alt44 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:263:4: message_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(263, 4);
				PushFollow(Follow._message_expr_in_expr1318);
				message_expr148=message_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, message_expr148.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:264:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(264, 4);
				PushFollow(Follow._lambda_expr_in_expr1323);
				lambda_expr149=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr149.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 32);
			LeaveRule("expr", 32);
			LeaveRule_expr();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// Stone.g:267:1: lambda_expr : '¦Ë' lambda_args '=>' type NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Expr_Lambda lambda_args type stmt_block ) ;
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 33);
		TraceIn("lambda_expr", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal150 = default(CommonToken);
		CommonToken string_literal152 = default(CommonToken);
		CommonToken NEWLINE154 = default(CommonToken);
		CommonToken INDENT155 = default(CommonToken);
		CommonToken NEWLINE157 = default(CommonToken);
		CommonToken DEDENT158 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> lambda_args151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal150_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree NEWLINE154_tree = default(CommonTree);
		CommonTree INDENT155_tree = default(CommonTree);
		CommonTree NEWLINE157_tree = default(CommonTree);
		CommonTree DEDENT158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_lambda_args=new RewriteRuleSubtreeStream(adaptor,"rule lambda_args");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(267, 1);
		try
		{
			// Stone.g:268:2: ( '¦Ë' lambda_args '=>' type NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Expr_Lambda lambda_args type stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:268:4: '¦Ë' lambda_args '=>' type NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT )
			{
			DebugLocation(268, 4);
			char_literal150=(CommonToken)Match(input,67,Follow._67_in_lambda_expr1334); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_67.Add(char_literal150);

			DebugLocation(268, 8);
			PushFollow(Follow._lambda_args_in_lambda_expr1336);
			lambda_args151=lambda_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lambda_args.Add(lambda_args151.Tree);
			DebugLocation(268, 20);
			string_literal152=(CommonToken)Match(input,58,Follow._58_in_lambda_expr1338); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_58.Add(string_literal152);

			DebugLocation(268, 25);
			PushFollow(Follow._type_in_lambda_expr1340);
			type153=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type153.Tree);
			DebugLocation(268, 30);
			NEWLINE154=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_expr1342); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE154);

			DebugLocation(268, 38);
			// Stone.g:268:38: ( INDENT stmt_block ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:268:39: INDENT stmt_block ( NEWLINE )* DEDENT
			{
			DebugLocation(268, 39);
			INDENT155=(CommonToken)Match(input,INDENT,Follow._INDENT_in_lambda_expr1345); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT155);

			DebugLocation(268, 46);
			PushFollow(Follow._stmt_block_in_lambda_expr1347);
			stmt_block156=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block156.Tree);
			DebugLocation(268, 57);
			// Stone.g:268:57: ( NEWLINE )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==NEWLINE))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:268:57: NEWLINE
					{
					DebugLocation(268, 57);
					NEWLINE157=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_expr1349); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE157);


					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(268, 66);
			DEDENT158=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_lambda_expr1352); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT158);


			}



			{
			// AST REWRITE
			// elements: lambda_args, stmt_block, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 268:74: -> ^( Expr_Lambda lambda_args type stmt_block )
			{
				DebugLocation(268, 77);
				// Stone.g:268:77: ^( Expr_Lambda lambda_args type stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 79);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

				DebugLocation(268, 91);
				adaptor.AddChild(root_1, stream_lambda_args.NextTree());
				DebugLocation(268, 103);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(268, 108);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 33);
			LeaveRule("lambda_expr", 33);
			LeaveRule_lambda_expr();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_lambda_args();
	partial void LeaveRule_lambda_args();

	// $ANTLR start "lambda_args"
	// Stone.g:271:1: lambda_args : ( match )? -> ^( Lambda_Args match ) ;
	[GrammarRule("lambda_args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> lambda_args()
	{
		EnterRule_lambda_args();
		EnterRule("lambda_args", 34);
		TraceIn("lambda_args", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "lambda_args");
		DebugLocation(271, 1);
		try
		{
			// Stone.g:272:2: ( ( match )? -> ^( Lambda_Args match ) )
			DebugEnterAlt(1);
			// Stone.g:272:4: ( match )?
			{
			DebugLocation(272, 4);
			// Stone.g:272:4: ( match )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==LIDENT||LA46_0==51))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:272:4: match
				{
				DebugLocation(272, 4);
				PushFollow(Follow._match_in_lambda_args1376);
				match159=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match159.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: match
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:11: -> ^( Lambda_Args match )
			{
				DebugLocation(272, 14);
				// Stone.g:272:14: ^( Lambda_Args match )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(272, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Lambda_Args, "Lambda_Args"), root_1);

				DebugLocation(272, 28);
				adaptor.AddChild(root_1, stream_match.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_args", 34);
			LeaveRule("lambda_args", 34);
			LeaveRule_lambda_args();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_args"); }
		return retval;

	}
	// $ANTLR end "lambda_args"

	partial void EnterRule_message_expr();
	partial void LeaveRule_message_expr();

	// $ANTLR start "message_expr"
	// Stone.g:275:1: message_expr options {backtrack=true; memoize=true; } : ( add_expr ( message_item )+ -> ^( Expr_Message add_expr ( message_item )+ ) | add_expr );
	[GrammarRule("message_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_expr()
	{
		EnterRule_message_expr();
		EnterRule("message_expr", 35);
		TraceIn("message_expr", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int message_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> add_expr160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_item161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> add_expr162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_message_item=new RewriteRuleSubtreeStream(adaptor,"rule message_item");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "message_expr");
		DebugLocation(275, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Stone.g:280:2: ( add_expr ( message_item )+ -> ^( Expr_Message add_expr ( message_item )+ ) | add_expr )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case LIDENT:
				{
				int LA48_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt48 = 1;
				}
				else if ((true))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
				{
				int LA48_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt48 = 1;
				}
				else if ((true))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DOUBLE:
				{
				int LA48_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt48 = 1;
				}
				else if ((true))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NORMAL_STRING:
				{
				int LA48_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt48 = 1;
				}
				else if ((true))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case UIDENT:
				{
				int LA48_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt48 = 1;
				}
				else if ((true))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 51:
				{
				int LA48_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt48 = 1;
				}
				else if ((true))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:280:4: add_expr ( message_item )+
				{
				DebugLocation(280, 4);
				PushFollow(Follow._add_expr_in_message_expr1412);
				add_expr160=add_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_add_expr.Add(add_expr160.Tree);
				DebugLocation(280, 13);
				// Stone.g:280:13: ( message_item )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==LIDENT))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:280:13: message_item
						{
						DebugLocation(280, 13);
						PushFollow(Follow._message_item_in_message_expr1414);
						message_item161=message_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_message_item.Add(message_item161.Tree);

						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: add_expr, message_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 280:27: -> ^( Expr_Message add_expr ( message_item )+ )
				{
					DebugLocation(280, 30);
					// Stone.g:280:30: ^( Expr_Message add_expr ( message_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 32);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Message, "Expr_Message"), root_1);

					DebugLocation(280, 45);
					adaptor.AddChild(root_1, stream_add_expr.NextTree());
					DebugLocation(280, 54);
					if (!(stream_message_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_message_item.HasNext )
					{
						DebugLocation(280, 54);
						adaptor.AddChild(root_1, stream_message_item.NextTree());

					}
					stream_message_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:281:4: add_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._add_expr_in_message_expr1431);
				add_expr162=add_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_expr162.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_expr", 35);
			LeaveRule("message_expr", 35);
			LeaveRule_message_expr();
			if (state.backtracking > 0) { Memoize(input, 35, message_expr_StartIndex); }

		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "message_expr"); }
		return retval;

	}
	// $ANTLR end "message_expr"

	partial void EnterRule_message_item();
	partial void LeaveRule_message_item();

	// $ANTLR start "message_item"
	// Stone.g:284:1: message_item : LIDENT ( '(' args_list ')' )? -> ^( Message_Item LIDENT ( args_list )? ) ;
	[GrammarRule("message_item")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_item()
	{
		EnterRule_message_item();
		EnterRule("message_item", 36);
		TraceIn("message_item", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LIDENT163 = default(CommonToken);
		CommonToken char_literal164 = default(CommonToken);
		CommonToken char_literal166 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list165 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LIDENT163_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "message_item");
		DebugLocation(284, 1);
		try
		{
			// Stone.g:285:2: ( LIDENT ( '(' args_list ')' )? -> ^( Message_Item LIDENT ( args_list )? ) )
			DebugEnterAlt(1);
			// Stone.g:285:4: LIDENT ( '(' args_list ')' )?
			{
			DebugLocation(285, 4);
			LIDENT163=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_message_item1442); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LIDENT.Add(LIDENT163);

			DebugLocation(285, 11);
			// Stone.g:285:11: ( '(' args_list ')' )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==51))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:285:12: '(' args_list ')'
				{
				DebugLocation(285, 12);
				char_literal164=(CommonToken)Match(input,51,Follow._51_in_message_item1445); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_51.Add(char_literal164);

				DebugLocation(285, 16);
				PushFollow(Follow._args_list_in_message_item1447);
				args_list165=args_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_args_list.Add(args_list165.Tree);
				DebugLocation(285, 26);
				char_literal166=(CommonToken)Match(input,52,Follow._52_in_message_item1449); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_52.Add(char_literal166);


				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: LIDENT, args_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:33: -> ^( Message_Item LIDENT ( args_list )? )
			{
				DebugLocation(285, 36);
				// Stone.g:285:36: ^( Message_Item LIDENT ( args_list )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Item, "Message_Item"), root_1);

				DebugLocation(285, 51);
				adaptor.AddChild(root_1, stream_LIDENT.NextNode());
				DebugLocation(285, 58);
				// Stone.g:285:58: ( args_list )?
				if (stream_args_list.HasNext)
				{
					DebugLocation(285, 58);
					adaptor.AddChild(root_1, stream_args_list.NextTree());

				}
				stream_args_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_item", 36);
			LeaveRule("message_item", 36);
			LeaveRule_message_item();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "message_item"); }
		return retval;

	}
	// $ANTLR end "message_item"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// Stone.g:288:1: args_list : expr ( ',' expr )* -> ( expr )* ;
	[GrammarRule("args_list")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 37);
		TraceIn("args_list", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal168 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(288, 1);
		try
		{
			// Stone.g:289:2: ( expr ( ',' expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// Stone.g:289:4: expr ( ',' expr )*
			{
			DebugLocation(289, 4);
			PushFollow(Follow._expr_in_args_list1474);
			expr167=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr167.Tree);
			DebugLocation(289, 9);
			// Stone.g:289:9: ( ',' expr )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==53))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:289:10: ',' expr
					{
					DebugLocation(289, 10);
					char_literal168=(CommonToken)Match(input,53,Follow._53_in_args_list1477); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_53.Add(char_literal168);

					DebugLocation(289, 14);
					PushFollow(Follow._expr_in_args_list1479);
					expr169=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr169.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 289:21: -> ( expr )*
			{
				DebugLocation(289, 24);
				// Stone.g:289:24: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(289, 24);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args_list", 37);
			LeaveRule("args_list", 37);
			LeaveRule_args_list();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return retval;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// Stone.g:292:1: add_expr : mul_expr ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 38);
		TraceIn("add_expr", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mul_expr170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mul_expr172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(292, 1);
		try
		{
			// Stone.g:293:2: ( mul_expr ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )* )
			DebugEnterAlt(1);
			// Stone.g:293:4: mul_expr ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(293, 4);
			PushFollow(Follow._mul_expr_in_add_expr1497);
			mul_expr170=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mul_expr170.Tree);
			DebugLocation(293, 13);
			// Stone.g:293:13: ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==OP_MINUS||LA51_0==OP_PLUS))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:293:14: ( OP_PLUS | OP_MINUS ) ^ mul_expr
					{
					DebugLocation(293, 34);

					set171=(CommonToken)input.LT(1);
					set171=(CommonToken)input.LT(1);
					if (input.LA(1)==OP_MINUS||input.LA(1)==OP_PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set171), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(293, 36);
					PushFollow(Follow._mul_expr_in_add_expr1509);
					mul_expr172=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mul_expr172.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 38);
			LeaveRule("add_expr", 38);
			LeaveRule_add_expr();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// Stone.g:296:1: mul_expr : call_expr ( ( OP_MUL | OP_DIV ) ^ call_expr )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 39);
		TraceIn("mul_expr", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set174 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> call_expr173 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> call_expr175 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set174_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(296, 1);
		try
		{
			// Stone.g:297:2: ( call_expr ( ( OP_MUL | OP_DIV ) ^ call_expr )* )
			DebugEnterAlt(1);
			// Stone.g:297:4: call_expr ( ( OP_MUL | OP_DIV ) ^ call_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(297, 4);
			PushFollow(Follow._call_expr_in_mul_expr1522);
			call_expr173=call_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, call_expr173.Tree);
			DebugLocation(297, 14);
			// Stone.g:297:14: ( ( OP_MUL | OP_DIV ) ^ call_expr )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==OP_DIV||LA52_0==OP_MUL))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:297:15: ( OP_MUL | OP_DIV ) ^ call_expr
					{
					DebugLocation(297, 32);

					set174=(CommonToken)input.LT(1);
					set174=(CommonToken)input.LT(1);
					if (input.LA(1)==OP_DIV||input.LA(1)==OP_MUL)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set174), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(297, 34);
					PushFollow(Follow._call_expr_in_mul_expr1534);
					call_expr175=call_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, call_expr175.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 39);
			LeaveRule("mul_expr", 39);
			LeaveRule_mul_expr();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// Stone.g:300:1: call_expr : ( LIDENT '(' ( args_list )? ')' -> ^( Expr_Call LIDENT ( args_list )? ) | access_expr );
	[GrammarRule("call_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 40);
		TraceIn("call_expr", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LIDENT176 = default(CommonToken);
		CommonToken char_literal177 = default(CommonToken);
		CommonToken char_literal179 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> access_expr180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LIDENT176_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_LIDENT=new RewriteRuleITokenStream(adaptor,"token LIDENT");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(300, 1);
		try
		{
			// Stone.g:301:2: ( LIDENT '(' ( args_list )? ')' -> ^( Expr_Call LIDENT ( args_list )? ) | access_expr )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==LIDENT))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==51))
				{
					alt54 = 1;
				}
				else if ((LA54_1==Expr_Access||LA54_1==LIDENT||LA54_1==NEWLINE||(LA54_1>=OP_DIV && LA54_1<=OP_PLUS)||(LA54_1>=52 && LA54_1<=53)))
				{
					alt54 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA54_0==DOUBLE||LA54_0==INT||LA54_0==NORMAL_STRING||LA54_0==UIDENT||LA54_0==51))
			{
				alt54 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:301:4: LIDENT '(' ( args_list )? ')'
				{
				DebugLocation(301, 4);
				LIDENT176=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_call_expr1547); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIDENT.Add(LIDENT176);

				DebugLocation(301, 11);
				char_literal177=(CommonToken)Match(input,51,Follow._51_in_call_expr1549); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_51.Add(char_literal177);

				DebugLocation(301, 15);
				// Stone.g:301:15: ( args_list )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==DOUBLE||(LA53_0>=INT && LA53_0<=LIDENT)||LA53_0==NORMAL_STRING||LA53_0==UIDENT||LA53_0==51||LA53_0==67))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:301:15: args_list
					{
					DebugLocation(301, 15);
					PushFollow(Follow._args_list_in_call_expr1551);
					args_list178=args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_args_list.Add(args_list178.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(301, 26);
				char_literal179=(CommonToken)Match(input,52,Follow._52_in_call_expr1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_52.Add(char_literal179);



				{
				// AST REWRITE
				// elements: args_list, LIDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 301:30: -> ^( Expr_Call LIDENT ( args_list )? )
				{
					DebugLocation(301, 33);
					// Stone.g:301:33: ^( Expr_Call LIDENT ( args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(301, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(301, 45);
					adaptor.AddChild(root_1, stream_LIDENT.NextNode());
					DebugLocation(301, 52);
					// Stone.g:301:52: ( args_list )?
					if (stream_args_list.HasNext)
					{
						DebugLocation(301, 52);
						adaptor.AddChild(root_1, stream_args_list.NextTree());

					}
					stream_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:302:4: access_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(302, 4);
				PushFollow(Follow._access_expr_in_call_expr1570);
				access_expr180=access_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_expr180.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call_expr", 40);
			LeaveRule("call_expr", 40);
			LeaveRule_call_expr();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return retval;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_access_expr();
	partial void LeaveRule_access_expr();

	// $ANTLR start "access_expr"
	// Stone.g:305:1: access_expr : atom_expr ( Expr_Access ^ LIDENT )* ;
	[GrammarRule("access_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> access_expr()
	{
		EnterRule_access_expr();
		EnterRule("access_expr", 41);
		TraceIn("access_expr", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Expr_Access182 = default(CommonToken);
		CommonToken LIDENT183 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom_expr181 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Expr_Access182_tree = default(CommonTree);
		CommonTree LIDENT183_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "access_expr");
		DebugLocation(305, 1);
		try
		{
			// Stone.g:306:2: ( atom_expr ( Expr_Access ^ LIDENT )* )
			DebugEnterAlt(1);
			// Stone.g:306:4: atom_expr ( Expr_Access ^ LIDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(306, 4);
			PushFollow(Follow._atom_expr_in_access_expr1581);
			atom_expr181=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom_expr181.Tree);
			DebugLocation(306, 14);
			// Stone.g:306:14: ( Expr_Access ^ LIDENT )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==Expr_Access))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:306:15: Expr_Access ^ LIDENT
					{
					DebugLocation(306, 26);
					Expr_Access182=(CommonToken)Match(input,Expr_Access,Follow._Expr_Access_in_access_expr1584); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Expr_Access182_tree = (CommonTree)adaptor.Create(Expr_Access182);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Access182_tree, root_0);
					}
					DebugLocation(306, 28);
					LIDENT183=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_access_expr1587); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LIDENT183_tree = (CommonTree)adaptor.Create(LIDENT183);
					adaptor.AddChild(root_0, LIDENT183_tree);
					}

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_expr", 41);
			LeaveRule("access_expr", 41);
			LeaveRule_access_expr();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "access_expr"); }
		return retval;

	}
	// $ANTLR end "access_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// Stone.g:309:1: atom_expr : ( LIDENT | INT | DOUBLE | NORMAL_STRING | UIDENT '(' args_list ')' -> ^( Expr_New_Data UIDENT args_list ) | '(' expr ')' -> expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 42);
		TraceIn("atom_expr", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LIDENT184 = default(CommonToken);
		CommonToken INT185 = default(CommonToken);
		CommonToken DOUBLE186 = default(CommonToken);
		CommonToken NORMAL_STRING187 = default(CommonToken);
		CommonToken UIDENT188 = default(CommonToken);
		CommonToken char_literal189 = default(CommonToken);
		CommonToken char_literal191 = default(CommonToken);
		CommonToken char_literal192 = default(CommonToken);
		CommonToken char_literal194 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list190 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LIDENT184_tree = default(CommonTree);
		CommonTree INT185_tree = default(CommonTree);
		CommonTree DOUBLE186_tree = default(CommonTree);
		CommonTree NORMAL_STRING187_tree = default(CommonTree);
		CommonTree UIDENT188_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree char_literal191_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UIDENT=new RewriteRuleITokenStream(adaptor,"token UIDENT");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(309, 1);
		try
		{
			// Stone.g:310:2: ( LIDENT | INT | DOUBLE | NORMAL_STRING | UIDENT '(' args_list ')' -> ^( Expr_New_Data UIDENT args_list ) | '(' expr ')' -> expr )
			int alt56=6;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case LIDENT:
				{
				alt56 = 1;
				}
				break;
			case INT:
				{
				alt56 = 2;
				}
				break;
			case DOUBLE:
				{
				alt56 = 3;
				}
				break;
			case NORMAL_STRING:
				{
				alt56 = 4;
				}
				break;
			case UIDENT:
				{
				alt56 = 5;
				}
				break;
			case 51:
				{
				alt56 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:310:4: LIDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(310, 4);
				LIDENT184=(CommonToken)Match(input,LIDENT,Follow._LIDENT_in_atom_expr1600); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LIDENT184_tree = (CommonTree)adaptor.Create(LIDENT184);
				adaptor.AddChild(root_0, LIDENT184_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:311:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(311, 4);
				INT185=(CommonToken)Match(input,INT,Follow._INT_in_atom_expr1605); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT185_tree = (CommonTree)adaptor.Create(INT185);
				adaptor.AddChild(root_0, INT185_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:312:4: DOUBLE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(312, 4);
				DOUBLE186=(CommonToken)Match(input,DOUBLE,Follow._DOUBLE_in_atom_expr1610); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOUBLE186_tree = (CommonTree)adaptor.Create(DOUBLE186);
				adaptor.AddChild(root_0, DOUBLE186_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Stone.g:313:4: NORMAL_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(313, 4);
				NORMAL_STRING187=(CommonToken)Match(input,NORMAL_STRING,Follow._NORMAL_STRING_in_atom_expr1615); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NORMAL_STRING187_tree = (CommonTree)adaptor.Create(NORMAL_STRING187);
				adaptor.AddChild(root_0, NORMAL_STRING187_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Stone.g:314:4: UIDENT '(' args_list ')'
				{
				DebugLocation(314, 4);
				UIDENT188=(CommonToken)Match(input,UIDENT,Follow._UIDENT_in_atom_expr1620); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UIDENT.Add(UIDENT188);

				DebugLocation(314, 11);
				char_literal189=(CommonToken)Match(input,51,Follow._51_in_atom_expr1622); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_51.Add(char_literal189);

				DebugLocation(314, 15);
				PushFollow(Follow._args_list_in_atom_expr1624);
				args_list190=args_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_args_list.Add(args_list190.Tree);
				DebugLocation(314, 25);
				char_literal191=(CommonToken)Match(input,52,Follow._52_in_atom_expr1626); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_52.Add(char_literal191);



				{
				// AST REWRITE
				// elements: args_list, UIDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:29: -> ^( Expr_New_Data UIDENT args_list )
				{
					DebugLocation(314, 32);
					// Stone.g:314:32: ^( Expr_New_Data UIDENT args_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Data, "Expr_New_Data"), root_1);

					DebugLocation(314, 48);
					adaptor.AddChild(root_1, stream_UIDENT.NextNode());
					DebugLocation(314, 55);
					adaptor.AddChild(root_1, stream_args_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Stone.g:315:4: '(' expr ')'
				{
				DebugLocation(315, 4);
				char_literal192=(CommonToken)Match(input,51,Follow._51_in_atom_expr1641); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_51.Add(char_literal192);

				DebugLocation(315, 8);
				PushFollow(Follow._expr_in_atom_expr1643);
				expr193=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr193.Tree);
				DebugLocation(315, 13);
				char_literal194=(CommonToken)Match(input,52,Follow._52_in_atom_expr1645); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_52.Add(char_literal194);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:17: -> expr
				{
					DebugLocation(315, 20);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 42);
			LeaveRule("atom_expr", 42);
			LeaveRule_atom_expr();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_synpred1_Stone_fragment();
	partial void LeaveRule_synpred1_Stone_fragment();

	// $ANTLR start synpred1_Stone
	public void synpred1_Stone_fragment()
	{
		EnterRule_synpred1_Stone_fragment();
		EnterRule("synpred1_Stone_fragment", 43);
		TraceIn("synpred1_Stone_fragment", 43);
		try
		{
			// Stone.g:189:4: ( match_var ( ',' match_var )+ )
			DebugEnterAlt(1);
			// Stone.g:189:4: match_var ( ',' match_var )+
			{
			DebugLocation(189, 4);
			PushFollow(Follow._match_var_in_synpred1_Stone896);
			match_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(189, 14);
			// Stone.g:189:14: ( ',' match_var )+
			int cnt57=0;
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==53))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:189:15: ',' match_var
					{
					DebugLocation(189, 15);
					Match(input,53,Follow._53_in_synpred1_Stone899); if (state.failed) return;
					DebugLocation(189, 19);
					PushFollow(Follow._match_var_in_synpred1_Stone901);
					match_var();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt57 >= 1)
						goto loop57;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee57 = new EarlyExitException( 57, input );
					DebugRecognitionException(eee57);
					throw eee57;
				}
				cnt57++;
			}
			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

		}
		finally
		{
			TraceOut("synpred1_Stone_fragment", 43);
			LeaveRule("synpred1_Stone_fragment", 43);
			LeaveRule_synpred1_Stone_fragment();
		}
	}
	// $ANTLR end synpred1_Stone

	partial void EnterRule_synpred2_Stone_fragment();
	partial void LeaveRule_synpred2_Stone_fragment();

	// $ANTLR start synpred2_Stone
	public void synpred2_Stone_fragment()
	{
		EnterRule_synpred2_Stone_fragment();
		EnterRule("synpred2_Stone_fragment", 44);
		TraceIn("synpred2_Stone_fragment", 44);
		try
		{
			// Stone.g:208:4: ( type_cross '->' type_cross )
			DebugEnterAlt(1);
			// Stone.g:208:4: type_cross '->' type_cross
			{
			DebugLocation(208, 4);
			PushFollow(Follow._type_cross_in_synpred2_Stone988);
			type_cross();
			PopFollow();
			if (state.failed) return;
			DebugLocation(208, 15);
			Match(input,54,Follow._54_in_synpred2_Stone990); if (state.failed) return;
			DebugLocation(208, 20);
			PushFollow(Follow._type_cross_in_synpred2_Stone992);
			type_cross();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Stone_fragment", 44);
			LeaveRule("synpred2_Stone_fragment", 44);
			LeaveRule_synpred2_Stone_fragment();
		}
	}
	// $ANTLR end synpred2_Stone

	partial void EnterRule_synpred3_Stone_fragment();
	partial void LeaveRule_synpred3_Stone_fragment();

	// $ANTLR start synpred3_Stone
	public void synpred3_Stone_fragment()
	{
		EnterRule_synpred3_Stone_fragment();
		EnterRule("synpred3_Stone_fragment", 45);
		TraceIn("synpred3_Stone_fragment", 45);
		try
		{
			// Stone.g:217:4: ( type_atom ( '¡Á' type_atom )+ )
			DebugEnterAlt(1);
			// Stone.g:217:4: type_atom ( '¡Á' type_atom )+
			{
			DebugLocation(217, 4);
			PushFollow(Follow._type_atom_in_synpred3_Stone1034);
			type_atom();
			PopFollow();
			if (state.failed) return;
			DebugLocation(217, 14);
			// Stone.g:217:14: ( '¡Á' type_atom )+
			int cnt58=0;
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==66))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:217:15: '¡Á' type_atom
					{
					DebugLocation(217, 15);
					Match(input,66,Follow._66_in_synpred3_Stone1037); if (state.failed) return;
					DebugLocation(217, 19);
					PushFollow(Follow._type_atom_in_synpred3_Stone1039);
					type_atom();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt58 >= 1)
						goto loop58;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee58 = new EarlyExitException( 58, input );
					DebugRecognitionException(eee58);
					throw eee58;
				}
				cnt58++;
			}
			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

		}
		finally
		{
			TraceOut("synpred3_Stone_fragment", 45);
			LeaveRule("synpred3_Stone_fragment", 45);
			LeaveRule_synpred3_Stone_fragment();
		}
	}
	// $ANTLR end synpred3_Stone

	partial void EnterRule_synpred4_Stone_fragment();
	partial void LeaveRule_synpred4_Stone_fragment();

	// $ANTLR start synpred4_Stone
	public void synpred4_Stone_fragment()
	{
		EnterRule_synpred4_Stone_fragment();
		EnterRule("synpred4_Stone_fragment", 46);
		TraceIn("synpred4_Stone_fragment", 46);
		try
		{
			// Stone.g:280:4: ( add_expr ( message_item )+ )
			DebugEnterAlt(1);
			// Stone.g:280:4: add_expr ( message_item )+
			{
			DebugLocation(280, 4);
			PushFollow(Follow._add_expr_in_synpred4_Stone1412);
			add_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(280, 13);
			// Stone.g:280:13: ( message_item )+
			int cnt59=0;
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==LIDENT))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:280:13: message_item
					{
					DebugLocation(280, 13);
					PushFollow(Follow._message_item_in_synpred4_Stone1414);
					message_item();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt59 >= 1)
						goto loop59;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee59 = new EarlyExitException( 59, input );
					DebugRecognitionException(eee59);
					throw eee59;
				}
				cnt59++;
			}
			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

		}
		finally
		{
			TraceOut("synpred4_Stone_fragment", 46);
			LeaveRule("synpred4_Stone_fragment", 46);
			LeaveRule_synpred4_Stone_fragment();
		}
	}
	// $ANTLR end synpred4_Stone
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA5 dfa5;
	private DFA8 dfa8;
	private DFA11 dfa11;
	private DFA17 dfa17;
	private DFA22 dfa22;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this );
		dfa5 = new DFA5( this );
		dfa8 = new DFA8( this );
		dfa11 = new DFA11( this );
		dfa17 = new DFA17( this );
		dfa22 = new DFA22( this );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x4\xFFFF";
		private const string DFA1_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA1_minS =
			"\x2\x1F\x2\xFFFF";
		private const string DFA1_maxS =
			"\x2\x3E\x2\xFFFF";
		private const string DFA1_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA1_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x1\x1\x1E\xFFFF\x1\x3",
				"\x1\x1\x1E\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "()+ loopback of 99:4: ( module_def )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x4\xFFFF";
		private const string DFA5_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA5_maxS =
			"\x2\x3F\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1B\xFFFF\x2\x3\x1\xFFFF\x2\x3",
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1B\xFFFF\x2\x3\x1\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()+ loopback of 107:4: ( block )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x7\xFFFF";
		private const string DFA8_eofS =
			"\x7\xFFFF";
		private const string DFA8_minS =
			"\x2\x16\x5\xFFFF";
		private const string DFA8_maxS =
			"\x2\x3F\x5\xFFFF";
		private const string DFA8_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5";
		private const string DFA8_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x5\x8\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x1\x2\x1\xFFFF\x1\x6\x1\x4",
				"\x1\x5\x8\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x1\x2\x1\xFFFF\x1\x6\x1\x4",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "111:1: block : ( data_def | class_def | proxy_def | func_def | module_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x4\xFFFF";
		private const string DFA11_eofS =
			"\x4\xFFFF";
		private const string DFA11_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA11_maxS =
			"\x2\x1F\x2\xFFFF";
		private const string DFA11_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA11_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "()+ loopback of 125:4: ( data_def_item )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x4\xFFFF";
		private const string DFA17_eofS =
			"\x4\xFFFF";
		private const string DFA17_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA17_maxS =
			"\x2\x1F\x2\xFFFF";
		private const string DFA17_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA17_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "()+ loopback of 139:4: ( message_declare )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x4\xFFFF";
		private const string DFA22_eofS =
			"\x4\xFFFF";
		private const string DFA22_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA22_maxS =
			"\x2\x1F\x2\xFFFF";
		private const string DFA22_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA22_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"\x1\x2\xF\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "()+ loopback of 149:4: ( message_def )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _module_def_in_parse296 = new BitSet(new ulong[]{0x4000000080000000UL});
		public static readonly BitSet _NEWLINE_in_parse299 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EOF_in_parse302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_module_def322 = new BitSet(new ulong[]{0x4000000080000000UL});
		public static readonly BitSet _62_in_module_def325 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _UIDENT_in_module_def327 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_module_def329 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INDENT_in_module_def332 = new BitSet(new ulong[]{0xD800000080500000UL});
		public static readonly BitSet _module_inner_in_module_def334 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_module_def336 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_module_def339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_module_inner361 = new BitSet(new ulong[]{0xD800000080400002UL});
		public static readonly BitSet _INDENT_in_module_inner372 = new BitSet(new ulong[]{0xD800000080500000UL});
		public static readonly BitSet _module_inner_in_module_inner374 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_module_inner376 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_module_inner379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _data_def_in_block394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_block399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxy_def_in_block404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_block409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _module_def_in_block414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_data_def426 = new BitSet(new ulong[]{0x1000000080000000UL});
		public static readonly BitSet _60_in_data_def429 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _UIDENT_in_data_def431 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_data_def433 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INDENT_in_data_def436 = new BitSet(new ulong[]{0x80500000UL});
		public static readonly BitSet _data_def_inner_in_data_def438 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_data_def440 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_data_def443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _data_def_item_in_data_def_inner465 = new BitSet(new ulong[]{0x80400002UL});
		public static readonly BitSet _INDENT_in_data_def_inner480 = new BitSet(new ulong[]{0x80500000UL});
		public static readonly BitSet _data_def_inner_in_data_def_inner482 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_data_def_inner484 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_data_def_inner487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_data_def_item502 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _LIDENT_in_data_def_item505 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_data_def_item507 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_in_data_def_item509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_class_def531 = new BitSet(new ulong[]{0x800000080000000UL});
		public static readonly BitSet _59_in_class_def534 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _UIDENT_in_class_def536 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def538 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INDENT_in_class_def541 = new BitSet(new ulong[]{0x80500000UL});
		public static readonly BitSet _class_def_inner_in_class_def543 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_class_def545 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_class_def548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_declare_in_class_def_inner570 = new BitSet(new ulong[]{0x80400002UL});
		public static readonly BitSet _INDENT_in_class_def_inner585 = new BitSet(new ulong[]{0x80500000UL});
		public static readonly BitSet _class_def_inner_in_class_def_inner587 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_class_def_inner589 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_class_def_inner592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_proxy_def608 = new BitSet(new ulong[]{0x8000000080000000UL});
		public static readonly BitSet _63_in_proxy_def611 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _UIDENT_in_proxy_def613 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_proxy_def615 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _UIDENT_in_proxy_def617 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_proxy_def619 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INDENT_in_proxy_def622 = new BitSet(new ulong[]{0x80500000UL});
		public static readonly BitSet _proxy_def_inner_in_proxy_def624 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_proxy_def626 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_proxy_def629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_def_in_proxy_def_inner653 = new BitSet(new ulong[]{0x80400002UL});
		public static readonly BitSet _INDENT_in_proxy_def_inner668 = new BitSet(new ulong[]{0x80500000UL});
		public static readonly BitSet _proxy_def_inner_in_proxy_def_inner670 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_proxy_def_inner672 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_proxy_def_inner675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_message_declare691 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _LIDENT_in_message_declare694 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_message_declare696 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_in_message_declare698 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_message_declare700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_declare_in_message_def722 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _NEWLINE_in_message_def724 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _LIDENT_in_message_def727 = new BitSet(new ulong[]{0x8000080400000UL});
		public static readonly BitSet _message_def_args_in_message_def729 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_message_def731 = new BitSet(new ulong[]{0x2000000000500000UL,0x3UL});
		public static readonly BitSet _stmt_block_in_message_def733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_in_message_def_args758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_declare780 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _LIDENT_in_func_declare783 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_func_declare785 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_in_func_declare787 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_func_declare789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_declare_in_func_def811 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _NEWLINE_in_func_def813 = new BitSet(new ulong[]{0x80400000UL});
		public static readonly BitSet _LIDENT_in_func_def816 = new BitSet(new ulong[]{0x8000080400000UL});
		public static readonly BitSet _func_def_args_in_func_def818 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_func_def820 = new BitSet(new ulong[]{0x2000000000500000UL,0x3UL});
		public static readonly BitSet _stmt_block_in_func_def822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_in_func_def_args847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_cross_in_match869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_var_in_match_cross896 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_match_cross899 = new BitSet(new ulong[]{0x8000000400000UL});
		public static readonly BitSet _match_var_in_match_cross901 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _match_var_in_match_cross917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIDENT_in_match_var928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_match_var941 = new BitSet(new ulong[]{0x8000000400000UL});
		public static readonly BitSet _match_in_match_var943 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_match_var945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_cross_in_type_func988 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_type_func990 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_cross_in_type_func992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_cross_in_type_func1007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_atom_in_type_cross1034 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _66_in_type_cross1037 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_atom_in_type_cross1039 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _type_atom_in_type_cross1055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UIDENT_in_type_atom1066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_type_atom1079 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_in_type_atom1081 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_type_atom1083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_stmt_block1099 = new BitSet(new ulong[]{0x2000000000400002UL,0x3UL});
		public static readonly BitSet _INDENT_in_stmt_block1114 = new BitSet(new ulong[]{0x2000000000500000UL,0x3UL});
		public static readonly BitSet _stmt_block_in_stmt_block1116 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1118 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_stmt_block1121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt1141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_assign_in_stmt1146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_call_in_stmt1151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_stmt_return1168 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _expr_in_stmt_return1170 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_return1172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_stmt_alloc1192 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _LIDENT_in_stmt_alloc1194 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_stmt_alloc1196 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_stmt_alloc1198 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1200 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_alloc1202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIDENT_in_stmt_assign1223 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_stmt_assign1225 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _expr_in_stmt_assign1227 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_assign1229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIDENT_in_stmt_call1250 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_stmt_call1252 = new BitSet(new ulong[]{0x1A000100600080UL,0x8UL});
		public static readonly BitSet _args_list_in_stmt_call1254 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_stmt_call1257 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_call1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_stmt_if1281 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _expr_in_stmt_if1283 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1285 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INDENT_in_stmt_if1288 = new BitSet(new ulong[]{0x2000000000500000UL,0x3UL});
		public static readonly BitSet _stmt_block_in_stmt_if1290 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1292 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_stmt_if1295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_expr_in_expr1318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_lambda_expr1334 = new BitSet(new ulong[]{0x408000000400000UL});
		public static readonly BitSet _lambda_args_in_lambda_expr1336 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_lambda_expr1338 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_in_lambda_expr1340 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _NEWLINE_in_lambda_expr1342 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _INDENT_in_lambda_expr1345 = new BitSet(new ulong[]{0x2000000000500000UL,0x3UL});
		public static readonly BitSet _stmt_block_in_lambda_expr1347 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _NEWLINE_in_lambda_expr1349 = new BitSet(new ulong[]{0x80000040UL});
		public static readonly BitSet _DEDENT_in_lambda_expr1352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_in_lambda_args1376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_message_expr1412 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _message_item_in_message_expr1414 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _add_expr_in_message_expr1431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIDENT_in_message_item1442 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _51_in_message_item1445 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _args_list_in_message_item1447 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_message_item1449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args_list1474 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _53_in_args_list1477 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _expr_in_args_list1479 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _mul_expr_in_add_expr1497 = new BitSet(new ulong[]{0x1400000002UL});
		public static readonly BitSet _set_in_add_expr1500 = new BitSet(new ulong[]{0xA000100600080UL});
		public static readonly BitSet _mul_expr_in_add_expr1509 = new BitSet(new ulong[]{0x1400000002UL});
		public static readonly BitSet _call_expr_in_mul_expr1522 = new BitSet(new ulong[]{0xA00000002UL});
		public static readonly BitSet _set_in_mul_expr1525 = new BitSet(new ulong[]{0xA000100600080UL});
		public static readonly BitSet _call_expr_in_mul_expr1534 = new BitSet(new ulong[]{0xA00000002UL});
		public static readonly BitSet _LIDENT_in_call_expr1547 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_call_expr1549 = new BitSet(new ulong[]{0x1A000100600080UL,0x8UL});
		public static readonly BitSet _args_list_in_call_expr1551 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_call_expr1554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_expr_in_call_expr1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_access_expr1581 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _Expr_Access_in_access_expr1584 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _LIDENT_in_access_expr1587 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _LIDENT_in_atom_expr1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom_expr1605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_atom_expr1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NORMAL_STRING_in_atom_expr1615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UIDENT_in_atom_expr1620 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _51_in_atom_expr1622 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _args_list_in_atom_expr1624 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_atom_expr1626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_atom_expr1641 = new BitSet(new ulong[]{0xA000100600080UL,0x8UL});
		public static readonly BitSet _expr_in_atom_expr1643 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _52_in_atom_expr1645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_var_in_synpred1_Stone896 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _53_in_synpred1_Stone899 = new BitSet(new ulong[]{0x8000000400000UL});
		public static readonly BitSet _match_var_in_synpred1_Stone901 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _type_cross_in_synpred2_Stone988 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _54_in_synpred2_Stone990 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_cross_in_synpred2_Stone992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_atom_in_synpred3_Stone1034 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _66_in_synpred3_Stone1037 = new BitSet(new ulong[]{0xA000000000000UL});
		public static readonly BitSet _type_atom_in_synpred3_Stone1039 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _add_expr_in_synpred4_Stone1412 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _message_item_in_synpred4_Stone1414 = new BitSet(new ulong[]{0x400002UL});
	}
	#endregion Follow sets
}

} // namespace  Stone.Compiler 
