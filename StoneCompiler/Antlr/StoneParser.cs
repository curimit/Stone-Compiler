//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 Stone.g 2013-02-26 17:17:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Stone.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class StoneParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Class_Def", "Class_Def_Body", "DEDENT", "DOUBLE", "Data_Body", "Data_Def", "Data_Def_Item", "EXPONENT", "Expr_Access", "Expr_Array", "Expr_Call", "Expr_Lambda", "Expr_Message", "Expr_New_Data", "Func_Args", "Func_Declare", "Func_Def", "IDENT", "INDENT", "INT", "Lambda_Args", "Match_Cross", "Match_Var", "Message_Args", "Message_Declare", "Message_Def", "Message_Item", "Module_Def", "NEWLINE", "NORMAL_STRING", "OP_DIV", "OP_EQU", "OP_GEQ", "OP_GTR", "OP_LEQ", "OP_LSS", "OP_MINUS", "OP_MUL", "OP_NEQ", "OP_PLUS", "Proxy_Def", "Proxy_Def_Body", "Root", "Stmt_Alloc", "Stmt_Assign", "Stmt_Block", "Stmt_Call", "Stmt_For", "Stmt_If", "Stmt_Return", "Stmt_While", "Type_Atom", "Type_Cross", "Type_Func", "WS", "'('", "')'", "','", "'->'", "':'", "'::'", "'='", "'=>'", "'['", "'\\\\'", "']'", "'class'", "'data'", "'for'", "'if'", "'in'", "'module'", "'new'", "'proxy'", "'return'", "'while'", "'|'"
	};
	public const int EOF=-1;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int Class_Def=4;
	public const int Class_Def_Body=5;
	public const int DEDENT=6;
	public const int DOUBLE=7;
	public const int Data_Body=8;
	public const int Data_Def=9;
	public const int Data_Def_Item=10;
	public const int EXPONENT=11;
	public const int Expr_Access=12;
	public const int Expr_Array=13;
	public const int Expr_Call=14;
	public const int Expr_Lambda=15;
	public const int Expr_Message=16;
	public const int Expr_New_Data=17;
	public const int Func_Args=18;
	public const int Func_Declare=19;
	public const int Func_Def=20;
	public const int IDENT=21;
	public const int INDENT=22;
	public const int INT=23;
	public const int Lambda_Args=24;
	public const int Match_Cross=25;
	public const int Match_Var=26;
	public const int Message_Args=27;
	public const int Message_Declare=28;
	public const int Message_Def=29;
	public const int Message_Item=30;
	public const int Module_Def=31;
	public const int NEWLINE=32;
	public const int NORMAL_STRING=33;
	public const int OP_DIV=34;
	public const int OP_EQU=35;
	public const int OP_GEQ=36;
	public const int OP_GTR=37;
	public const int OP_LEQ=38;
	public const int OP_LSS=39;
	public const int OP_MINUS=40;
	public const int OP_MUL=41;
	public const int OP_NEQ=42;
	public const int OP_PLUS=43;
	public const int Proxy_Def=44;
	public const int Proxy_Def_Body=45;
	public const int Root=46;
	public const int Stmt_Alloc=47;
	public const int Stmt_Assign=48;
	public const int Stmt_Block=49;
	public const int Stmt_Call=50;
	public const int Stmt_For=51;
	public const int Stmt_If=52;
	public const int Stmt_Return=53;
	public const int Stmt_While=54;
	public const int Type_Atom=55;
	public const int Type_Cross=56;
	public const int Type_Func=57;
	public const int WS=58;

	public StoneParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public StoneParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[51+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return StoneParser.tokenNames; } }
	public override string GrammarFileName { get { return "Stone.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();

	// $ANTLR start "parse"
	// Stone.g:109:8: public parse : ( module_def )+ ( NEWLINE )* EOF -> ^( Root ( module_def )+ ) ;
	[GrammarRule("parse")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE2 = default(CommonToken);
		CommonToken EOF3 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_def1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_module_def=new RewriteRuleSubtreeStream(adaptor,"rule module_def");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(109, 1);
		try
		{
			// Stone.g:110:2: ( ( module_def )+ ( NEWLINE )* EOF -> ^( Root ( module_def )+ ) )
			DebugEnterAlt(1);
			// Stone.g:110:4: ( module_def )+ ( NEWLINE )* EOF
			{
			DebugLocation(110, 4);
			// Stone.g:110:4: ( module_def )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				try
				{
					alt1 = dfa1.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:110:4: module_def
					{
					DebugLocation(110, 4);
					PushFollow(Follow._module_def_in_parse360);
					module_def1=module_def();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_module_def.Add(module_def1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(110, 16);
			// Stone.g:110:16: ( NEWLINE )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==NEWLINE))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:110:16: NEWLINE
					{
					DebugLocation(110, 16);
					NEWLINE2=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_parse363); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE2);


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(110, 25);
			EOF3=(CommonToken)Match(input,EOF,Follow._EOF_in_parse366); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: module_def
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 110:29: -> ^( Root ( module_def )+ )
			{
				DebugLocation(110, 32);
				// Stone.g:110:32: ^( Root ( module_def )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(110, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(110, 39);
				if (!(stream_module_def.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_module_def.HasNext )
				{
					DebugLocation(110, 39);
					adaptor.AddChild(root_1, stream_module_def.NextTree());

				}
				stream_module_def.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	partial void EnterRule_module_def();
	partial void LeaveRule_module_def();

	// $ANTLR start "module_def"
	// Stone.g:113:1: module_def : ( NEWLINE )* 'module' IDENT NEWLINE ( INDENT module_inner ( NEWLINE )* DEDENT ) -> ^( Module_Def IDENT module_inner ) ;
	[GrammarRule("module_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> module_def()
	{
		EnterRule_module_def();
		EnterRule("module_def", 2);
		TraceIn("module_def", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE4 = default(CommonToken);
		CommonToken string_literal5 = default(CommonToken);
		CommonToken IDENT6 = default(CommonToken);
		CommonToken NEWLINE7 = default(CommonToken);
		CommonToken INDENT8 = default(CommonToken);
		CommonToken NEWLINE10 = default(CommonToken);
		CommonToken DEDENT11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_inner9 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		CommonTree string_literal5_tree = default(CommonTree);
		CommonTree IDENT6_tree = default(CommonTree);
		CommonTree NEWLINE7_tree = default(CommonTree);
		CommonTree INDENT8_tree = default(CommonTree);
		CommonTree NEWLINE10_tree = default(CommonTree);
		CommonTree DEDENT11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_module_inner=new RewriteRuleSubtreeStream(adaptor,"rule module_inner");
		try { DebugEnterRule(GrammarFileName, "module_def");
		DebugLocation(113, 1);
		try
		{
			// Stone.g:114:2: ( ( NEWLINE )* 'module' IDENT NEWLINE ( INDENT module_inner ( NEWLINE )* DEDENT ) -> ^( Module_Def IDENT module_inner ) )
			DebugEnterAlt(1);
			// Stone.g:114:4: ( NEWLINE )* 'module' IDENT NEWLINE ( INDENT module_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(114, 4);
			// Stone.g:114:4: ( NEWLINE )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==NEWLINE))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:114:4: NEWLINE
					{
					DebugLocation(114, 4);
					NEWLINE4=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_def386); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE4);


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(114, 13);
			string_literal5=(CommonToken)Match(input,75,Follow._75_in_module_def389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_75.Add(string_literal5);

			DebugLocation(114, 22);
			IDENT6=(CommonToken)Match(input,IDENT,Follow._IDENT_in_module_def391); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT6);

			DebugLocation(114, 28);
			NEWLINE7=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_def393); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE7);

			DebugLocation(114, 36);
			// Stone.g:114:36: ( INDENT module_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:114:37: INDENT module_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(114, 37);
			INDENT8=(CommonToken)Match(input,INDENT,Follow._INDENT_in_module_def396); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT8);

			DebugLocation(114, 44);
			PushFollow(Follow._module_inner_in_module_def398);
			module_inner9=module_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_module_inner.Add(module_inner9.Tree);
			DebugLocation(114, 57);
			// Stone.g:114:57: ( NEWLINE )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==NEWLINE))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:114:57: NEWLINE
					{
					DebugLocation(114, 57);
					NEWLINE10=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_def400); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE10);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(114, 66);
			DEDENT11=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_module_def403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT11);


			}



			{
			// AST REWRITE
			// elements: module_inner, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 114:74: -> ^( Module_Def IDENT module_inner )
			{
				DebugLocation(114, 77);
				// Stone.g:114:77: ^( Module_Def IDENT module_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(114, 79);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Module_Def, "Module_Def"), root_1);

				DebugLocation(114, 90);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(114, 96);
				adaptor.AddChild(root_1, stream_module_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_def", 2);
			LeaveRule("module_def", 2);
			LeaveRule_module_def();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "module_def"); }
		return retval;

	}
	// $ANTLR end "module_def"

	partial void EnterRule_module_inner();
	partial void LeaveRule_module_inner();

	// $ANTLR start "module_inner"
	// Stone.g:117:1: module_inner : ( ( block )+ -> ( block )+ | INDENT module_inner ( NEWLINE )* DEDENT -> module_inner );
	[GrammarRule("module_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> module_inner()
	{
		EnterRule_module_inner();
		EnterRule("module_inner", 3);
		TraceIn("module_inner", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT13 = default(CommonToken);
		CommonToken NEWLINE15 = default(CommonToken);
		CommonToken DEDENT16 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_inner14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT13_tree = default(CommonTree);
		CommonTree NEWLINE15_tree = default(CommonTree);
		CommonTree DEDENT16_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_module_inner=new RewriteRuleSubtreeStream(adaptor,"rule module_inner");
		try { DebugEnterRule(GrammarFileName, "module_inner");
		DebugLocation(117, 1);
		try
		{
			// Stone.g:118:2: ( ( block )+ -> ( block )+ | INDENT module_inner ( NEWLINE )* DEDENT -> module_inner )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==IDENT||LA7_0==NEWLINE||(LA7_0>=70 && LA7_0<=71)||LA7_0==75||LA7_0==77))
			{
				alt7 = 1;
			}
			else if ((LA7_0==INDENT))
			{
				alt7 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:118:4: ( block )+
				{
				DebugLocation(118, 4);
				// Stone.g:118:4: ( block )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					try
					{
						alt5 = dfa5.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:118:4: block
						{
						DebugLocation(118, 4);
						PushFollow(Follow._block_in_module_inner425);
						block12=block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_block.Add(block12.Tree);

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }



				{
				// AST REWRITE
				// elements: block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 118:11: -> ( block )+
				{
					DebugLocation(118, 14);
					if (!(stream_block.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_block.HasNext )
					{
						DebugLocation(118, 14);
						adaptor.AddChild(root_0, stream_block.NextTree());

					}
					stream_block.Reset();

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:119:4: INDENT module_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(119, 4);
				INDENT13=(CommonToken)Match(input,INDENT,Follow._INDENT_in_module_inner436); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT13);

				DebugLocation(119, 11);
				PushFollow(Follow._module_inner_in_module_inner438);
				module_inner14=module_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_module_inner.Add(module_inner14.Tree);
				DebugLocation(119, 24);
				// Stone.g:119:24: ( NEWLINE )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==NEWLINE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:119:24: NEWLINE
						{
						DebugLocation(119, 24);
						NEWLINE15=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_module_inner440); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE15);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(119, 33);
				DEDENT16=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_module_inner443); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT16);



				{
				// AST REWRITE
				// elements: module_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 119:40: -> module_inner
				{
					DebugLocation(119, 43);
					adaptor.AddChild(root_0, stream_module_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("module_inner", 3);
			LeaveRule("module_inner", 3);
			LeaveRule_module_inner();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "module_inner"); }
		return retval;

	}
	// $ANTLR end "module_inner"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// Stone.g:122:1: block : ( data_def | class_def | proxy_def | func_def | module_def );
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 4);
		TraceIn("block", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> data_def17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> class_def18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> func_def20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> module_def21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(122, 1);
		try
		{
			// Stone.g:123:2: ( data_def | class_def | proxy_def | func_def | module_def )
			int alt8=5;
			try { DebugEnterDecision(8, false);
			try
			{
				alt8 = dfa8.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:123:4: data_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._data_def_in_block458);
				data_def17=data_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, data_def17.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:124:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._class_def_in_block463);
				class_def18=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def18.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:125:4: proxy_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._proxy_def_in_block468);
				proxy_def19=proxy_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, proxy_def19.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Stone.g:126:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._func_def_in_block473);
				func_def20=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def20.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Stone.g:127:4: module_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._module_def_in_block478);
				module_def21=module_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, module_def21.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 4);
			LeaveRule("block", 4);
			LeaveRule_block();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_data_def();
	partial void LeaveRule_data_def();

	// $ANTLR start "data_def"
	// Stone.g:131:1: data_def : ( NEWLINE )* 'data' IDENT NEWLINE ( INDENT data_def_inner ( NEWLINE )* DEDENT ) -> ^( Data_Def IDENT data_def_inner ) ;
	[GrammarRule("data_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> data_def()
	{
		EnterRule_data_def();
		EnterRule("data_def", 5);
		TraceIn("data_def", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE22 = default(CommonToken);
		CommonToken string_literal23 = default(CommonToken);
		CommonToken IDENT24 = default(CommonToken);
		CommonToken NEWLINE25 = default(CommonToken);
		CommonToken INDENT26 = default(CommonToken);
		CommonToken NEWLINE28 = default(CommonToken);
		CommonToken DEDENT29 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> data_def_inner27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree IDENT24_tree = default(CommonTree);
		CommonTree NEWLINE25_tree = default(CommonTree);
		CommonTree INDENT26_tree = default(CommonTree);
		CommonTree NEWLINE28_tree = default(CommonTree);
		CommonTree DEDENT29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_data_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule data_def_inner");
		try { DebugEnterRule(GrammarFileName, "data_def");
		DebugLocation(131, 1);
		try
		{
			// Stone.g:132:2: ( ( NEWLINE )* 'data' IDENT NEWLINE ( INDENT data_def_inner ( NEWLINE )* DEDENT ) -> ^( Data_Def IDENT data_def_inner ) )
			DebugEnterAlt(1);
			// Stone.g:132:4: ( NEWLINE )* 'data' IDENT NEWLINE ( INDENT data_def_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(132, 4);
			// Stone.g:132:4: ( NEWLINE )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==NEWLINE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:132:4: NEWLINE
					{
					DebugLocation(132, 4);
					NEWLINE22=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE22);


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(132, 13);
			string_literal23=(CommonToken)Match(input,71,Follow._71_in_data_def493); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_71.Add(string_literal23);

			DebugLocation(132, 20);
			IDENT24=(CommonToken)Match(input,IDENT,Follow._IDENT_in_data_def495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT24);

			DebugLocation(132, 26);
			NEWLINE25=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def497); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE25);

			DebugLocation(132, 34);
			// Stone.g:132:34: ( INDENT data_def_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:132:35: INDENT data_def_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(132, 35);
			INDENT26=(CommonToken)Match(input,INDENT,Follow._INDENT_in_data_def500); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT26);

			DebugLocation(132, 42);
			PushFollow(Follow._data_def_inner_in_data_def502);
			data_def_inner27=data_def_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_data_def_inner.Add(data_def_inner27.Tree);
			DebugLocation(132, 57);
			// Stone.g:132:57: ( NEWLINE )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==NEWLINE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:132:57: NEWLINE
					{
					DebugLocation(132, 57);
					NEWLINE28=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def504); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE28);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(132, 66);
			DEDENT29=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_data_def507); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT29);


			}



			{
			// AST REWRITE
			// elements: IDENT, data_def_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 132:74: -> ^( Data_Def IDENT data_def_inner )
			{
				DebugLocation(132, 77);
				// Stone.g:132:77: ^( Data_Def IDENT data_def_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(132, 79);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Data_Def, "Data_Def"), root_1);

				DebugLocation(132, 88);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(132, 94);
				adaptor.AddChild(root_1, stream_data_def_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_def", 5);
			LeaveRule("data_def", 5);
			LeaveRule_data_def();
		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "data_def"); }
		return retval;

	}
	// $ANTLR end "data_def"

	partial void EnterRule_data_def_inner();
	partial void LeaveRule_data_def_inner();

	// $ANTLR start "data_def_inner"
	// Stone.g:135:1: data_def_inner : ( ( data_def_item )+ -> ^( Data_Body ( data_def_item )+ ) | INDENT data_def_inner ( NEWLINE )* DEDENT -> data_def_inner );
	[GrammarRule("data_def_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> data_def_inner()
	{
		EnterRule_data_def_inner();
		EnterRule("data_def_inner", 6);
		TraceIn("data_def_inner", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT31 = default(CommonToken);
		CommonToken NEWLINE33 = default(CommonToken);
		CommonToken DEDENT34 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> data_def_item30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> data_def_inner32 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT31_tree = default(CommonTree);
		CommonTree NEWLINE33_tree = default(CommonTree);
		CommonTree DEDENT34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_data_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule data_def_inner");
		RewriteRuleSubtreeStream stream_data_def_item=new RewriteRuleSubtreeStream(adaptor,"rule data_def_item");
		try { DebugEnterRule(GrammarFileName, "data_def_inner");
		DebugLocation(135, 1);
		try
		{
			// Stone.g:136:2: ( ( data_def_item )+ -> ^( Data_Body ( data_def_item )+ ) | INDENT data_def_inner ( NEWLINE )* DEDENT -> data_def_inner )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==IDENT||LA13_0==NEWLINE))
			{
				alt13 = 1;
			}
			else if ((LA13_0==INDENT))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:136:4: ( data_def_item )+
				{
				DebugLocation(136, 4);
				// Stone.g:136:4: ( data_def_item )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					try
					{
						alt11 = dfa11.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:136:4: data_def_item
						{
						DebugLocation(136, 4);
						PushFollow(Follow._data_def_item_in_data_def_inner529);
						data_def_item30=data_def_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_data_def_item.Add(data_def_item30.Tree);

						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: data_def_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 136:19: -> ^( Data_Body ( data_def_item )+ )
				{
					DebugLocation(136, 22);
					// Stone.g:136:22: ^( Data_Body ( data_def_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(136, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Data_Body, "Data_Body"), root_1);

					DebugLocation(136, 34);
					if (!(stream_data_def_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_data_def_item.HasNext )
					{
						DebugLocation(136, 34);
						adaptor.AddChild(root_1, stream_data_def_item.NextTree());

					}
					stream_data_def_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:137:4: INDENT data_def_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(137, 4);
				INDENT31=(CommonToken)Match(input,INDENT,Follow._INDENT_in_data_def_inner544); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT31);

				DebugLocation(137, 11);
				PushFollow(Follow._data_def_inner_in_data_def_inner546);
				data_def_inner32=data_def_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_data_def_inner.Add(data_def_inner32.Tree);
				DebugLocation(137, 26);
				// Stone.g:137:26: ( NEWLINE )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==NEWLINE))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:137:26: NEWLINE
						{
						DebugLocation(137, 26);
						NEWLINE33=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def_inner548); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE33);


						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(137, 35);
				DEDENT34=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_data_def_inner551); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT34);



				{
				// AST REWRITE
				// elements: data_def_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 137:42: -> data_def_inner
				{
					DebugLocation(137, 45);
					adaptor.AddChild(root_0, stream_data_def_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_def_inner", 6);
			LeaveRule("data_def_inner", 6);
			LeaveRule_data_def_inner();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "data_def_inner"); }
		return retval;

	}
	// $ANTLR end "data_def_inner"

	partial void EnterRule_data_def_item();
	partial void LeaveRule_data_def_item();

	// $ANTLR start "data_def_item"
	// Stone.g:140:1: data_def_item : ( NEWLINE )* IDENT '::' type -> ^( Data_Def_Item IDENT type ) ;
	[GrammarRule("data_def_item")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> data_def_item()
	{
		EnterRule_data_def_item();
		EnterRule("data_def_item", 7);
		TraceIn("data_def_item", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE35 = default(CommonToken);
		CommonToken IDENT36 = default(CommonToken);
		CommonToken string_literal37 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE35_tree = default(CommonTree);
		CommonTree IDENT36_tree = default(CommonTree);
		CommonTree string_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "data_def_item");
		DebugLocation(140, 1);
		try
		{
			// Stone.g:141:2: ( ( NEWLINE )* IDENT '::' type -> ^( Data_Def_Item IDENT type ) )
			DebugEnterAlt(1);
			// Stone.g:141:4: ( NEWLINE )* IDENT '::' type
			{
			DebugLocation(141, 4);
			// Stone.g:141:4: ( NEWLINE )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==NEWLINE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:141:4: NEWLINE
					{
					DebugLocation(141, 4);
					NEWLINE35=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_data_def_item566); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE35);


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(141, 13);
			IDENT36=(CommonToken)Match(input,IDENT,Follow._IDENT_in_data_def_item569); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT36);

			DebugLocation(141, 19);
			string_literal37=(CommonToken)Match(input,64,Follow._64_in_data_def_item571); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(string_literal37);

			DebugLocation(141, 24);
			PushFollow(Follow._type_in_data_def_item573);
			type38=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type38.Tree);


			{
			// AST REWRITE
			// elements: IDENT, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 141:29: -> ^( Data_Def_Item IDENT type )
			{
				DebugLocation(141, 32);
				// Stone.g:141:32: ^( Data_Def_Item IDENT type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(141, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Data_Def_Item, "Data_Def_Item"), root_1);

				DebugLocation(141, 48);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(141, 54);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("data_def_item", 7);
			LeaveRule("data_def_item", 7);
			LeaveRule_data_def_item();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "data_def_item"); }
		return retval;

	}
	// $ANTLR end "data_def_item"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// Stone.g:145:1: class_def : ( NEWLINE )* 'class' IDENT NEWLINE ( INDENT class_def_inner ( NEWLINE )* DEDENT ) -> ^( Class_Def IDENT class_def_inner ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 8);
		TraceIn("class_def", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE39 = default(CommonToken);
		CommonToken string_literal40 = default(CommonToken);
		CommonToken IDENT41 = default(CommonToken);
		CommonToken NEWLINE42 = default(CommonToken);
		CommonToken INDENT43 = default(CommonToken);
		CommonToken NEWLINE45 = default(CommonToken);
		CommonToken DEDENT46 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> class_def_inner44 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree IDENT41_tree = default(CommonTree);
		CommonTree NEWLINE42_tree = default(CommonTree);
		CommonTree INDENT43_tree = default(CommonTree);
		CommonTree NEWLINE45_tree = default(CommonTree);
		CommonTree DEDENT46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule class_def_inner");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(145, 1);
		try
		{
			// Stone.g:146:2: ( ( NEWLINE )* 'class' IDENT NEWLINE ( INDENT class_def_inner ( NEWLINE )* DEDENT ) -> ^( Class_Def IDENT class_def_inner ) )
			DebugEnterAlt(1);
			// Stone.g:146:4: ( NEWLINE )* 'class' IDENT NEWLINE ( INDENT class_def_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(146, 4);
			// Stone.g:146:4: ( NEWLINE )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==NEWLINE))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:146:4: NEWLINE
					{
					DebugLocation(146, 4);
					NEWLINE39=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def595); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE39);


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(146, 13);
			string_literal40=(CommonToken)Match(input,70,Follow._70_in_class_def598); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_70.Add(string_literal40);

			DebugLocation(146, 21);
			IDENT41=(CommonToken)Match(input,IDENT,Follow._IDENT_in_class_def600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT41);

			DebugLocation(146, 27);
			NEWLINE42=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def602); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE42);

			DebugLocation(146, 35);
			// Stone.g:146:35: ( INDENT class_def_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:146:36: INDENT class_def_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(146, 36);
			INDENT43=(CommonToken)Match(input,INDENT,Follow._INDENT_in_class_def605); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT43);

			DebugLocation(146, 43);
			PushFollow(Follow._class_def_inner_in_class_def607);
			class_def_inner44=class_def_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_class_def_inner.Add(class_def_inner44.Tree);
			DebugLocation(146, 59);
			// Stone.g:146:59: ( NEWLINE )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==NEWLINE))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:146:59: NEWLINE
					{
					DebugLocation(146, 59);
					NEWLINE45=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def609); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE45);


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(146, 68);
			DEDENT46=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_class_def612); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT46);


			}



			{
			// AST REWRITE
			// elements: IDENT, class_def_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 146:76: -> ^( Class_Def IDENT class_def_inner )
			{
				DebugLocation(146, 79);
				// Stone.g:146:79: ^( Class_Def IDENT class_def_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(146, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class_Def, "Class_Def"), root_1);

				DebugLocation(146, 91);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(146, 97);
				adaptor.AddChild(root_1, stream_class_def_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 8);
			LeaveRule("class_def", 8);
			LeaveRule_class_def();
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_def_inner();
	partial void LeaveRule_class_def_inner();

	// $ANTLR start "class_def_inner"
	// Stone.g:149:1: class_def_inner : ( ( message_declare )+ -> ^( Class_Def_Body ( message_declare )+ ) | INDENT class_def_inner ( NEWLINE )* DEDENT -> class_def_inner );
	[GrammarRule("class_def_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> class_def_inner()
	{
		EnterRule_class_def_inner();
		EnterRule("class_def_inner", 9);
		TraceIn("class_def_inner", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT48 = default(CommonToken);
		CommonToken NEWLINE50 = default(CommonToken);
		CommonToken DEDENT51 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_declare47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> class_def_inner49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT48_tree = default(CommonTree);
		CommonTree NEWLINE50_tree = default(CommonTree);
		CommonTree DEDENT51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule class_def_inner");
		RewriteRuleSubtreeStream stream_message_declare=new RewriteRuleSubtreeStream(adaptor,"rule message_declare");
		try { DebugEnterRule(GrammarFileName, "class_def_inner");
		DebugLocation(149, 1);
		try
		{
			// Stone.g:150:2: ( ( message_declare )+ -> ^( Class_Def_Body ( message_declare )+ ) | INDENT class_def_inner ( NEWLINE )* DEDENT -> class_def_inner )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENT||LA19_0==NEWLINE))
			{
				alt19 = 1;
			}
			else if ((LA19_0==INDENT))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:150:4: ( message_declare )+
				{
				DebugLocation(150, 4);
				// Stone.g:150:4: ( message_declare )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					try
					{
						alt17 = dfa17.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:150:4: message_declare
						{
						DebugLocation(150, 4);
						PushFollow(Follow._message_declare_in_class_def_inner634);
						message_declare47=message_declare();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_message_declare.Add(message_declare47.Tree);

						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }



				{
				// AST REWRITE
				// elements: message_declare
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:21: -> ^( Class_Def_Body ( message_declare )+ )
				{
					DebugLocation(150, 24);
					// Stone.g:150:24: ^( Class_Def_Body ( message_declare )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(150, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class_Def_Body, "Class_Def_Body"), root_1);

					DebugLocation(150, 41);
					if (!(stream_message_declare.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_message_declare.HasNext )
					{
						DebugLocation(150, 41);
						adaptor.AddChild(root_1, stream_message_declare.NextTree());

					}
					stream_message_declare.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:151:4: INDENT class_def_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(151, 4);
				INDENT48=(CommonToken)Match(input,INDENT,Follow._INDENT_in_class_def_inner649); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT48);

				DebugLocation(151, 11);
				PushFollow(Follow._class_def_inner_in_class_def_inner651);
				class_def_inner49=class_def_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_class_def_inner.Add(class_def_inner49.Tree);
				DebugLocation(151, 27);
				// Stone.g:151:27: ( NEWLINE )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==NEWLINE))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:151:27: NEWLINE
						{
						DebugLocation(151, 27);
						NEWLINE50=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def_inner653); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE50);


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(151, 36);
				DEDENT51=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_class_def_inner656); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT51);



				{
				// AST REWRITE
				// elements: class_def_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:43: -> class_def_inner
				{
					DebugLocation(151, 46);
					adaptor.AddChild(root_0, stream_class_def_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def_inner", 9);
			LeaveRule("class_def_inner", 9);
			LeaveRule_class_def_inner();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def_inner"); }
		return retval;

	}
	// $ANTLR end "class_def_inner"

	partial void EnterRule_proxy_def();
	partial void LeaveRule_proxy_def();

	// $ANTLR start "proxy_def"
	// Stone.g:155:1: proxy_def : ( NEWLINE )* 'proxy' IDENT ':' IDENT NEWLINE ( INDENT proxy_def_inner ( NEWLINE )* DEDENT ) -> ^( Proxy_Def IDENT IDENT proxy_def_inner ) ;
	[GrammarRule("proxy_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def()
	{
		EnterRule_proxy_def();
		EnterRule("proxy_def", 10);
		TraceIn("proxy_def", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE52 = default(CommonToken);
		CommonToken string_literal53 = default(CommonToken);
		CommonToken IDENT54 = default(CommonToken);
		CommonToken char_literal55 = default(CommonToken);
		CommonToken IDENT56 = default(CommonToken);
		CommonToken NEWLINE57 = default(CommonToken);
		CommonToken INDENT58 = default(CommonToken);
		CommonToken NEWLINE60 = default(CommonToken);
		CommonToken DEDENT61 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def_inner59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE52_tree = default(CommonTree);
		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree IDENT54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree IDENT56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree INDENT58_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree DEDENT61_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_proxy_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule proxy_def_inner");
		try { DebugEnterRule(GrammarFileName, "proxy_def");
		DebugLocation(155, 1);
		try
		{
			// Stone.g:156:2: ( ( NEWLINE )* 'proxy' IDENT ':' IDENT NEWLINE ( INDENT proxy_def_inner ( NEWLINE )* DEDENT ) -> ^( Proxy_Def IDENT IDENT proxy_def_inner ) )
			DebugEnterAlt(1);
			// Stone.g:156:4: ( NEWLINE )* 'proxy' IDENT ':' IDENT NEWLINE ( INDENT proxy_def_inner ( NEWLINE )* DEDENT )
			{
			DebugLocation(156, 4);
			// Stone.g:156:4: ( NEWLINE )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==NEWLINE))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:156:4: NEWLINE
					{
					DebugLocation(156, 4);
					NEWLINE52=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def672); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(156, 13);
			string_literal53=(CommonToken)Match(input,77,Follow._77_in_proxy_def675); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_77.Add(string_literal53);

			DebugLocation(156, 21);
			IDENT54=(CommonToken)Match(input,IDENT,Follow._IDENT_in_proxy_def677); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT54);

			DebugLocation(156, 27);
			char_literal55=(CommonToken)Match(input,63,Follow._63_in_proxy_def679); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal55);

			DebugLocation(156, 31);
			IDENT56=(CommonToken)Match(input,IDENT,Follow._IDENT_in_proxy_def681); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT56);

			DebugLocation(156, 37);
			NEWLINE57=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def683); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE57);

			DebugLocation(156, 45);
			// Stone.g:156:45: ( INDENT proxy_def_inner ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:156:46: INDENT proxy_def_inner ( NEWLINE )* DEDENT
			{
			DebugLocation(156, 46);
			INDENT58=(CommonToken)Match(input,INDENT,Follow._INDENT_in_proxy_def686); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT58);

			DebugLocation(156, 53);
			PushFollow(Follow._proxy_def_inner_in_proxy_def688);
			proxy_def_inner59=proxy_def_inner();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxy_def_inner.Add(proxy_def_inner59.Tree);
			DebugLocation(156, 69);
			// Stone.g:156:69: ( NEWLINE )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==NEWLINE))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:156:69: NEWLINE
					{
					DebugLocation(156, 69);
					NEWLINE60=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def690); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(156, 78);
			DEDENT61=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_proxy_def693); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT61);


			}



			{
			// AST REWRITE
			// elements: IDENT, IDENT, proxy_def_inner
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 156:86: -> ^( Proxy_Def IDENT IDENT proxy_def_inner )
			{
				DebugLocation(156, 89);
				// Stone.g:156:89: ^( Proxy_Def IDENT IDENT proxy_def_inner )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(156, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Proxy_Def, "Proxy_Def"), root_1);

				DebugLocation(156, 101);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(156, 107);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(156, 113);
				adaptor.AddChild(root_1, stream_proxy_def_inner.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxy_def", 10);
			LeaveRule("proxy_def", 10);
			LeaveRule_proxy_def();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "proxy_def"); }
		return retval;

	}
	// $ANTLR end "proxy_def"

	partial void EnterRule_proxy_def_inner();
	partial void LeaveRule_proxy_def_inner();

	// $ANTLR start "proxy_def_inner"
	// Stone.g:159:1: proxy_def_inner : ( ( message_def )+ -> ^( Proxy_Def_Body ( message_def )+ ) | INDENT proxy_def_inner ( NEWLINE )* DEDENT -> proxy_def_inner );
	[GrammarRule("proxy_def_inner")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def_inner()
	{
		EnterRule_proxy_def_inner();
		EnterRule("proxy_def_inner", 11);
		TraceIn("proxy_def_inner", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT63 = default(CommonToken);
		CommonToken NEWLINE65 = default(CommonToken);
		CommonToken DEDENT66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_def62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxy_def_inner64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT63_tree = default(CommonTree);
		CommonTree NEWLINE65_tree = default(CommonTree);
		CommonTree DEDENT66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_message_def=new RewriteRuleSubtreeStream(adaptor,"rule message_def");
		RewriteRuleSubtreeStream stream_proxy_def_inner=new RewriteRuleSubtreeStream(adaptor,"rule proxy_def_inner");
		try { DebugEnterRule(GrammarFileName, "proxy_def_inner");
		DebugLocation(159, 1);
		try
		{
			// Stone.g:160:2: ( ( message_def )+ -> ^( Proxy_Def_Body ( message_def )+ ) | INDENT proxy_def_inner ( NEWLINE )* DEDENT -> proxy_def_inner )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==IDENT||LA24_0==NEWLINE))
			{
				alt24 = 1;
			}
			else if ((LA24_0==INDENT))
			{
				alt24 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:160:4: ( message_def )+
				{
				DebugLocation(160, 4);
				// Stone.g:160:4: ( message_def )+
				int cnt22=0;
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					try
					{
						alt22 = dfa22.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:160:4: message_def
						{
						DebugLocation(160, 4);
						PushFollow(Follow._message_def_in_proxy_def_inner717);
						message_def62=message_def();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_message_def.Add(message_def62.Tree);

						}
						break;

					default:
						if (cnt22 >= 1)
							goto loop22;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee22 = new EarlyExitException( 22, input );
						DebugRecognitionException(eee22);
						throw eee22;
					}
					cnt22++;
				}
				loop22:
					;

				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: message_def
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 160:17: -> ^( Proxy_Def_Body ( message_def )+ )
				{
					DebugLocation(160, 20);
					// Stone.g:160:20: ^( Proxy_Def_Body ( message_def )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(160, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Proxy_Def_Body, "Proxy_Def_Body"), root_1);

					DebugLocation(160, 37);
					if (!(stream_message_def.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_message_def.HasNext )
					{
						DebugLocation(160, 37);
						adaptor.AddChild(root_1, stream_message_def.NextTree());

					}
					stream_message_def.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:161:4: INDENT proxy_def_inner ( NEWLINE )* DEDENT
				{
				DebugLocation(161, 4);
				INDENT63=(CommonToken)Match(input,INDENT,Follow._INDENT_in_proxy_def_inner732); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT63);

				DebugLocation(161, 11);
				PushFollow(Follow._proxy_def_inner_in_proxy_def_inner734);
				proxy_def_inner64=proxy_def_inner();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxy_def_inner.Add(proxy_def_inner64.Tree);
				DebugLocation(161, 27);
				// Stone.g:161:27: ( NEWLINE )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==NEWLINE))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:161:27: NEWLINE
						{
						DebugLocation(161, 27);
						NEWLINE65=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_proxy_def_inner736); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE65);


						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(161, 36);
				DEDENT66=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_proxy_def_inner739); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT66);



				{
				// AST REWRITE
				// elements: proxy_def_inner
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 161:43: -> proxy_def_inner
				{
					DebugLocation(161, 46);
					adaptor.AddChild(root_0, stream_proxy_def_inner.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxy_def_inner", 11);
			LeaveRule("proxy_def_inner", 11);
			LeaveRule_proxy_def_inner();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "proxy_def_inner"); }
		return retval;

	}
	// $ANTLR end "proxy_def_inner"

	partial void EnterRule_message_declare();
	partial void LeaveRule_message_declare();

	// $ANTLR start "message_declare"
	// Stone.g:165:1: message_declare : ( NEWLINE )* IDENT '::' type NEWLINE -> ^( Message_Declare IDENT type ) ;
	[GrammarRule("message_declare")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_declare()
	{
		EnterRule_message_declare();
		EnterRule("message_declare", 12);
		TraceIn("message_declare", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE67 = default(CommonToken);
		CommonToken IDENT68 = default(CommonToken);
		CommonToken string_literal69 = default(CommonToken);
		CommonToken NEWLINE71 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE67_tree = default(CommonTree);
		CommonTree IDENT68_tree = default(CommonTree);
		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree NEWLINE71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "message_declare");
		DebugLocation(165, 1);
		try
		{
			// Stone.g:166:2: ( ( NEWLINE )* IDENT '::' type NEWLINE -> ^( Message_Declare IDENT type ) )
			DebugEnterAlt(1);
			// Stone.g:166:4: ( NEWLINE )* IDENT '::' type NEWLINE
			{
			DebugLocation(166, 4);
			// Stone.g:166:4: ( NEWLINE )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:166:4: NEWLINE
					{
					DebugLocation(166, 4);
					NEWLINE67=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_declare755); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE67);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(166, 13);
			IDENT68=(CommonToken)Match(input,IDENT,Follow._IDENT_in_message_declare758); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT68);

			DebugLocation(166, 19);
			string_literal69=(CommonToken)Match(input,64,Follow._64_in_message_declare760); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(string_literal69);

			DebugLocation(166, 24);
			PushFollow(Follow._type_in_message_declare762);
			type70=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type70.Tree);
			DebugLocation(166, 29);
			NEWLINE71=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_declare764); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE71);



			{
			// AST REWRITE
			// elements: type, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 166:37: -> ^( Message_Declare IDENT type )
			{
				DebugLocation(166, 40);
				// Stone.g:166:40: ^( Message_Declare IDENT type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(166, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Declare, "Message_Declare"), root_1);

				DebugLocation(166, 58);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(166, 64);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_declare", 12);
			LeaveRule("message_declare", 12);
			LeaveRule_message_declare();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "message_declare"); }
		return retval;

	}
	// $ANTLR end "message_declare"

	partial void EnterRule_message_def();
	partial void LeaveRule_message_def();

	// $ANTLR start "message_def"
	// Stone.g:169:1: message_def : message_declare ( NEWLINE )* IDENT message_def_args NEWLINE stmt_block -> ^( Message_Def IDENT message_declare message_def_args stmt_block ) ;
	[GrammarRule("message_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_def()
	{
		EnterRule_message_def();
		EnterRule("message_def", 13);
		TraceIn("message_def", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE73 = default(CommonToken);
		CommonToken IDENT74 = default(CommonToken);
		CommonToken NEWLINE76 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_declare72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_def_args75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE73_tree = default(CommonTree);
		CommonTree IDENT74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_message_def_args=new RewriteRuleSubtreeStream(adaptor,"rule message_def_args");
		RewriteRuleSubtreeStream stream_message_declare=new RewriteRuleSubtreeStream(adaptor,"rule message_declare");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		try { DebugEnterRule(GrammarFileName, "message_def");
		DebugLocation(169, 1);
		try
		{
			// Stone.g:170:2: ( message_declare ( NEWLINE )* IDENT message_def_args NEWLINE stmt_block -> ^( Message_Def IDENT message_declare message_def_args stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:170:5: message_declare ( NEWLINE )* IDENT message_def_args NEWLINE stmt_block
			{
			DebugLocation(170, 5);
			PushFollow(Follow._message_declare_in_message_def786);
			message_declare72=message_declare();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_message_declare.Add(message_declare72.Tree);
			DebugLocation(170, 21);
			// Stone.g:170:21: ( NEWLINE )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==NEWLINE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:170:21: NEWLINE
					{
					DebugLocation(170, 21);
					NEWLINE73=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_def788); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE73);


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(170, 30);
			IDENT74=(CommonToken)Match(input,IDENT,Follow._IDENT_in_message_def791); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT74);

			DebugLocation(170, 36);
			PushFollow(Follow._message_def_args_in_message_def793);
			message_def_args75=message_def_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_message_def_args.Add(message_def_args75.Tree);
			DebugLocation(170, 53);
			NEWLINE76=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_message_def795); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);

			DebugLocation(170, 61);
			PushFollow(Follow._stmt_block_in_message_def797);
			stmt_block77=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block77.Tree);


			{
			// AST REWRITE
			// elements: message_def_args, stmt_block, message_declare, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 170:72: -> ^( Message_Def IDENT message_declare message_def_args stmt_block )
			{
				DebugLocation(170, 75);
				// Stone.g:170:75: ^( Message_Def IDENT message_declare message_def_args stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 77);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Def, "Message_Def"), root_1);

				DebugLocation(170, 89);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(170, 95);
				adaptor.AddChild(root_1, stream_message_declare.NextTree());
				DebugLocation(170, 111);
				adaptor.AddChild(root_1, stream_message_def_args.NextTree());
				DebugLocation(170, 128);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_def", 13);
			LeaveRule("message_def", 13);
			LeaveRule_message_def();
		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "message_def"); }
		return retval;

	}
	// $ANTLR end "message_def"

	partial void EnterRule_message_def_args();
	partial void LeaveRule_message_def_args();

	// $ANTLR start "message_def_args"
	// Stone.g:173:1: message_def_args : ( match )? -> ^( Message_Args ( match )? ) ;
	[GrammarRule("message_def_args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_def_args()
	{
		EnterRule_message_def_args();
		EnterRule("message_def_args", 14);
		TraceIn("message_def_args", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "message_def_args");
		DebugLocation(173, 1);
		try
		{
			// Stone.g:174:2: ( ( match )? -> ^( Message_Args ( match )? ) )
			DebugEnterAlt(1);
			// Stone.g:174:4: ( match )?
			{
			DebugLocation(174, 4);
			// Stone.g:174:4: ( match )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==IDENT||LA27_0==59))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:174:4: match
				{
				DebugLocation(174, 4);
				PushFollow(Follow._match_in_message_def_args822);
				match78=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: match
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:11: -> ^( Message_Args ( match )? )
			{
				DebugLocation(174, 14);
				// Stone.g:174:14: ^( Message_Args ( match )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Args, "Message_Args"), root_1);

				DebugLocation(174, 29);
				// Stone.g:174:29: ( match )?
				if (stream_match.HasNext)
				{
					DebugLocation(174, 29);
					adaptor.AddChild(root_1, stream_match.NextTree());

				}
				stream_match.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_def_args", 14);
			LeaveRule("message_def_args", 14);
			LeaveRule_message_def_args();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "message_def_args"); }
		return retval;

	}
	// $ANTLR end "message_def_args"

	partial void EnterRule_func_declare();
	partial void LeaveRule_func_declare();

	// $ANTLR start "func_declare"
	// Stone.g:178:1: func_declare : ( NEWLINE )* IDENT '::' type NEWLINE -> ^( Func_Declare IDENT type ) ;
	[GrammarRule("func_declare")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> func_declare()
	{
		EnterRule_func_declare();
		EnterRule("func_declare", 15);
		TraceIn("func_declare", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE79 = default(CommonToken);
		CommonToken IDENT80 = default(CommonToken);
		CommonToken string_literal81 = default(CommonToken);
		CommonToken NEWLINE83 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE79_tree = default(CommonTree);
		CommonTree IDENT80_tree = default(CommonTree);
		CommonTree string_literal81_tree = default(CommonTree);
		CommonTree NEWLINE83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "func_declare");
		DebugLocation(178, 1);
		try
		{
			// Stone.g:179:2: ( ( NEWLINE )* IDENT '::' type NEWLINE -> ^( Func_Declare IDENT type ) )
			DebugEnterAlt(1);
			// Stone.g:179:4: ( NEWLINE )* IDENT '::' type NEWLINE
			{
			DebugLocation(179, 4);
			// Stone.g:179:4: ( NEWLINE )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==NEWLINE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:179:4: NEWLINE
					{
					DebugLocation(179, 4);
					NEWLINE79=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_declare844); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE79);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(179, 13);
			IDENT80=(CommonToken)Match(input,IDENT,Follow._IDENT_in_func_declare847); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT80);

			DebugLocation(179, 19);
			string_literal81=(CommonToken)Match(input,64,Follow._64_in_func_declare849); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(string_literal81);

			DebugLocation(179, 24);
			PushFollow(Follow._type_in_func_declare851);
			type82=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type82.Tree);
			DebugLocation(179, 29);
			NEWLINE83=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_declare853); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE83);



			{
			// AST REWRITE
			// elements: IDENT, type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 179:37: -> ^( Func_Declare IDENT type )
			{
				DebugLocation(179, 40);
				// Stone.g:179:40: ^( Func_Declare IDENT type )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(179, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Declare, "Func_Declare"), root_1);

				DebugLocation(179, 55);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(179, 61);
				adaptor.AddChild(root_1, stream_type.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_declare", 15);
			LeaveRule("func_declare", 15);
			LeaveRule_func_declare();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "func_declare"); }
		return retval;

	}
	// $ANTLR end "func_declare"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// Stone.g:182:1: func_def : func_declare ( NEWLINE )* IDENT func_def_args NEWLINE stmt_block -> ^( Func_Def IDENT func_declare func_def_args stmt_block ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 16);
		TraceIn("func_def", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NEWLINE85 = default(CommonToken);
		CommonToken IDENT86 = default(CommonToken);
		CommonToken NEWLINE88 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> func_declare84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> func_def_args87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NEWLINE85_tree = default(CommonTree);
		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree NEWLINE88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_func_def_args=new RewriteRuleSubtreeStream(adaptor,"rule func_def_args");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_func_declare=new RewriteRuleSubtreeStream(adaptor,"rule func_declare");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(182, 1);
		try
		{
			// Stone.g:183:2: ( func_declare ( NEWLINE )* IDENT func_def_args NEWLINE stmt_block -> ^( Func_Def IDENT func_declare func_def_args stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:183:5: func_declare ( NEWLINE )* IDENT func_def_args NEWLINE stmt_block
			{
			DebugLocation(183, 5);
			PushFollow(Follow._func_declare_in_func_def875);
			func_declare84=func_declare();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_declare.Add(func_declare84.Tree);
			DebugLocation(183, 18);
			// Stone.g:183:18: ( NEWLINE )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:183:18: NEWLINE
					{
					DebugLocation(183, 18);
					NEWLINE85=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def877); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE85);


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(183, 27);
			IDENT86=(CommonToken)Match(input,IDENT,Follow._IDENT_in_func_def880); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT86);

			DebugLocation(183, 33);
			PushFollow(Follow._func_def_args_in_func_def882);
			func_def_args87=func_def_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_def_args.Add(func_def_args87.Tree);
			DebugLocation(183, 47);
			NEWLINE88=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def884); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE88);

			DebugLocation(183, 55);
			PushFollow(Follow._stmt_block_in_func_def886);
			stmt_block89=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block89.Tree);


			{
			// AST REWRITE
			// elements: func_def_args, stmt_block, func_declare, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 183:66: -> ^( Func_Def IDENT func_declare func_def_args stmt_block )
			{
				DebugLocation(183, 69);
				// Stone.g:183:69: ^( Func_Def IDENT func_declare func_def_args stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(183, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

				DebugLocation(183, 80);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(183, 86);
				adaptor.AddChild(root_1, stream_func_declare.NextTree());
				DebugLocation(183, 99);
				adaptor.AddChild(root_1, stream_func_def_args.NextTree());
				DebugLocation(183, 113);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 16);
			LeaveRule("func_def", 16);
			LeaveRule_func_def();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_func_def_args();
	partial void LeaveRule_func_def_args();

	// $ANTLR start "func_def_args"
	// Stone.g:186:1: func_def_args : ( match )? -> ^( Func_Args ( match )? ) ;
	[GrammarRule("func_def_args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> func_def_args()
	{
		EnterRule_func_def_args();
		EnterRule("func_def_args", 17);
		TraceIn("func_def_args", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "func_def_args");
		DebugLocation(186, 1);
		try
		{
			// Stone.g:187:2: ( ( match )? -> ^( Func_Args ( match )? ) )
			DebugEnterAlt(1);
			// Stone.g:187:4: ( match )?
			{
			DebugLocation(187, 4);
			// Stone.g:187:4: ( match )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==IDENT||LA30_0==59))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:187:4: match
				{
				DebugLocation(187, 4);
				PushFollow(Follow._match_in_func_def_args911);
				match90=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: match
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 187:11: -> ^( Func_Args ( match )? )
			{
				DebugLocation(187, 14);
				// Stone.g:187:14: ^( Func_Args ( match )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(187, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(187, 26);
				// Stone.g:187:26: ( match )?
				if (stream_match.HasNext)
				{
					DebugLocation(187, 26);
					adaptor.AddChild(root_1, stream_match.NextTree());

				}
				stream_match.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def_args", 17);
			LeaveRule("func_def_args", 17);
			LeaveRule_func_def_args();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def_args"); }
		return retval;

	}
	// $ANTLR end "func_def_args"

	partial void EnterRule_match();
	partial void LeaveRule_match();

	// $ANTLR start "match"
	// Stone.g:191:1: match : match_cross ;
	[GrammarRule("match")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> match()
	{
		EnterRule_match();
		EnterRule("match", 18);
		TraceIn("match", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match_cross91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "match");
		DebugLocation(191, 1);
		try
		{
			// Stone.g:192:2: ( match_cross )
			DebugEnterAlt(1);
			// Stone.g:192:4: match_cross
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(192, 4);
			PushFollow(Follow._match_cross_in_match933);
			match_cross91=match_cross();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, match_cross91.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match", 18);
			LeaveRule("match", 18);
			LeaveRule_match();
		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "match"); }
		return retval;

	}
	// $ANTLR end "match"

	partial void EnterRule_match_cross();
	partial void LeaveRule_match_cross();

	// $ANTLR start "match_cross"
	// Stone.g:195:1: match_cross options {backtrack=true; memoize=true; } : ( match_var ( ',' match_var )+ -> ^( Match_Cross ( match_var )+ ) | match_var );
	[GrammarRule("match_cross")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> match_cross()
	{
		EnterRule_match_cross();
		EnterRule("match_cross", 19);
		TraceIn("match_cross", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int match_cross_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal93 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> match_var92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> match_var94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> match_var95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_match_var=new RewriteRuleSubtreeStream(adaptor,"rule match_var");
		try { DebugEnterRule(GrammarFileName, "match_cross");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Stone.g:200:2: ( match_var ( ',' match_var )+ -> ^( Match_Cross ( match_var )+ ) | match_var )
			int alt32=2;
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				int LA32_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_Stone_fragment)))
				{
					alt32 = 1;
				}
				else if ((true))
				{
					alt32 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA32_0==59))
			{
				int LA32_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_Stone_fragment)))
				{
					alt32 = 1;
				}
				else if ((true))
				{
					alt32 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:200:4: match_var ( ',' match_var )+
				{
				DebugLocation(200, 4);
				PushFollow(Follow._match_var_in_match_cross960);
				match_var92=match_var();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match_var.Add(match_var92.Tree);
				DebugLocation(200, 14);
				// Stone.g:200:14: ( ',' match_var )+
				int cnt31=0;
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==61))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:200:15: ',' match_var
						{
						DebugLocation(200, 15);
						char_literal93=(CommonToken)Match(input,61,Follow._61_in_match_cross963); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_61.Add(char_literal93);

						DebugLocation(200, 19);
						PushFollow(Follow._match_var_in_match_cross965);
						match_var94=match_var();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_match_var.Add(match_var94.Tree);

						}
						break;

					default:
						if (cnt31 >= 1)
							goto loop31;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee31 = new EarlyExitException( 31, input );
						DebugRecognitionException(eee31);
						throw eee31;
					}
					cnt31++;
				}
				loop31:
					;

				} finally { DebugExitSubRule(31); }



				{
				// AST REWRITE
				// elements: match_var
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 200:31: -> ^( Match_Cross ( match_var )+ )
				{
					DebugLocation(200, 34);
					// Stone.g:200:34: ^( Match_Cross ( match_var )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(200, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Cross, "Match_Cross"), root_1);

					DebugLocation(200, 48);
					if (!(stream_match_var.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_match_var.HasNext )
					{
						DebugLocation(200, 48);
						adaptor.AddChild(root_1, stream_match_var.NextTree());

					}
					stream_match_var.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:201:4: match_var
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(201, 4);
				PushFollow(Follow._match_var_in_match_cross981);
				match_var95=match_var();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_var95.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_cross", 19);
			LeaveRule("match_cross", 19);
			LeaveRule_match_cross();
			if (state.backtracking > 0) { Memoize(input, 19, match_cross_StartIndex); }

		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "match_cross"); }
		return retval;

	}
	// $ANTLR end "match_cross"

	partial void EnterRule_match_var();
	partial void LeaveRule_match_var();

	// $ANTLR start "match_var"
	// Stone.g:204:1: match_var : ( IDENT -> ^( Match_Var IDENT ) | '(' match ')' -> match );
	[GrammarRule("match_var")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> match_var()
	{
		EnterRule_match_var();
		EnterRule("match_var", 20);
		TraceIn("match_var", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT96 = default(CommonToken);
		CommonToken char_literal97 = default(CommonToken);
		CommonToken char_literal99 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> match98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT96_tree = default(CommonTree);
		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "match_var");
		DebugLocation(204, 1);
		try
		{
			// Stone.g:205:2: ( IDENT -> ^( Match_Var IDENT ) | '(' match ')' -> match )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==IDENT))
			{
				alt33 = 1;
			}
			else if ((LA33_0==59))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:205:4: IDENT
				{
				DebugLocation(205, 4);
				IDENT96=(CommonToken)Match(input,IDENT,Follow._IDENT_in_match_var992); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT96);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 205:10: -> ^( Match_Var IDENT )
				{
					DebugLocation(205, 13);
					// Stone.g:205:13: ^( Match_Var IDENT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(205, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Var, "Match_Var"), root_1);

					DebugLocation(205, 25);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:206:4: '(' match ')'
				{
				DebugLocation(206, 4);
				char_literal97=(CommonToken)Match(input,59,Follow._59_in_match_var1005); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal97);

				DebugLocation(206, 8);
				PushFollow(Follow._match_in_match_var1007);
				match98=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match98.Tree);
				DebugLocation(206, 14);
				char_literal99=(CommonToken)Match(input,60,Follow._60_in_match_var1009); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal99);



				{
				// AST REWRITE
				// elements: match
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 206:18: -> match
				{
					DebugLocation(206, 21);
					adaptor.AddChild(root_0, stream_match.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_var", 20);
			LeaveRule("match_var", 20);
			LeaveRule_match_var();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "match_var"); }
		return retval;

	}
	// $ANTLR end "match_var"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// Stone.g:210:1: type : type_func ;
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type()
	{
		EnterRule_type();
		EnterRule("type", 21);
		TraceIn("type", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> type_func100 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(210, 1);
		try
		{
			// Stone.g:211:2: ( type_func )
			DebugEnterAlt(1);
			// Stone.g:211:4: type_func
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(211, 4);
			PushFollow(Follow._type_func_in_type1025);
			type_func100=type_func();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_func100.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 21);
			LeaveRule("type", 21);
			LeaveRule_type();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// Stone.g:214:1: type_func options {backtrack=true; memoize=true; } : ( type_cross '->' type_cross -> ^( Type_Func type_cross type_cross ) | type_cross );
	[GrammarRule("type_func")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 22);
		TraceIn("type_func", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int type_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal102 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_cross101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_cross103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_cross104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal102_tree = default(CommonTree);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleSubtreeStream stream_type_cross=new RewriteRuleSubtreeStream(adaptor,"rule type_cross");
		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(214, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Stone.g:219:2: ( type_cross '->' type_cross -> ^( Type_Func type_cross type_cross ) | type_cross )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==IDENT))
			{
				int LA34_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Stone_fragment)))
				{
					alt34 = 1;
				}
				else if ((true))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA34_0==59))
			{
				int LA34_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Stone_fragment)))
				{
					alt34 = 1;
				}
				else if ((true))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:219:4: type_cross '->' type_cross
				{
				DebugLocation(219, 4);
				PushFollow(Follow._type_cross_in_type_func1052);
				type_cross101=type_cross();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_cross.Add(type_cross101.Tree);
				DebugLocation(219, 15);
				string_literal102=(CommonToken)Match(input,62,Follow._62_in_type_func1054); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(string_literal102);

				DebugLocation(219, 20);
				PushFollow(Follow._type_cross_in_type_func1056);
				type_cross103=type_cross();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_cross.Add(type_cross103.Tree);


				{
				// AST REWRITE
				// elements: type_cross, type_cross
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 219:31: -> ^( Type_Func type_cross type_cross )
				{
					DebugLocation(219, 34);
					// Stone.g:219:34: ^( Type_Func type_cross type_cross )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(219, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(219, 46);
					adaptor.AddChild(root_1, stream_type_cross.NextTree());
					DebugLocation(219, 57);
					adaptor.AddChild(root_1, stream_type_cross.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:220:4: type_cross
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._type_cross_in_type_func1071);
				type_cross104=type_cross();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_cross104.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_func", 22);
			LeaveRule("type_func", 22);
			LeaveRule_type_func();
			if (state.backtracking > 0) { Memoize(input, 22, type_func_StartIndex); }

		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return retval;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_cross();
	partial void LeaveRule_type_cross();

	// $ANTLR start "type_cross"
	// Stone.g:223:1: type_cross options {backtrack=true; memoize=true; } : ( type_atom ( '*' type_atom )+ -> ^( Type_Cross ( type_atom )+ ) | type_atom );
	[GrammarRule("type_cross")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type_cross()
	{
		EnterRule_type_cross();
		EnterRule("type_cross", 23);
		TraceIn("type_cross", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int type_cross_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal106 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_atom105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_atom107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type_atom108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal106_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OP_MUL=new RewriteRuleITokenStream(adaptor,"token OP_MUL");
		RewriteRuleSubtreeStream stream_type_atom=new RewriteRuleSubtreeStream(adaptor,"rule type_atom");
		try { DebugEnterRule(GrammarFileName, "type_cross");
		DebugLocation(223, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Stone.g:228:2: ( type_atom ( '*' type_atom )+ -> ^( Type_Cross ( type_atom )+ ) | type_atom )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==IDENT))
			{
				int LA36_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_Stone_fragment)))
				{
					alt36 = 1;
				}
				else if ((true))
				{
					alt36 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA36_0==59))
			{
				int LA36_2 = input.LA(2);

				if ((EvaluatePredicate(synpred3_Stone_fragment)))
				{
					alt36 = 1;
				}
				else if ((true))
				{
					alt36 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:228:4: type_atom ( '*' type_atom )+
				{
				DebugLocation(228, 4);
				PushFollow(Follow._type_atom_in_type_cross1098);
				type_atom105=type_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_atom.Add(type_atom105.Tree);
				DebugLocation(228, 14);
				// Stone.g:228:14: ( '*' type_atom )+
				int cnt35=0;
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==OP_MUL))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:228:15: '*' type_atom
						{
						DebugLocation(228, 15);
						char_literal106=(CommonToken)Match(input,OP_MUL,Follow._OP_MUL_in_type_cross1101); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_OP_MUL.Add(char_literal106);

						DebugLocation(228, 19);
						PushFollow(Follow._type_atom_in_type_cross1103);
						type_atom107=type_atom();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_atom.Add(type_atom107.Tree);

						}
						break;

					default:
						if (cnt35 >= 1)
							goto loop35;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee35 = new EarlyExitException( 35, input );
						DebugRecognitionException(eee35);
						throw eee35;
					}
					cnt35++;
				}
				loop35:
					;

				} finally { DebugExitSubRule(35); }



				{
				// AST REWRITE
				// elements: type_atom
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 228:31: -> ^( Type_Cross ( type_atom )+ )
				{
					DebugLocation(228, 34);
					// Stone.g:228:34: ^( Type_Cross ( type_atom )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(228, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Cross, "Type_Cross"), root_1);

					DebugLocation(228, 47);
					if (!(stream_type_atom.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_type_atom.HasNext )
					{
						DebugLocation(228, 47);
						adaptor.AddChild(root_1, stream_type_atom.NextTree());

					}
					stream_type_atom.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:229:4: type_atom
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._type_atom_in_type_cross1119);
				type_atom108=type_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_atom108.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_cross", 23);
			LeaveRule("type_cross", 23);
			LeaveRule_type_cross();
			if (state.backtracking > 0) { Memoize(input, 23, type_cross_StartIndex); }

		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "type_cross"); }
		return retval;

	}
	// $ANTLR end "type_cross"

	partial void EnterRule_type_atom();
	partial void LeaveRule_type_atom();

	// $ANTLR start "type_atom"
	// Stone.g:232:1: type_atom : ( IDENT -> ^( Type_Atom IDENT ) | '(' type ')' -> type );
	[GrammarRule("type_atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type_atom()
	{
		EnterRule_type_atom();
		EnterRule("type_atom", 24);
		TraceIn("type_atom", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT109 = default(CommonToken);
		CommonToken char_literal110 = default(CommonToken);
		CommonToken char_literal112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT109_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "type_atom");
		DebugLocation(232, 1);
		try
		{
			// Stone.g:233:2: ( IDENT -> ^( Type_Atom IDENT ) | '(' type ')' -> type )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==IDENT))
			{
				alt37 = 1;
			}
			else if ((LA37_0==59))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:233:4: IDENT
				{
				DebugLocation(233, 4);
				IDENT109=(CommonToken)Match(input,IDENT,Follow._IDENT_in_type_atom1130); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT109);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:10: -> ^( Type_Atom IDENT )
				{
					DebugLocation(233, 13);
					// Stone.g:233:13: ^( Type_Atom IDENT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Atom, "Type_Atom"), root_1);

					DebugLocation(233, 25);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:234:4: '(' type ')'
				{
				DebugLocation(234, 4);
				char_literal110=(CommonToken)Match(input,59,Follow._59_in_type_atom1143); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal110);

				DebugLocation(234, 8);
				PushFollow(Follow._type_in_type_atom1145);
				type111=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type.Add(type111.Tree);
				DebugLocation(234, 13);
				char_literal112=(CommonToken)Match(input,60,Follow._60_in_type_atom1147); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal112);



				{
				// AST REWRITE
				// elements: type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 234:17: -> type
				{
					DebugLocation(234, 20);
					adaptor.AddChild(root_0, stream_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_atom", 24);
			LeaveRule("type_atom", 24);
			LeaveRule_type_atom();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "type_atom"); }
		return retval;

	}
	// $ANTLR end "type_atom"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// Stone.g:238:1: stmt_block : ( ( stmt )+ -> ^( Stmt_Block ( stmt )+ ) | INDENT stmt_block ( NEWLINE )* DEDENT -> stmt_block );
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INDENT114 = default(CommonToken);
		CommonToken NEWLINE116 = default(CommonToken);
		CommonToken DEDENT117 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INDENT114_tree = default(CommonTree);
		CommonTree NEWLINE116_tree = default(CommonTree);
		CommonTree DEDENT117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(238, 1);
		try
		{
			// Stone.g:239:2: ( ( stmt )+ -> ^( Stmt_Block ( stmt )+ ) | INDENT stmt_block ( NEWLINE )* DEDENT -> stmt_block )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==IDENT||(LA40_0>=72 && LA40_0<=73)||(LA40_0>=78 && LA40_0<=80)))
			{
				alt40 = 1;
			}
			else if ((LA40_0==INDENT))
			{
				alt40 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:239:4: ( stmt )+
				{
				DebugLocation(239, 4);
				// Stone.g:239:4: ( stmt )+
				int cnt38=0;
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==IDENT))
					{
						int LA38_2 = input.LA(2);

						if ((LA38_2==59||LA38_2==65))
						{
							alt38 = 1;
						}


					}
					else if (((LA38_0>=72 && LA38_0<=73)||(LA38_0>=78 && LA38_0<=80)))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:239:4: stmt
						{
						DebugLocation(239, 4);
						PushFollow(Follow._stmt_in_stmt_block1163);
						stmt113=stmt();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt.Add(stmt113.Tree);

						}
						break;

					default:
						if (cnt38 >= 1)
							goto loop38;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee38 = new EarlyExitException( 38, input );
						DebugRecognitionException(eee38);
						throw eee38;
					}
					cnt38++;
				}
				loop38:
					;

				} finally { DebugExitSubRule(38); }



				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:10: -> ^( Stmt_Block ( stmt )+ )
				{
					DebugLocation(239, 13);
					// Stone.g:239:13: ^( Stmt_Block ( stmt )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 15);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(239, 26);
					if (!(stream_stmt.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_stmt.HasNext )
					{
						DebugLocation(239, 26);
						adaptor.AddChild(root_1, stream_stmt.NextTree());

					}
					stream_stmt.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:240:4: INDENT stmt_block ( NEWLINE )* DEDENT
				{
				DebugLocation(240, 4);
				INDENT114=(CommonToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1178); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT114);

				DebugLocation(240, 11);
				PushFollow(Follow._stmt_block_in_stmt_block1180);
				stmt_block115=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block115.Tree);
				DebugLocation(240, 22);
				// Stone.g:240:22: ( NEWLINE )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_0 = input.LA(1);

					if ((LA39_0==NEWLINE))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:240:22: NEWLINE
						{
						DebugLocation(240, 22);
						NEWLINE116=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1182); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE116);


						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(240, 31);
				DEDENT117=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1185); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT117);



				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:38: -> stmt_block
				{
					DebugLocation(240, 41);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// Stone.g:243:1: stmt : ( stmt_return | stmt_alloc | stmt_assign | stmt_call | stmt_if | stmt_while | stmt_for );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_return118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_alloc119 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_assign120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_call121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_if122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_while123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_for124 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(243, 1);
		try
		{
			// Stone.g:244:2: ( stmt_return | stmt_alloc | stmt_assign | stmt_call | stmt_if | stmt_while | stmt_for )
			int alt41=7;
			try { DebugEnterDecision(41, false);
			switch (input.LA(1))
			{
			case 78:
				{
				alt41 = 1;
				}
				break;
			case 80:
				{
				alt41 = 2;
				}
				break;
			case IDENT:
				{
				int LA41_3 = input.LA(2);

				if ((LA41_3==65))
				{
					alt41 = 3;
				}
				else if ((LA41_3==59))
				{
					alt41 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 73:
				{
				alt41 = 5;
				}
				break;
			case 79:
				{
				alt41 = 6;
				}
				break;
			case 72:
				{
				alt41 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:244:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 4);
				PushFollow(Follow._stmt_return_in_stmt1200);
				stmt_return118=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return118.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:245:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(245, 4);
				PushFollow(Follow._stmt_alloc_in_stmt1205);
				stmt_alloc119=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc119.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:246:4: stmt_assign
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(246, 4);
				PushFollow(Follow._stmt_assign_in_stmt1210);
				stmt_assign120=stmt_assign();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_assign120.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Stone.g:247:4: stmt_call
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(247, 4);
				PushFollow(Follow._stmt_call_in_stmt1215);
				stmt_call121=stmt_call();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_call121.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Stone.g:248:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(248, 4);
				PushFollow(Follow._stmt_if_in_stmt1220);
				stmt_if122=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if122.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Stone.g:249:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(249, 4);
				PushFollow(Follow._stmt_while_in_stmt1225);
				stmt_while123=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while123.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Stone.g:250:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(250, 4);
				PushFollow(Follow._stmt_for_in_stmt1230);
				stmt_for124=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for124.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// Stone.g:254:1: stmt_return : 'return' expr NEWLINE -> ^( Stmt_Return expr ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 27);
		TraceIn("stmt_return", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal125 = default(CommonToken);
		CommonToken NEWLINE127 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr126 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree NEWLINE127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(254, 1);
		try
		{
			// Stone.g:255:2: ( 'return' expr NEWLINE -> ^( Stmt_Return expr ) )
			DebugEnterAlt(1);
			// Stone.g:255:4: 'return' expr NEWLINE
			{
			DebugLocation(255, 4);
			string_literal125=(CommonToken)Match(input,78,Follow._78_in_stmt_return1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_78.Add(string_literal125);

			DebugLocation(255, 13);
			PushFollow(Follow._expr_in_stmt_return1244);
			expr126=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr126.Tree);
			DebugLocation(255, 18);
			NEWLINE127=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_return1246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE127);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:26: -> ^( Stmt_Return expr )
			{
				DebugLocation(255, 29);
				// Stone.g:255:29: ^( Stmt_Return expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(255, 43);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 27);
			LeaveRule("stmt_return", 27);
			LeaveRule_stmt_return();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// Stone.g:258:1: stmt_alloc : '|' IDENT '|' '=' expr NEWLINE -> ^( Stmt_Alloc IDENT expr ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 28);
		TraceIn("stmt_alloc", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal128 = default(CommonToken);
		CommonToken IDENT129 = default(CommonToken);
		CommonToken char_literal130 = default(CommonToken);
		CommonToken char_literal131 = default(CommonToken);
		CommonToken NEWLINE133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree IDENT129_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree NEWLINE133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(258, 1);
		try
		{
			// Stone.g:259:2: ( '|' IDENT '|' '=' expr NEWLINE -> ^( Stmt_Alloc IDENT expr ) )
			DebugEnterAlt(1);
			// Stone.g:259:4: '|' IDENT '|' '=' expr NEWLINE
			{
			DebugLocation(259, 4);
			char_literal128=(CommonToken)Match(input,80,Follow._80_in_stmt_alloc1266); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_80.Add(char_literal128);

			DebugLocation(259, 8);
			IDENT129=(CommonToken)Match(input,IDENT,Follow._IDENT_in_stmt_alloc1268); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT129);

			DebugLocation(259, 14);
			char_literal130=(CommonToken)Match(input,80,Follow._80_in_stmt_alloc1270); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_80.Add(char_literal130);

			DebugLocation(259, 18);
			char_literal131=(CommonToken)Match(input,65,Follow._65_in_stmt_alloc1272); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_65.Add(char_literal131);

			DebugLocation(259, 22);
			PushFollow(Follow._expr_in_stmt_alloc1274);
			expr132=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr132.Tree);
			DebugLocation(259, 27);
			NEWLINE133=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_alloc1276); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE133);



			{
			// AST REWRITE
			// elements: IDENT, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:35: -> ^( Stmt_Alloc IDENT expr )
			{
				DebugLocation(259, 38);
				// Stone.g:259:38: ^( Stmt_Alloc IDENT expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Alloc, "Stmt_Alloc"), root_1);

				DebugLocation(259, 51);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(259, 57);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 28);
			LeaveRule("stmt_alloc", 28);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_assign();
	partial void LeaveRule_stmt_assign();

	// $ANTLR start "stmt_assign"
	// Stone.g:262:1: stmt_assign : IDENT '=' expr NEWLINE -> ^( Stmt_Assign IDENT expr ) ;
	[GrammarRule("stmt_assign")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_assign()
	{
		EnterRule_stmt_assign();
		EnterRule("stmt_assign", 29);
		TraceIn("stmt_assign", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT134 = default(CommonToken);
		CommonToken char_literal135 = default(CommonToken);
		CommonToken NEWLINE137 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT134_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_assign");
		DebugLocation(262, 1);
		try
		{
			// Stone.g:263:2: ( IDENT '=' expr NEWLINE -> ^( Stmt_Assign IDENT expr ) )
			DebugEnterAlt(1);
			// Stone.g:263:4: IDENT '=' expr NEWLINE
			{
			DebugLocation(263, 4);
			IDENT134=(CommonToken)Match(input,IDENT,Follow._IDENT_in_stmt_assign1297); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT134);

			DebugLocation(263, 10);
			char_literal135=(CommonToken)Match(input,65,Follow._65_in_stmt_assign1299); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_65.Add(char_literal135);

			DebugLocation(263, 14);
			PushFollow(Follow._expr_in_stmt_assign1301);
			expr136=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr136.Tree);
			DebugLocation(263, 19);
			NEWLINE137=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_assign1303); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE137);



			{
			// AST REWRITE
			// elements: expr, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:27: -> ^( Stmt_Assign IDENT expr )
			{
				DebugLocation(263, 30);
				// Stone.g:263:30: ^( Stmt_Assign IDENT expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Assign, "Stmt_Assign"), root_1);

				DebugLocation(263, 44);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(263, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_assign", 29);
			LeaveRule("stmt_assign", 29);
			LeaveRule_stmt_assign();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_assign"); }
		return retval;

	}
	// $ANTLR end "stmt_assign"

	partial void EnterRule_stmt_call();
	partial void LeaveRule_stmt_call();

	// $ANTLR start "stmt_call"
	// Stone.g:266:1: stmt_call : IDENT '(' ( args_list )? ')' NEWLINE -> ^( Stmt_Call IDENT ( args_list )? ) ;
	[GrammarRule("stmt_call")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_call()
	{
		EnterRule_stmt_call();
		EnterRule("stmt_call", 30);
		TraceIn("stmt_call", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT138 = default(CommonToken);
		CommonToken char_literal139 = default(CommonToken);
		CommonToken char_literal141 = default(CommonToken);
		CommonToken NEWLINE142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree NEWLINE142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "stmt_call");
		DebugLocation(266, 1);
		try
		{
			// Stone.g:267:2: ( IDENT '(' ( args_list )? ')' NEWLINE -> ^( Stmt_Call IDENT ( args_list )? ) )
			DebugEnterAlt(1);
			// Stone.g:267:4: IDENT '(' ( args_list )? ')' NEWLINE
			{
			DebugLocation(267, 4);
			IDENT138=(CommonToken)Match(input,IDENT,Follow._IDENT_in_stmt_call1324); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT138);

			DebugLocation(267, 10);
			char_literal139=(CommonToken)Match(input,59,Follow._59_in_stmt_call1326); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(char_literal139);

			DebugLocation(267, 14);
			// Stone.g:267:14: ( args_list )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==DOUBLE||LA42_0==IDENT||LA42_0==INT||LA42_0==NORMAL_STRING||LA42_0==59||(LA42_0>=67 && LA42_0<=68)||LA42_0==76))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:267:14: args_list
				{
				DebugLocation(267, 14);
				PushFollow(Follow._args_list_in_stmt_call1328);
				args_list140=args_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_args_list.Add(args_list140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(267, 25);
			char_literal141=(CommonToken)Match(input,60,Follow._60_in_stmt_call1331); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal141);

			DebugLocation(267, 29);
			NEWLINE142=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_call1333); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE142);



			{
			// AST REWRITE
			// elements: IDENT, args_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:37: -> ^( Stmt_Call IDENT ( args_list )? )
			{
				DebugLocation(267, 40);
				// Stone.g:267:40: ^( Stmt_Call IDENT ( args_list )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Call, "Stmt_Call"), root_1);

				DebugLocation(267, 52);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(267, 58);
				// Stone.g:267:58: ( args_list )?
				if (stream_args_list.HasNext)
				{
					DebugLocation(267, 58);
					adaptor.AddChild(root_1, stream_args_list.NextTree());

				}
				stream_args_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_call", 30);
			LeaveRule("stmt_call", 30);
			LeaveRule_stmt_call();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_call"); }
		return retval;

	}
	// $ANTLR end "stmt_call"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// Stone.g:270:1: stmt_if : 'if' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_If expr stmt_block ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 31);
		TraceIn("stmt_if", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal143 = default(CommonToken);
		CommonToken NEWLINE145 = default(CommonToken);
		CommonToken INDENT146 = default(CommonToken);
		CommonToken NEWLINE148 = default(CommonToken);
		CommonToken DEDENT149 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block147 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree NEWLINE145_tree = default(CommonTree);
		CommonTree INDENT146_tree = default(CommonTree);
		CommonTree NEWLINE148_tree = default(CommonTree);
		CommonTree DEDENT149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(270, 1);
		try
		{
			// Stone.g:271:2: ( 'if' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_If expr stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:271:4: 'if' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT )
			{
			DebugLocation(271, 4);
			string_literal143=(CommonToken)Match(input,73,Follow._73_in_stmt_if1355); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_73.Add(string_literal143);

			DebugLocation(271, 9);
			PushFollow(Follow._expr_in_stmt_if1357);
			expr144=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr144.Tree);
			DebugLocation(271, 14);
			NEWLINE145=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1359); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE145);

			DebugLocation(271, 22);
			// Stone.g:271:22: ( INDENT stmt_block ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:271:23: INDENT stmt_block ( NEWLINE )* DEDENT
			{
			DebugLocation(271, 23);
			INDENT146=(CommonToken)Match(input,INDENT,Follow._INDENT_in_stmt_if1362); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT146);

			DebugLocation(271, 30);
			PushFollow(Follow._stmt_block_in_stmt_if1364);
			stmt_block147=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block147.Tree);
			DebugLocation(271, 41);
			// Stone.g:271:41: ( NEWLINE )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==NEWLINE))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:271:41: NEWLINE
					{
					DebugLocation(271, 41);
					NEWLINE148=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1366); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE148);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(271, 50);
			DEDENT149=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_if1369); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT149);


			}



			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:58: -> ^( Stmt_If expr stmt_block )
			{
				DebugLocation(271, 61);
				// Stone.g:271:61: ^( Stmt_If expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(271, 71);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(271, 76);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 31);
			LeaveRule("stmt_if", 31);
			LeaveRule_stmt_if();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// Stone.g:274:1: stmt_while : 'while' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 32);
		TraceIn("stmt_while", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal150 = default(CommonToken);
		CommonToken NEWLINE152 = default(CommonToken);
		CommonToken INDENT153 = default(CommonToken);
		CommonToken NEWLINE155 = default(CommonToken);
		CommonToken DEDENT156 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree NEWLINE152_tree = default(CommonTree);
		CommonTree INDENT153_tree = default(CommonTree);
		CommonTree NEWLINE155_tree = default(CommonTree);
		CommonTree DEDENT156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(274, 1);
		try
		{
			// Stone.g:275:2: ( 'while' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:275:4: 'while' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT )
			{
			DebugLocation(275, 4);
			string_literal150=(CommonToken)Match(input,79,Follow._79_in_stmt_while1391); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_79.Add(string_literal150);

			DebugLocation(275, 12);
			PushFollow(Follow._expr_in_stmt_while1393);
			expr151=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr151.Tree);
			DebugLocation(275, 17);
			NEWLINE152=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while1395); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE152);

			DebugLocation(275, 25);
			// Stone.g:275:25: ( INDENT stmt_block ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:275:26: INDENT stmt_block ( NEWLINE )* DEDENT
			{
			DebugLocation(275, 26);
			INDENT153=(CommonToken)Match(input,INDENT,Follow._INDENT_in_stmt_while1398); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT153);

			DebugLocation(275, 33);
			PushFollow(Follow._stmt_block_in_stmt_while1400);
			stmt_block154=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block154.Tree);
			DebugLocation(275, 44);
			// Stone.g:275:44: ( NEWLINE )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==NEWLINE))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:275:44: NEWLINE
					{
					DebugLocation(275, 44);
					NEWLINE155=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while1402); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE155);


					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(275, 53);
			DEDENT156=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_while1405); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT156);


			}



			{
			// AST REWRITE
			// elements: stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:61: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(275, 64);
				// Stone.g:275:64: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(275, 77);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(275, 82);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 32);
			LeaveRule("stmt_while", 32);
			LeaveRule_stmt_while();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// Stone.g:278:1: stmt_for : 'for' '|' IDENT '|' 'in' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_For IDENT expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 33);
		TraceIn("stmt_for", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal157 = default(CommonToken);
		CommonToken char_literal158 = default(CommonToken);
		CommonToken IDENT159 = default(CommonToken);
		CommonToken char_literal160 = default(CommonToken);
		CommonToken string_literal161 = default(CommonToken);
		CommonToken NEWLINE163 = default(CommonToken);
		CommonToken INDENT164 = default(CommonToken);
		CommonToken NEWLINE166 = default(CommonToken);
		CommonToken DEDENT167 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block165 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree IDENT159_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		CommonTree NEWLINE163_tree = default(CommonTree);
		CommonTree INDENT164_tree = default(CommonTree);
		CommonTree NEWLINE166_tree = default(CommonTree);
		CommonTree DEDENT167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(278, 1);
		try
		{
			// Stone.g:279:2: ( 'for' '|' IDENT '|' 'in' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Stmt_For IDENT expr stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:279:4: 'for' '|' IDENT '|' 'in' expr NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT )
			{
			DebugLocation(279, 4);
			string_literal157=(CommonToken)Match(input,72,Follow._72_in_stmt_for1427); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_72.Add(string_literal157);

			DebugLocation(279, 10);
			char_literal158=(CommonToken)Match(input,80,Follow._80_in_stmt_for1429); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_80.Add(char_literal158);

			DebugLocation(279, 14);
			IDENT159=(CommonToken)Match(input,IDENT,Follow._IDENT_in_stmt_for1431); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT159);

			DebugLocation(279, 20);
			char_literal160=(CommonToken)Match(input,80,Follow._80_in_stmt_for1433); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_80.Add(char_literal160);

			DebugLocation(279, 24);
			string_literal161=(CommonToken)Match(input,74,Follow._74_in_stmt_for1435); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_74.Add(string_literal161);

			DebugLocation(279, 29);
			PushFollow(Follow._expr_in_stmt_for1437);
			expr162=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr162.Tree);
			DebugLocation(279, 34);
			NEWLINE163=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for1439); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE163);

			DebugLocation(279, 42);
			// Stone.g:279:42: ( INDENT stmt_block ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:279:43: INDENT stmt_block ( NEWLINE )* DEDENT
			{
			DebugLocation(279, 43);
			INDENT164=(CommonToken)Match(input,INDENT,Follow._INDENT_in_stmt_for1442); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT164);

			DebugLocation(279, 50);
			PushFollow(Follow._stmt_block_in_stmt_for1444);
			stmt_block165=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block165.Tree);
			DebugLocation(279, 61);
			// Stone.g:279:61: ( NEWLINE )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==NEWLINE))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:279:61: NEWLINE
					{
					DebugLocation(279, 61);
					NEWLINE166=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for1446); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE166);


					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(279, 70);
			DEDENT167=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_for1449); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT167);


			}



			{
			// AST REWRITE
			// elements: stmt_block, expr, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:78: -> ^( Stmt_For IDENT expr stmt_block )
			{
				DebugLocation(279, 81);
				// Stone.g:279:81: ^( Stmt_For IDENT expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(279, 92);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(279, 98);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(279, 103);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 33);
			LeaveRule("stmt_for", 33);
			LeaveRule_stmt_for();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// Stone.g:283:1: expr : ( logic_expr | lambda_expr | array_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 34);
		TraceIn("expr", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> logic_expr168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> lambda_expr169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> array_expr170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(283, 1);
		try
		{
			// Stone.g:284:2: ( logic_expr | lambda_expr | array_expr )
			int alt46=3;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case DOUBLE:
			case IDENT:
			case INT:
			case NORMAL_STRING:
			case 59:
			case 76:
				{
				alt46 = 1;
				}
				break;
			case 68:
				{
				alt46 = 2;
				}
				break;
			case 67:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:284:4: logic_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(284, 4);
				PushFollow(Follow._logic_expr_in_expr1474);
				logic_expr168=logic_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logic_expr168.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:285:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(285, 4);
				PushFollow(Follow._lambda_expr_in_expr1479);
				lambda_expr169=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr169.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:286:4: array_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._array_expr_in_expr1484);
				array_expr170=array_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_expr170.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 34);
			LeaveRule("expr", 34);
			LeaveRule_expr();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// Stone.g:289:1: lambda_expr : '\\\\' lambda_args '=>' type NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Expr_Lambda lambda_args type stmt_block ) ;
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 35);
		TraceIn("lambda_expr", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal171 = default(CommonToken);
		CommonToken string_literal173 = default(CommonToken);
		CommonToken NEWLINE175 = default(CommonToken);
		CommonToken INDENT176 = default(CommonToken);
		CommonToken NEWLINE178 = default(CommonToken);
		CommonToken DEDENT179 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> lambda_args172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type174 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> stmt_block177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal171_tree = default(CommonTree);
		CommonTree string_literal173_tree = default(CommonTree);
		CommonTree NEWLINE175_tree = default(CommonTree);
		CommonTree INDENT176_tree = default(CommonTree);
		CommonTree NEWLINE178_tree = default(CommonTree);
		CommonTree DEDENT179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_lambda_args=new RewriteRuleSubtreeStream(adaptor,"rule lambda_args");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(289, 1);
		try
		{
			// Stone.g:290:2: ( '\\\\' lambda_args '=>' type NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT ) -> ^( Expr_Lambda lambda_args type stmt_block ) )
			DebugEnterAlt(1);
			// Stone.g:290:4: '\\\\' lambda_args '=>' type NEWLINE ( INDENT stmt_block ( NEWLINE )* DEDENT )
			{
			DebugLocation(290, 4);
			char_literal171=(CommonToken)Match(input,68,Follow._68_in_lambda_expr1495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_68.Add(char_literal171);

			DebugLocation(290, 9);
			PushFollow(Follow._lambda_args_in_lambda_expr1497);
			lambda_args172=lambda_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lambda_args.Add(lambda_args172.Tree);
			DebugLocation(290, 21);
			string_literal173=(CommonToken)Match(input,66,Follow._66_in_lambda_expr1499); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_66.Add(string_literal173);

			DebugLocation(290, 26);
			PushFollow(Follow._type_in_lambda_expr1501);
			type174=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type.Add(type174.Tree);
			DebugLocation(290, 31);
			NEWLINE175=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_expr1503); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE175);

			DebugLocation(290, 39);
			// Stone.g:290:39: ( INDENT stmt_block ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// Stone.g:290:40: INDENT stmt_block ( NEWLINE )* DEDENT
			{
			DebugLocation(290, 40);
			INDENT176=(CommonToken)Match(input,INDENT,Follow._INDENT_in_lambda_expr1506); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT176);

			DebugLocation(290, 47);
			PushFollow(Follow._stmt_block_in_lambda_expr1508);
			stmt_block177=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block177.Tree);
			DebugLocation(290, 58);
			// Stone.g:290:58: ( NEWLINE )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==NEWLINE))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:290:58: NEWLINE
					{
					DebugLocation(290, 58);
					NEWLINE178=(CommonToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_expr1510); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE178);


					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }

			DebugLocation(290, 67);
			DEDENT179=(CommonToken)Match(input,DEDENT,Follow._DEDENT_in_lambda_expr1513); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT179);


			}



			{
			// AST REWRITE
			// elements: lambda_args, type, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 290:75: -> ^( Expr_Lambda lambda_args type stmt_block )
			{
				DebugLocation(290, 78);
				// Stone.g:290:78: ^( Expr_Lambda lambda_args type stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 80);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

				DebugLocation(290, 92);
				adaptor.AddChild(root_1, stream_lambda_args.NextTree());
				DebugLocation(290, 104);
				adaptor.AddChild(root_1, stream_type.NextTree());
				DebugLocation(290, 109);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 35);
			LeaveRule("lambda_expr", 35);
			LeaveRule_lambda_expr();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_lambda_args();
	partial void LeaveRule_lambda_args();

	// $ANTLR start "lambda_args"
	// Stone.g:293:1: lambda_args : ( match )? -> ^( Lambda_Args ( match )? ) ;
	[GrammarRule("lambda_args")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> lambda_args()
	{
		EnterRule_lambda_args();
		EnterRule("lambda_args", 36);
		TraceIn("lambda_args", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> match180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_match=new RewriteRuleSubtreeStream(adaptor,"rule match");
		try { DebugEnterRule(GrammarFileName, "lambda_args");
		DebugLocation(293, 1);
		try
		{
			// Stone.g:294:2: ( ( match )? -> ^( Lambda_Args ( match )? ) )
			DebugEnterAlt(1);
			// Stone.g:294:4: ( match )?
			{
			DebugLocation(294, 4);
			// Stone.g:294:4: ( match )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==IDENT||LA48_0==59))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:294:4: match
				{
				DebugLocation(294, 4);
				PushFollow(Follow._match_in_lambda_args1537);
				match180=match();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_match.Add(match180.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }



			{
			// AST REWRITE
			// elements: match
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 294:11: -> ^( Lambda_Args ( match )? )
			{
				DebugLocation(294, 14);
				// Stone.g:294:14: ^( Lambda_Args ( match )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(294, 16);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Lambda_Args, "Lambda_Args"), root_1);

				DebugLocation(294, 28);
				// Stone.g:294:28: ( match )?
				if (stream_match.HasNext)
				{
					DebugLocation(294, 28);
					adaptor.AddChild(root_1, stream_match.NextTree());

				}
				stream_match.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_args", 36);
			LeaveRule("lambda_args", 36);
			LeaveRule_lambda_args();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_args"); }
		return retval;

	}
	// $ANTLR end "lambda_args"

	partial void EnterRule_array_expr();
	partial void LeaveRule_array_expr();

	// $ANTLR start "array_expr"
	// Stone.g:297:1: array_expr : '[' array_list ']' -> ^( Expr_Array array_list ) ;
	[GrammarRule("array_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> array_expr()
	{
		EnterRule_array_expr();
		EnterRule("array_expr", 37);
		TraceIn("array_expr", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal181 = default(CommonToken);
		CommonToken char_literal183 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> array_list182 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_array_list=new RewriteRuleSubtreeStream(adaptor,"rule array_list");
		try { DebugEnterRule(GrammarFileName, "array_expr");
		DebugLocation(297, 1);
		try
		{
			// Stone.g:298:2: ( '[' array_list ']' -> ^( Expr_Array array_list ) )
			DebugEnterAlt(1);
			// Stone.g:298:4: '[' array_list ']'
			{
			DebugLocation(298, 4);
			char_literal181=(CommonToken)Match(input,67,Follow._67_in_array_expr1558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_67.Add(char_literal181);

			DebugLocation(298, 8);
			PushFollow(Follow._array_list_in_array_expr1560);
			array_list182=array_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_array_list.Add(array_list182.Tree);
			DebugLocation(298, 19);
			char_literal183=(CommonToken)Match(input,69,Follow._69_in_array_expr1562); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal183);



			{
			// AST REWRITE
			// elements: array_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 298:23: -> ^( Expr_Array array_list )
			{
				DebugLocation(298, 26);
				// Stone.g:298:26: ^( Expr_Array array_list )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(298, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Array, "Expr_Array"), root_1);

				DebugLocation(298, 39);
				adaptor.AddChild(root_1, stream_array_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_expr", 37);
			LeaveRule("array_expr", 37);
			LeaveRule_array_expr();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "array_expr"); }
		return retval;

	}
	// $ANTLR end "array_expr"

	partial void EnterRule_array_list();
	partial void LeaveRule_array_list();

	// $ANTLR start "array_list"
	// Stone.g:301:1: array_list : ( expr ( ',' expr )* )? -> ( expr )* ;
	[GrammarRule("array_list")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> array_list()
	{
		EnterRule_array_list();
		EnterRule("array_list", 38);
		TraceIn("array_list", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal185 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "array_list");
		DebugLocation(301, 1);
		try
		{
			// Stone.g:302:2: ( ( expr ( ',' expr )* )? -> ( expr )* )
			DebugEnterAlt(1);
			// Stone.g:302:4: ( expr ( ',' expr )* )?
			{
			DebugLocation(302, 4);
			// Stone.g:302:4: ( expr ( ',' expr )* )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==DOUBLE||LA50_0==IDENT||LA50_0==INT||LA50_0==NORMAL_STRING||LA50_0==59||(LA50_0>=67 && LA50_0<=68)||LA50_0==76))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:302:5: expr ( ',' expr )*
				{
				DebugLocation(302, 5);
				PushFollow(Follow._expr_in_array_list1582);
				expr184=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr184.Tree);
				DebugLocation(302, 10);
				// Stone.g:302:10: ( ',' expr )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==61))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:302:11: ',' expr
						{
						DebugLocation(302, 11);
						char_literal185=(CommonToken)Match(input,61,Follow._61_in_array_list1585); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_61.Add(char_literal185);

						DebugLocation(302, 15);
						PushFollow(Follow._expr_in_array_list1587);
						expr186=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr186.Tree);

						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }


				}
				break;

			}
			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:24: -> ( expr )*
			{
				DebugLocation(302, 27);
				// Stone.g:302:27: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(302, 27);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_list", 38);
			LeaveRule("array_list", 38);
			LeaveRule_array_list();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "array_list"); }
		return retval;

	}
	// $ANTLR end "array_list"

	partial void EnterRule_logic_expr();
	partial void LeaveRule_logic_expr();

	// $ANTLR start "logic_expr"
	// Stone.g:305:1: logic_expr : message_expr ( ( OP_EQU | OP_NEQ | OP_LSS | OP_LEQ | OP_GTR | OP_GEQ ) ^ message_expr )* ;
	[GrammarRule("logic_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> logic_expr()
	{
		EnterRule_logic_expr();
		EnterRule("logic_expr", 39);
		TraceIn("logic_expr", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set188 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_expr187 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_expr189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set188_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logic_expr");
		DebugLocation(305, 1);
		try
		{
			// Stone.g:306:2: ( message_expr ( ( OP_EQU | OP_NEQ | OP_LSS | OP_LEQ | OP_GTR | OP_GEQ ) ^ message_expr )* )
			DebugEnterAlt(1);
			// Stone.g:306:4: message_expr ( ( OP_EQU | OP_NEQ | OP_LSS | OP_LEQ | OP_GTR | OP_GEQ ) ^ message_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(306, 4);
			PushFollow(Follow._message_expr_in_logic_expr1607);
			message_expr187=message_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, message_expr187.Tree);
			DebugLocation(306, 17);
			// Stone.g:306:17: ( ( OP_EQU | OP_NEQ | OP_LSS | OP_LEQ | OP_GTR | OP_GEQ ) ^ message_expr )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if (((LA51_0>=OP_EQU && LA51_0<=OP_LSS)||LA51_0==OP_NEQ))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:306:18: ( OP_EQU | OP_NEQ | OP_LSS | OP_LEQ | OP_GTR | OP_GEQ ) ^ message_expr
					{
					DebugLocation(306, 71);

					set188=(CommonToken)input.LT(1);
					set188=(CommonToken)input.LT(1);
					if ((input.LA(1)>=OP_EQU && input.LA(1)<=OP_LSS)||input.LA(1)==OP_NEQ)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set188), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(306, 73);
					PushFollow(Follow._message_expr_in_logic_expr1635);
					message_expr189=message_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, message_expr189.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_expr", 39);
			LeaveRule("logic_expr", 39);
			LeaveRule_logic_expr();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expr"); }
		return retval;

	}
	// $ANTLR end "logic_expr"

	partial void EnterRule_message_expr();
	partial void LeaveRule_message_expr();

	// $ANTLR start "message_expr"
	// Stone.g:309:1: message_expr options {backtrack=true; memoize=true; } : ( add_expr ( message_item )+ -> ^( Expr_Message add_expr ( message_item )+ ) | add_expr );
	[GrammarRule("message_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_expr()
	{
		EnterRule_message_expr();
		EnterRule("message_expr", 40);
		TraceIn("message_expr", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int message_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> add_expr190 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> message_item191 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> add_expr192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_message_item=new RewriteRuleSubtreeStream(adaptor,"rule message_item");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "message_expr");
		DebugLocation(309, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Stone.g:314:2: ( add_expr ( message_item )+ -> ^( Expr_Message add_expr ( message_item )+ ) | add_expr )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA53_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt53 = 1;
				}
				else if ((true))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt53 = 1;
				}
				else if ((true))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DOUBLE:
				{
				int LA53_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt53 = 1;
				}
				else if ((true))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NORMAL_STRING:
				{
				int LA53_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt53 = 1;
				}
				else if ((true))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 76:
				{
				int LA53_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt53 = 1;
				}
				else if ((true))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 59:
				{
				int LA53_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Stone_fragment)))
				{
					alt53 = 1;
				}
				else if ((true))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:314:4: add_expr ( message_item )+
				{
				DebugLocation(314, 4);
				PushFollow(Follow._add_expr_in_message_expr1664);
				add_expr190=add_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_add_expr.Add(add_expr190.Tree);
				DebugLocation(314, 13);
				// Stone.g:314:13: ( message_item )+
				int cnt52=0;
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT))
					{
						alt52 = 1;
					}


					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:314:13: message_item
						{
						DebugLocation(314, 13);
						PushFollow(Follow._message_item_in_message_expr1666);
						message_item191=message_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_message_item.Add(message_item191.Tree);

						}
						break;

					default:
						if (cnt52 >= 1)
							goto loop52;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee52 = new EarlyExitException( 52, input );
						DebugRecognitionException(eee52);
						throw eee52;
					}
					cnt52++;
				}
				loop52:
					;

				} finally { DebugExitSubRule(52); }



				{
				// AST REWRITE
				// elements: message_item, add_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:27: -> ^( Expr_Message add_expr ( message_item )+ )
				{
					DebugLocation(314, 30);
					// Stone.g:314:30: ^( Expr_Message add_expr ( message_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 32);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Message, "Expr_Message"), root_1);

					DebugLocation(314, 45);
					adaptor.AddChild(root_1, stream_add_expr.NextTree());
					DebugLocation(314, 54);
					if (!(stream_message_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_message_item.HasNext )
					{
						DebugLocation(314, 54);
						adaptor.AddChild(root_1, stream_message_item.NextTree());

					}
					stream_message_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:315:4: add_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(315, 4);
				PushFollow(Follow._add_expr_in_message_expr1683);
				add_expr192=add_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_expr192.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_expr", 40);
			LeaveRule("message_expr", 40);
			LeaveRule_message_expr();
			if (state.backtracking > 0) { Memoize(input, 40, message_expr_StartIndex); }

		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "message_expr"); }
		return retval;

	}
	// $ANTLR end "message_expr"

	partial void EnterRule_message_item();
	partial void LeaveRule_message_item();

	// $ANTLR start "message_item"
	// Stone.g:318:1: message_item : IDENT '(' ( args_list )? ')' -> ^( Message_Item IDENT ( args_list )? ) ;
	[GrammarRule("message_item")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> message_item()
	{
		EnterRule_message_item();
		EnterRule("message_item", 41);
		TraceIn("message_item", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT193 = default(CommonToken);
		CommonToken char_literal194 = default(CommonToken);
		CommonToken char_literal196 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list195 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT193_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "message_item");
		DebugLocation(318, 1);
		try
		{
			// Stone.g:319:2: ( IDENT '(' ( args_list )? ')' -> ^( Message_Item IDENT ( args_list )? ) )
			DebugEnterAlt(1);
			// Stone.g:319:4: IDENT '(' ( args_list )? ')'
			{
			DebugLocation(319, 4);
			IDENT193=(CommonToken)Match(input,IDENT,Follow._IDENT_in_message_item1694); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT193);

			DebugLocation(319, 10);
			char_literal194=(CommonToken)Match(input,59,Follow._59_in_message_item1696); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(char_literal194);

			DebugLocation(319, 14);
			// Stone.g:319:14: ( args_list )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==DOUBLE||LA54_0==IDENT||LA54_0==INT||LA54_0==NORMAL_STRING||LA54_0==59||(LA54_0>=67 && LA54_0<=68)||LA54_0==76))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:319:14: args_list
				{
				DebugLocation(319, 14);
				PushFollow(Follow._args_list_in_message_item1698);
				args_list195=args_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_args_list.Add(args_list195.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(319, 25);
			char_literal196=(CommonToken)Match(input,60,Follow._60_in_message_item1701); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal196);



			{
			// AST REWRITE
			// elements: IDENT, args_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 319:29: -> ^( Message_Item IDENT ( args_list )? )
			{
				DebugLocation(319, 32);
				// Stone.g:319:32: ^( Message_Item IDENT ( args_list )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(319, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Message_Item, "Message_Item"), root_1);

				DebugLocation(319, 47);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(319, 53);
				// Stone.g:319:53: ( args_list )?
				if (stream_args_list.HasNext)
				{
					DebugLocation(319, 53);
					adaptor.AddChild(root_1, stream_args_list.NextTree());

				}
				stream_args_list.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("message_item", 41);
			LeaveRule("message_item", 41);
			LeaveRule_message_item();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "message_item"); }
		return retval;

	}
	// $ANTLR end "message_item"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// Stone.g:322:1: args_list : expr ( ',' expr )* -> ( expr )* ;
	[GrammarRule("args_list")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 42);
		TraceIn("args_list", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal198 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr199 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(322, 1);
		try
		{
			// Stone.g:323:2: ( expr ( ',' expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// Stone.g:323:4: expr ( ',' expr )*
			{
			DebugLocation(323, 4);
			PushFollow(Follow._expr_in_args_list1723);
			expr197=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr197.Tree);
			DebugLocation(323, 9);
			// Stone.g:323:9: ( ',' expr )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==61))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:323:10: ',' expr
					{
					DebugLocation(323, 10);
					char_literal198=(CommonToken)Match(input,61,Follow._61_in_args_list1726); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal198);

					DebugLocation(323, 14);
					PushFollow(Follow._expr_in_args_list1728);
					expr199=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr199.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:21: -> ( expr )*
			{
				DebugLocation(323, 24);
				// Stone.g:323:24: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(323, 24);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args_list", 42);
			LeaveRule("args_list", 42);
			LeaveRule_args_list();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return retval;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// Stone.g:326:1: add_expr : mul_expr ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 43);
		TraceIn("add_expr", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set201 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mul_expr200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mul_expr202 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set201_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(326, 1);
		try
		{
			// Stone.g:327:2: ( mul_expr ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )* )
			DebugEnterAlt(1);
			// Stone.g:327:4: mul_expr ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(327, 4);
			PushFollow(Follow._mul_expr_in_add_expr1746);
			mul_expr200=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mul_expr200.Tree);
			DebugLocation(327, 13);
			// Stone.g:327:13: ( ( OP_PLUS | OP_MINUS ) ^ mul_expr )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==OP_MINUS||LA56_0==OP_PLUS))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:327:14: ( OP_PLUS | OP_MINUS ) ^ mul_expr
					{
					DebugLocation(327, 34);

					set201=(CommonToken)input.LT(1);
					set201=(CommonToken)input.LT(1);
					if (input.LA(1)==OP_MINUS||input.LA(1)==OP_PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set201), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(327, 36);
					PushFollow(Follow._mul_expr_in_add_expr1758);
					mul_expr202=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mul_expr202.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 43);
			LeaveRule("add_expr", 43);
			LeaveRule_add_expr();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// Stone.g:330:1: mul_expr : call_expr ( ( OP_MUL | OP_DIV ) ^ call_expr )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 44);
		TraceIn("mul_expr", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set204 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> call_expr203 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> call_expr205 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set204_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(330, 1);
		try
		{
			// Stone.g:331:2: ( call_expr ( ( OP_MUL | OP_DIV ) ^ call_expr )* )
			DebugEnterAlt(1);
			// Stone.g:331:4: call_expr ( ( OP_MUL | OP_DIV ) ^ call_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(331, 4);
			PushFollow(Follow._call_expr_in_mul_expr1771);
			call_expr203=call_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, call_expr203.Tree);
			DebugLocation(331, 14);
			// Stone.g:331:14: ( ( OP_MUL | OP_DIV ) ^ call_expr )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==OP_DIV||LA57_0==OP_MUL))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:331:15: ( OP_MUL | OP_DIV ) ^ call_expr
					{
					DebugLocation(331, 32);

					set204=(CommonToken)input.LT(1);
					set204=(CommonToken)input.LT(1);
					if (input.LA(1)==OP_DIV||input.LA(1)==OP_MUL)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set204), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(331, 34);
					PushFollow(Follow._call_expr_in_mul_expr1783);
					call_expr205=call_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, call_expr205.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 44);
			LeaveRule("mul_expr", 44);
			LeaveRule_mul_expr();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// Stone.g:334:1: call_expr : ( IDENT '(' ( args_list )? ')' -> ^( Expr_Call IDENT ( args_list )? ) | access_expr );
	[GrammarRule("call_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 45);
		TraceIn("call_expr", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT206 = default(CommonToken);
		CommonToken char_literal207 = default(CommonToken);
		CommonToken char_literal209 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> access_expr210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT206_tree = default(CommonTree);
		CommonTree char_literal207_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(334, 1);
		try
		{
			// Stone.g:335:2: ( IDENT '(' ( args_list )? ')' -> ^( Expr_Call IDENT ( args_list )? ) | access_expr )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==IDENT))
			{
				int LA59_1 = input.LA(2);

				if ((LA59_1==59))
				{
					alt59 = 1;
				}
				else if ((LA59_1==Expr_Access||LA59_1==IDENT||LA59_1==NEWLINE||(LA59_1>=OP_DIV && LA59_1<=OP_PLUS)||(LA59_1>=60 && LA59_1<=61)||LA59_1==69))
				{
					alt59 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 59, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA59_0==DOUBLE||LA59_0==INT||LA59_0==NORMAL_STRING||LA59_0==59||LA59_0==76))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:335:4: IDENT '(' ( args_list )? ')'
				{
				DebugLocation(335, 4);
				IDENT206=(CommonToken)Match(input,IDENT,Follow._IDENT_in_call_expr1796); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT206);

				DebugLocation(335, 10);
				char_literal207=(CommonToken)Match(input,59,Follow._59_in_call_expr1798); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal207);

				DebugLocation(335, 14);
				// Stone.g:335:14: ( args_list )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==DOUBLE||LA58_0==IDENT||LA58_0==INT||LA58_0==NORMAL_STRING||LA58_0==59||(LA58_0>=67 && LA58_0<=68)||LA58_0==76))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:335:14: args_list
					{
					DebugLocation(335, 14);
					PushFollow(Follow._args_list_in_call_expr1800);
					args_list208=args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_args_list.Add(args_list208.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(58); }

				DebugLocation(335, 25);
				char_literal209=(CommonToken)Match(input,60,Follow._60_in_call_expr1803); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal209);



				{
				// AST REWRITE
				// elements: args_list, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 335:29: -> ^( Expr_Call IDENT ( args_list )? )
				{
					DebugLocation(335, 32);
					// Stone.g:335:32: ^( Expr_Call IDENT ( args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(335, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(335, 44);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(335, 50);
					// Stone.g:335:50: ( args_list )?
					if (stream_args_list.HasNext)
					{
						DebugLocation(335, 50);
						adaptor.AddChild(root_1, stream_args_list.NextTree());

					}
					stream_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:336:4: access_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(336, 4);
				PushFollow(Follow._access_expr_in_call_expr1819);
				access_expr210=access_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_expr210.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call_expr", 45);
			LeaveRule("call_expr", 45);
			LeaveRule_call_expr();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return retval;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_access_expr();
	partial void LeaveRule_access_expr();

	// $ANTLR start "access_expr"
	// Stone.g:339:1: access_expr : atom_expr ( Expr_Access ^ IDENT )* ;
	[GrammarRule("access_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> access_expr()
	{
		EnterRule_access_expr();
		EnterRule("access_expr", 46);
		TraceIn("access_expr", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken Expr_Access212 = default(CommonToken);
		CommonToken IDENT213 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom_expr211 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree Expr_Access212_tree = default(CommonTree);
		CommonTree IDENT213_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "access_expr");
		DebugLocation(339, 1);
		try
		{
			// Stone.g:340:2: ( atom_expr ( Expr_Access ^ IDENT )* )
			DebugEnterAlt(1);
			// Stone.g:340:4: atom_expr ( Expr_Access ^ IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(340, 4);
			PushFollow(Follow._atom_expr_in_access_expr1830);
			atom_expr211=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom_expr211.Tree);
			DebugLocation(340, 14);
			// Stone.g:340:14: ( Expr_Access ^ IDENT )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==Expr_Access))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:340:15: Expr_Access ^ IDENT
					{
					DebugLocation(340, 26);
					Expr_Access212=(CommonToken)Match(input,Expr_Access,Follow._Expr_Access_in_access_expr1833); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Expr_Access212_tree = (CommonTree)adaptor.Create(Expr_Access212);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Access212_tree, root_0);
					}
					DebugLocation(340, 28);
					IDENT213=(CommonToken)Match(input,IDENT,Follow._IDENT_in_access_expr1836); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT213_tree = (CommonTree)adaptor.Create(IDENT213);
					adaptor.AddChild(root_0, IDENT213_tree);
					}

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_expr", 46);
			LeaveRule("access_expr", 46);
			LeaveRule_access_expr();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "access_expr"); }
		return retval;

	}
	// $ANTLR end "access_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// Stone.g:343:1: atom_expr : ( IDENT | INT | DOUBLE | NORMAL_STRING | 'new' IDENT '(' args_list ')' -> ^( Expr_New_Data IDENT args_list ) | '(' expr ')' -> expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 47);
		TraceIn("atom_expr", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT214 = default(CommonToken);
		CommonToken INT215 = default(CommonToken);
		CommonToken DOUBLE216 = default(CommonToken);
		CommonToken NORMAL_STRING217 = default(CommonToken);
		CommonToken string_literal218 = default(CommonToken);
		CommonToken IDENT219 = default(CommonToken);
		CommonToken char_literal220 = default(CommonToken);
		CommonToken char_literal222 = default(CommonToken);
		CommonToken char_literal223 = default(CommonToken);
		CommonToken char_literal225 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> args_list221 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expr224 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENT214_tree = default(CommonTree);
		CommonTree INT215_tree = default(CommonTree);
		CommonTree DOUBLE216_tree = default(CommonTree);
		CommonTree NORMAL_STRING217_tree = default(CommonTree);
		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree IDENT219_tree = default(CommonTree);
		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree char_literal222_tree = default(CommonTree);
		CommonTree char_literal223_tree = default(CommonTree);
		CommonTree char_literal225_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_args_list=new RewriteRuleSubtreeStream(adaptor,"rule args_list");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(343, 1);
		try
		{
			// Stone.g:344:2: ( IDENT | INT | DOUBLE | NORMAL_STRING | 'new' IDENT '(' args_list ')' -> ^( Expr_New_Data IDENT args_list ) | '(' expr ')' -> expr )
			int alt61=6;
			try { DebugEnterDecision(61, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt61 = 1;
				}
				break;
			case INT:
				{
				alt61 = 2;
				}
				break;
			case DOUBLE:
				{
				alt61 = 3;
				}
				break;
			case NORMAL_STRING:
				{
				alt61 = 4;
				}
				break;
			case 76:
				{
				alt61 = 5;
				}
				break;
			case 59:
				{
				alt61 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:344:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(344, 4);
				IDENT214=(CommonToken)Match(input,IDENT,Follow._IDENT_in_atom_expr1849); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT214_tree = (CommonTree)adaptor.Create(IDENT214);
				adaptor.AddChild(root_0, IDENT214_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:345:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(345, 4);
				INT215=(CommonToken)Match(input,INT,Follow._INT_in_atom_expr1854); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT215_tree = (CommonTree)adaptor.Create(INT215);
				adaptor.AddChild(root_0, INT215_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:346:4: DOUBLE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(346, 4);
				DOUBLE216=(CommonToken)Match(input,DOUBLE,Follow._DOUBLE_in_atom_expr1859); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOUBLE216_tree = (CommonTree)adaptor.Create(DOUBLE216);
				adaptor.AddChild(root_0, DOUBLE216_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Stone.g:347:4: NORMAL_STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(347, 4);
				NORMAL_STRING217=(CommonToken)Match(input,NORMAL_STRING,Follow._NORMAL_STRING_in_atom_expr1864); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NORMAL_STRING217_tree = (CommonTree)adaptor.Create(NORMAL_STRING217);
				adaptor.AddChild(root_0, NORMAL_STRING217_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Stone.g:348:4: 'new' IDENT '(' args_list ')'
				{
				DebugLocation(348, 4);
				string_literal218=(CommonToken)Match(input,76,Follow._76_in_atom_expr1869); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_76.Add(string_literal218);

				DebugLocation(348, 10);
				IDENT219=(CommonToken)Match(input,IDENT,Follow._IDENT_in_atom_expr1871); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IDENT.Add(IDENT219);

				DebugLocation(348, 16);
				char_literal220=(CommonToken)Match(input,59,Follow._59_in_atom_expr1873); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal220);

				DebugLocation(348, 20);
				PushFollow(Follow._args_list_in_atom_expr1875);
				args_list221=args_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_args_list.Add(args_list221.Tree);
				DebugLocation(348, 30);
				char_literal222=(CommonToken)Match(input,60,Follow._60_in_atom_expr1877); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal222);



				{
				// AST REWRITE
				// elements: IDENT, args_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:34: -> ^( Expr_New_Data IDENT args_list )
				{
					DebugLocation(348, 37);
					// Stone.g:348:37: ^( Expr_New_Data IDENT args_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(348, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Data, "Expr_New_Data"), root_1);

					DebugLocation(348, 53);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(348, 59);
					adaptor.AddChild(root_1, stream_args_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Stone.g:349:4: '(' expr ')'
				{
				DebugLocation(349, 4);
				char_literal223=(CommonToken)Match(input,59,Follow._59_in_atom_expr1892); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal223);

				DebugLocation(349, 8);
				PushFollow(Follow._expr_in_atom_expr1894);
				expr224=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr224.Tree);
				DebugLocation(349, 13);
				char_literal225=(CommonToken)Match(input,60,Follow._60_in_atom_expr1896); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal225);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:17: -> expr
				{
					DebugLocation(349, 20);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 47);
			LeaveRule("atom_expr", 47);
			LeaveRule_atom_expr();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_synpred1_Stone_fragment();
	partial void LeaveRule_synpred1_Stone_fragment();

	// $ANTLR start synpred1_Stone
	public void synpred1_Stone_fragment()
	{
		EnterRule_synpred1_Stone_fragment();
		EnterRule("synpred1_Stone_fragment", 48);
		TraceIn("synpred1_Stone_fragment", 48);
		try
		{
			// Stone.g:200:4: ( match_var ( ',' match_var )+ )
			DebugEnterAlt(1);
			// Stone.g:200:4: match_var ( ',' match_var )+
			{
			DebugLocation(200, 4);
			PushFollow(Follow._match_var_in_synpred1_Stone960);
			match_var();
			PopFollow();
			if (state.failed) return;
			DebugLocation(200, 14);
			// Stone.g:200:14: ( ',' match_var )+
			int cnt62=0;
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==61))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:200:15: ',' match_var
					{
					DebugLocation(200, 15);
					Match(input,61,Follow._61_in_synpred1_Stone963); if (state.failed) return;
					DebugLocation(200, 19);
					PushFollow(Follow._match_var_in_synpred1_Stone965);
					match_var();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt62 >= 1)
						goto loop62;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee62 = new EarlyExitException( 62, input );
					DebugRecognitionException(eee62);
					throw eee62;
				}
				cnt62++;
			}
			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

		}
		finally
		{
			TraceOut("synpred1_Stone_fragment", 48);
			LeaveRule("synpred1_Stone_fragment", 48);
			LeaveRule_synpred1_Stone_fragment();
		}
	}
	// $ANTLR end synpred1_Stone

	partial void EnterRule_synpred2_Stone_fragment();
	partial void LeaveRule_synpred2_Stone_fragment();

	// $ANTLR start synpred2_Stone
	public void synpred2_Stone_fragment()
	{
		EnterRule_synpred2_Stone_fragment();
		EnterRule("synpred2_Stone_fragment", 49);
		TraceIn("synpred2_Stone_fragment", 49);
		try
		{
			// Stone.g:219:4: ( type_cross '->' type_cross )
			DebugEnterAlt(1);
			// Stone.g:219:4: type_cross '->' type_cross
			{
			DebugLocation(219, 4);
			PushFollow(Follow._type_cross_in_synpred2_Stone1052);
			type_cross();
			PopFollow();
			if (state.failed) return;
			DebugLocation(219, 15);
			Match(input,62,Follow._62_in_synpred2_Stone1054); if (state.failed) return;
			DebugLocation(219, 20);
			PushFollow(Follow._type_cross_in_synpred2_Stone1056);
			type_cross();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Stone_fragment", 49);
			LeaveRule("synpred2_Stone_fragment", 49);
			LeaveRule_synpred2_Stone_fragment();
		}
	}
	// $ANTLR end synpred2_Stone

	partial void EnterRule_synpred3_Stone_fragment();
	partial void LeaveRule_synpred3_Stone_fragment();

	// $ANTLR start synpred3_Stone
	public void synpred3_Stone_fragment()
	{
		EnterRule_synpred3_Stone_fragment();
		EnterRule("synpred3_Stone_fragment", 50);
		TraceIn("synpred3_Stone_fragment", 50);
		try
		{
			// Stone.g:228:4: ( type_atom ( '*' type_atom )+ )
			DebugEnterAlt(1);
			// Stone.g:228:4: type_atom ( '*' type_atom )+
			{
			DebugLocation(228, 4);
			PushFollow(Follow._type_atom_in_synpred3_Stone1098);
			type_atom();
			PopFollow();
			if (state.failed) return;
			DebugLocation(228, 14);
			// Stone.g:228:14: ( '*' type_atom )+
			int cnt63=0;
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==OP_MUL))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:228:15: '*' type_atom
					{
					DebugLocation(228, 15);
					Match(input,OP_MUL,Follow._OP_MUL_in_synpred3_Stone1101); if (state.failed) return;
					DebugLocation(228, 19);
					PushFollow(Follow._type_atom_in_synpred3_Stone1103);
					type_atom();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt63 >= 1)
						goto loop63;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee63 = new EarlyExitException( 63, input );
					DebugRecognitionException(eee63);
					throw eee63;
				}
				cnt63++;
			}
			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

		}
		finally
		{
			TraceOut("synpred3_Stone_fragment", 50);
			LeaveRule("synpred3_Stone_fragment", 50);
			LeaveRule_synpred3_Stone_fragment();
		}
	}
	// $ANTLR end synpred3_Stone

	partial void EnterRule_synpred4_Stone_fragment();
	partial void LeaveRule_synpred4_Stone_fragment();

	// $ANTLR start synpred4_Stone
	public void synpred4_Stone_fragment()
	{
		EnterRule_synpred4_Stone_fragment();
		EnterRule("synpred4_Stone_fragment", 51);
		TraceIn("synpred4_Stone_fragment", 51);
		try
		{
			// Stone.g:314:4: ( add_expr ( message_item )+ )
			DebugEnterAlt(1);
			// Stone.g:314:4: add_expr ( message_item )+
			{
			DebugLocation(314, 4);
			PushFollow(Follow._add_expr_in_synpred4_Stone1664);
			add_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(314, 13);
			// Stone.g:314:13: ( message_item )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==IDENT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:314:13: message_item
					{
					DebugLocation(314, 13);
					PushFollow(Follow._message_item_in_synpred4_Stone1666);
					message_item();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

		}
		finally
		{
			TraceOut("synpred4_Stone_fragment", 51);
			LeaveRule("synpred4_Stone_fragment", 51);
			LeaveRule_synpred4_Stone_fragment();
		}
	}
	// $ANTLR end synpred4_Stone
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA1 dfa1;
	private DFA5 dfa5;
	private DFA8 dfa8;
	private DFA11 dfa11;
	private DFA17 dfa17;
	private DFA22 dfa22;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this );
		dfa5 = new DFA5( this );
		dfa8 = new DFA8( this );
		dfa11 = new DFA11( this );
		dfa17 = new DFA17( this );
		dfa22 = new DFA22( this );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x4\xFFFF";
		private const string DFA1_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA1_minS =
			"\x2\x20\x2\xFFFF";
		private const string DFA1_maxS =
			"\x2\x4B\x2\xFFFF";
		private const string DFA1_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA1_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x1\x1\x2A\xFFFF\x1\x3",
				"\x1\x1\x2A\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "()+ loopback of 110:4: ( module_def )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x4\xFFFF";
		private const string DFA5_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA5_maxS =
			"\x2\x4D\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1\x25\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3",
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1\x25\xFFFF\x2\x3\x3\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()+ loopback of 118:4: ( block )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x7\xFFFF";
		private const string DFA8_eofS =
			"\x7\xFFFF";
		private const string DFA8_minS =
			"\x2\x15\x5\xFFFF";
		private const string DFA8_maxS =
			"\x2\x4D\x5\xFFFF";
		private const string DFA8_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5";
		private const string DFA8_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x1\x5\xA\xFFFF\x1\x1\x25\xFFFF\x1\x3\x1\x2\x3\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x4",
				"\x1\x5\xA\xFFFF\x1\x1\x25\xFFFF\x1\x3\x1\x2\x3\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x4",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "122:1: block : ( data_def | class_def | proxy_def | func_def | module_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x4\xFFFF";
		private const string DFA11_eofS =
			"\x4\xFFFF";
		private const string DFA11_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA11_maxS =
			"\x2\x20\x2\xFFFF";
		private const string DFA11_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA11_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1",
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "()+ loopback of 136:4: ( data_def_item )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x4\xFFFF";
		private const string DFA17_eofS =
			"\x4\xFFFF";
		private const string DFA17_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA17_maxS =
			"\x2\x20\x2\xFFFF";
		private const string DFA17_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA17_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1",
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "()+ loopback of 150:4: ( message_declare )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x4\xFFFF";
		private const string DFA22_eofS =
			"\x4\xFFFF";
		private const string DFA22_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA22_maxS =
			"\x2\x20\x2\xFFFF";
		private const string DFA22_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA22_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1",
				"\x1\x2\xE\xFFFF\x1\x3\xA\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "()+ loopback of 160:4: ( message_def )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _module_def_in_parse360 = new BitSet(new ulong[]{0x100000000UL,0x800UL});
		public static readonly BitSet _NEWLINE_in_parse363 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EOF_in_parse366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_module_def386 = new BitSet(new ulong[]{0x100000000UL,0x800UL});
		public static readonly BitSet _75_in_module_def389 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_module_def391 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_module_def393 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_module_def396 = new BitSet(new ulong[]{0x100600000UL,0x28C0UL});
		public static readonly BitSet _module_inner_in_module_def398 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_module_def400 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_module_def403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_module_inner425 = new BitSet(new ulong[]{0x100200002UL,0x28C0UL});
		public static readonly BitSet _INDENT_in_module_inner436 = new BitSet(new ulong[]{0x100600000UL,0x28C0UL});
		public static readonly BitSet _module_inner_in_module_inner438 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_module_inner440 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_module_inner443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _data_def_in_block458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_block463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxy_def_in_block468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_block473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _module_def_in_block478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_data_def490 = new BitSet(new ulong[]{0x100000000UL,0x80UL});
		public static readonly BitSet _71_in_data_def493 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_data_def495 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_data_def497 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_data_def500 = new BitSet(new ulong[]{0x100600000UL});
		public static readonly BitSet _data_def_inner_in_data_def502 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_data_def504 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_data_def507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _data_def_item_in_data_def_inner529 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _INDENT_in_data_def_inner544 = new BitSet(new ulong[]{0x100600000UL});
		public static readonly BitSet _data_def_inner_in_data_def_inner546 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_data_def_inner548 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_data_def_inner551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_data_def_item566 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _IDENT_in_data_def_item569 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_data_def_item571 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_in_data_def_item573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_class_def595 = new BitSet(new ulong[]{0x100000000UL,0x40UL});
		public static readonly BitSet _70_in_class_def598 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_class_def600 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_class_def602 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_class_def605 = new BitSet(new ulong[]{0x100600000UL});
		public static readonly BitSet _class_def_inner_in_class_def607 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_class_def609 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_class_def612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_declare_in_class_def_inner634 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _INDENT_in_class_def_inner649 = new BitSet(new ulong[]{0x100600000UL});
		public static readonly BitSet _class_def_inner_in_class_def_inner651 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_class_def_inner653 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_class_def_inner656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_proxy_def672 = new BitSet(new ulong[]{0x100000000UL,0x2000UL});
		public static readonly BitSet _77_in_proxy_def675 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_proxy_def677 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_proxy_def679 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_proxy_def681 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_proxy_def683 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_proxy_def686 = new BitSet(new ulong[]{0x100600000UL});
		public static readonly BitSet _proxy_def_inner_in_proxy_def688 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_proxy_def690 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_proxy_def693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_def_in_proxy_def_inner717 = new BitSet(new ulong[]{0x100200002UL});
		public static readonly BitSet _INDENT_in_proxy_def_inner732 = new BitSet(new ulong[]{0x100600000UL});
		public static readonly BitSet _proxy_def_inner_in_proxy_def_inner734 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_proxy_def_inner736 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_proxy_def_inner739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_message_declare755 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _IDENT_in_message_declare758 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_message_declare760 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_in_message_declare762 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_message_declare764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_declare_in_message_def786 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _NEWLINE_in_message_def788 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _IDENT_in_message_def791 = new BitSet(new ulong[]{0x800000100200000UL});
		public static readonly BitSet _message_def_args_in_message_def793 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_message_def795 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_message_def797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_in_message_def_args822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_declare844 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _IDENT_in_func_declare847 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_func_declare849 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_in_func_declare851 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_func_declare853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_declare_in_func_def875 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _NEWLINE_in_func_def877 = new BitSet(new ulong[]{0x100200000UL});
		public static readonly BitSet _IDENT_in_func_def880 = new BitSet(new ulong[]{0x800000100200000UL});
		public static readonly BitSet _func_def_args_in_func_def882 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_func_def884 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_func_def886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_in_func_def_args911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_cross_in_match933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_var_in_match_cross960 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_match_cross963 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _match_var_in_match_cross965 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _match_var_in_match_cross981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_match_var992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_match_var1005 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _match_in_match_var1007 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_match_var1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type1025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_cross_in_type_func1052 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_type_func1054 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_cross_in_type_func1056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_cross_in_type_func1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_atom_in_type_cross1098 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _OP_MUL_in_type_cross1101 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_atom_in_type_cross1103 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _type_atom_in_type_cross1119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_atom1130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_type_atom1143 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_in_type_atom1145 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_type_atom1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_stmt_block1163 = new BitSet(new ulong[]{0x200002UL,0x1C300UL});
		public static readonly BitSet _INDENT_in_stmt_block1178 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_stmt_block1180 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1182 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_stmt_block1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_assign_in_stmt1210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_call_in_stmt1215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_stmt_return1242 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_stmt_return1244 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_return1246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_stmt_alloc1266 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_stmt_alloc1268 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc1270 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_stmt_alloc1272 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_stmt_alloc1274 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_alloc1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_stmt_assign1297 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _65_in_stmt_assign1299 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_stmt_assign1301 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_assign1303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_stmt_call1324 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_stmt_call1326 = new BitSet(new ulong[]{0x1800000200A00080UL,0x1018UL});
		public static readonly BitSet _args_list_in_stmt_call1328 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_call1331 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_call1333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_stmt_if1355 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_stmt_if1357 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1359 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_stmt_if1362 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_stmt_if1364 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1366 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_stmt_if1369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_stmt_while1391 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_stmt_while1393 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while1395 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_stmt_while1398 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_stmt_while1400 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_while1402 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_stmt_while1405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_stmt_for1427 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_for1429 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_stmt_for1431 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_for1433 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_stmt_for1435 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_stmt_for1437 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for1439 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_stmt_for1442 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_stmt_for1444 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_for1446 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_stmt_for1449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logic_expr_in_expr1474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_expr_in_expr1484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_lambda_expr1495 = new BitSet(new ulong[]{0x800000000200000UL,0x4UL});
		public static readonly BitSet _lambda_args_in_lambda_expr1497 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _66_in_lambda_expr1499 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_in_lambda_expr1501 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _NEWLINE_in_lambda_expr1503 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _INDENT_in_lambda_expr1506 = new BitSet(new ulong[]{0x600000UL,0x1C300UL});
		public static readonly BitSet _stmt_block_in_lambda_expr1508 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _NEWLINE_in_lambda_expr1510 = new BitSet(new ulong[]{0x100000040UL});
		public static readonly BitSet _DEDENT_in_lambda_expr1513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_in_lambda_args1537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_array_expr1558 = new BitSet(new ulong[]{0x800000200A00080UL,0x1038UL});
		public static readonly BitSet _array_list_in_array_expr1560 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_array_expr1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_array_list1582 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_array_list1585 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_array_list1587 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _message_expr_in_logic_expr1607 = new BitSet(new ulong[]{0x4F800000002UL});
		public static readonly BitSet _set_in_logic_expr1610 = new BitSet(new ulong[]{0x800000200A00080UL,0x1000UL});
		public static readonly BitSet _message_expr_in_logic_expr1635 = new BitSet(new ulong[]{0x4F800000002UL});
		public static readonly BitSet _add_expr_in_message_expr1664 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _message_item_in_message_expr1666 = new BitSet(new ulong[]{0x200002UL});
		public static readonly BitSet _add_expr_in_message_expr1683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_message_item1694 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_message_item1696 = new BitSet(new ulong[]{0x1800000200A00080UL,0x1018UL});
		public static readonly BitSet _args_list_in_message_item1698 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_message_item1701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args_list1723 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_args_list1726 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_args_list1728 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _mul_expr_in_add_expr1746 = new BitSet(new ulong[]{0x90000000002UL});
		public static readonly BitSet _set_in_add_expr1749 = new BitSet(new ulong[]{0x800000200A00080UL,0x1000UL});
		public static readonly BitSet _mul_expr_in_add_expr1758 = new BitSet(new ulong[]{0x90000000002UL});
		public static readonly BitSet _call_expr_in_mul_expr1771 = new BitSet(new ulong[]{0x20400000002UL});
		public static readonly BitSet _set_in_mul_expr1774 = new BitSet(new ulong[]{0x800000200A00080UL,0x1000UL});
		public static readonly BitSet _call_expr_in_mul_expr1783 = new BitSet(new ulong[]{0x20400000002UL});
		public static readonly BitSet _IDENT_in_call_expr1796 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_call_expr1798 = new BitSet(new ulong[]{0x1800000200A00080UL,0x1018UL});
		public static readonly BitSet _args_list_in_call_expr1800 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_call_expr1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_expr_in_call_expr1819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_access_expr1830 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _Expr_Access_in_access_expr1833 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_access_expr1836 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _IDENT_in_atom_expr1849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_atom_expr1854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_atom_expr1859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NORMAL_STRING_in_atom_expr1864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_atom_expr1869 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _IDENT_in_atom_expr1871 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_atom_expr1873 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _args_list_in_atom_expr1875 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_atom_expr1877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_atom_expr1892 = new BitSet(new ulong[]{0x800000200A00080UL,0x1018UL});
		public static readonly BitSet _expr_in_atom_expr1894 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_atom_expr1896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_var_in_synpred1_Stone960 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_synpred1_Stone963 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _match_var_in_synpred1_Stone965 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _type_cross_in_synpred2_Stone1052 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_synpred2_Stone1054 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_cross_in_synpred2_Stone1056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_atom_in_synpred3_Stone1098 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _OP_MUL_in_synpred3_Stone1101 = new BitSet(new ulong[]{0x800000000200000UL});
		public static readonly BitSet _type_atom_in_synpred3_Stone1103 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _add_expr_in_synpred4_Stone1664 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _message_item_in_synpred4_Stone1666 = new BitSet(new ulong[]{0x200002UL});
	}
	#endregion Follow sets
}

} // namespace  Stone.Compiler 
