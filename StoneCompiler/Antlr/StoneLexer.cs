//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 Stone.g 2013-03-15 08:22:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Stone.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class StoneLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int Class_Def=4;
	public const int Class_Def_Body=5;
	public const int DEDENT=6;
	public const int DOUBLE=7;
	public const int Data_Body=8;
	public const int Data_Def=9;
	public const int Data_Def_Item=10;
	public const int EXPONENT=11;
	public const int Expr_Access=12;
	public const int Expr_Array=13;
	public const int Expr_Call=14;
	public const int Expr_Lambda=15;
	public const int Expr_Message=16;
	public const int Expr_New_Data=17;
	public const int Func_Args=18;
	public const int Func_Declare=19;
	public const int Func_Def=20;
	public const int IDENT=21;
	public const int INDENT=22;
	public const int INT=23;
	public const int Lambda_Args=24;
	public const int Match_Alloc_Var=25;
	public const int Match_Assign_Var=26;
	public const int Match_Cross=27;
	public const int Message_Args=28;
	public const int Message_Declare=29;
	public const int Message_Def=30;
	public const int Message_Item=31;
	public const int Module_Def=32;
	public const int NEWLINE=33;
	public const int NORMAL_STRING=34;
	public const int OP_DIV=35;
	public const int OP_EQU=36;
	public const int OP_GEQ=37;
	public const int OP_GTR=38;
	public const int OP_LEQ=39;
	public const int OP_LSS=40;
	public const int OP_MINUS=41;
	public const int OP_MUL=42;
	public const int OP_NEQ=43;
	public const int OP_PLUS=44;
	public const int Proxy_Def=45;
	public const int Proxy_Def_Body=46;
	public const int Root=47;
	public const int Stmt_Alloc=48;
	public const int Stmt_Assign=49;
	public const int Stmt_Block=50;
	public const int Stmt_Call=51;
	public const int Stmt_For=52;
	public const int Stmt_If=53;
	public const int Stmt_Return=54;
	public const int Stmt_While=55;
	public const int Stmt_Yield=56;
	public const int Type_Atom=57;
	public const int Type_Cross=58;
	public const int Type_Enum=59;
	public const int Type_Func=60;
	public const int WS=61;

		int CurrentIndent = 0;

		Queue<IToken> tokens = new Queue<IToken>();

	    public override void Emit(IToken token) 
	    {
	        state.token = token;
	        tokens.Enqueue(token);
	    }
	    public override IToken NextToken()
	    {
	        base.NextToken();
	        if ( tokens.Count ==0 )
			{
				IToken token = new CommonToken(EOF, "EOF");
	            token.StartIndex = CharIndex;
	            token.StopIndex = CharIndex;
	            return token;
			}
	        return tokens.Dequeue();
	    }


    // delegates
    // delegators

	public StoneLexer()
	{
		OnCreated();
	}

	public StoneLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public StoneLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Stone.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_Expr_Access();
	partial void LeaveRule_Expr_Access();

	// $ANTLR start "Expr_Access"
	[GrammarRule("Expr_Access")]
	private void mExpr_Access()
	{
		EnterRule_Expr_Access();
		EnterRule("Expr_Access", 1);
		TraceIn("Expr_Access", 1);
		try
		{
			int _type = Expr_Access;
			int _channel = DefaultTokenChannel;
			// Stone.g:36:13: ( '.' )
			DebugEnterAlt(1);
			// Stone.g:36:15: '.'
			{
			DebugLocation(36, 15);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Expr_Access", 1);
			LeaveRule("Expr_Access", 1);
			LeaveRule_Expr_Access();
		}
	}
	// $ANTLR end "Expr_Access"

	partial void EnterRule_OP_DIV();
	partial void LeaveRule_OP_DIV();

	// $ANTLR start "OP_DIV"
	[GrammarRule("OP_DIV")]
	private void mOP_DIV()
	{
		EnterRule_OP_DIV();
		EnterRule("OP_DIV", 2);
		TraceIn("OP_DIV", 2);
		try
		{
			int _type = OP_DIV;
			int _channel = DefaultTokenChannel;
			// Stone.g:37:8: ( '/' )
			DebugEnterAlt(1);
			// Stone.g:37:10: '/'
			{
			DebugLocation(37, 10);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_DIV", 2);
			LeaveRule("OP_DIV", 2);
			LeaveRule_OP_DIV();
		}
	}
	// $ANTLR end "OP_DIV"

	partial void EnterRule_OP_EQU();
	partial void LeaveRule_OP_EQU();

	// $ANTLR start "OP_EQU"
	[GrammarRule("OP_EQU")]
	private void mOP_EQU()
	{
		EnterRule_OP_EQU();
		EnterRule("OP_EQU", 3);
		TraceIn("OP_EQU", 3);
		try
		{
			int _type = OP_EQU;
			int _channel = DefaultTokenChannel;
			// Stone.g:38:8: ( '==' )
			DebugEnterAlt(1);
			// Stone.g:38:10: '=='
			{
			DebugLocation(38, 10);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_EQU", 3);
			LeaveRule("OP_EQU", 3);
			LeaveRule_OP_EQU();
		}
	}
	// $ANTLR end "OP_EQU"

	partial void EnterRule_OP_GEQ();
	partial void LeaveRule_OP_GEQ();

	// $ANTLR start "OP_GEQ"
	[GrammarRule("OP_GEQ")]
	private void mOP_GEQ()
	{
		EnterRule_OP_GEQ();
		EnterRule("OP_GEQ", 4);
		TraceIn("OP_GEQ", 4);
		try
		{
			int _type = OP_GEQ;
			int _channel = DefaultTokenChannel;
			// Stone.g:39:8: ( '>=' )
			DebugEnterAlt(1);
			// Stone.g:39:10: '>='
			{
			DebugLocation(39, 10);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_GEQ", 4);
			LeaveRule("OP_GEQ", 4);
			LeaveRule_OP_GEQ();
		}
	}
	// $ANTLR end "OP_GEQ"

	partial void EnterRule_OP_GTR();
	partial void LeaveRule_OP_GTR();

	// $ANTLR start "OP_GTR"
	[GrammarRule("OP_GTR")]
	private void mOP_GTR()
	{
		EnterRule_OP_GTR();
		EnterRule("OP_GTR", 5);
		TraceIn("OP_GTR", 5);
		try
		{
			int _type = OP_GTR;
			int _channel = DefaultTokenChannel;
			// Stone.g:40:8: ( '>' )
			DebugEnterAlt(1);
			// Stone.g:40:10: '>'
			{
			DebugLocation(40, 10);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_GTR", 5);
			LeaveRule("OP_GTR", 5);
			LeaveRule_OP_GTR();
		}
	}
	// $ANTLR end "OP_GTR"

	partial void EnterRule_OP_LEQ();
	partial void LeaveRule_OP_LEQ();

	// $ANTLR start "OP_LEQ"
	[GrammarRule("OP_LEQ")]
	private void mOP_LEQ()
	{
		EnterRule_OP_LEQ();
		EnterRule("OP_LEQ", 6);
		TraceIn("OP_LEQ", 6);
		try
		{
			int _type = OP_LEQ;
			int _channel = DefaultTokenChannel;
			// Stone.g:41:8: ( '<=' )
			DebugEnterAlt(1);
			// Stone.g:41:10: '<='
			{
			DebugLocation(41, 10);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_LEQ", 6);
			LeaveRule("OP_LEQ", 6);
			LeaveRule_OP_LEQ();
		}
	}
	// $ANTLR end "OP_LEQ"

	partial void EnterRule_OP_LSS();
	partial void LeaveRule_OP_LSS();

	// $ANTLR start "OP_LSS"
	[GrammarRule("OP_LSS")]
	private void mOP_LSS()
	{
		EnterRule_OP_LSS();
		EnterRule("OP_LSS", 7);
		TraceIn("OP_LSS", 7);
		try
		{
			int _type = OP_LSS;
			int _channel = DefaultTokenChannel;
			// Stone.g:42:8: ( '<' )
			DebugEnterAlt(1);
			// Stone.g:42:10: '<'
			{
			DebugLocation(42, 10);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_LSS", 7);
			LeaveRule("OP_LSS", 7);
			LeaveRule_OP_LSS();
		}
	}
	// $ANTLR end "OP_LSS"

	partial void EnterRule_OP_MINUS();
	partial void LeaveRule_OP_MINUS();

	// $ANTLR start "OP_MINUS"
	[GrammarRule("OP_MINUS")]
	private void mOP_MINUS()
	{
		EnterRule_OP_MINUS();
		EnterRule("OP_MINUS", 8);
		TraceIn("OP_MINUS", 8);
		try
		{
			int _type = OP_MINUS;
			int _channel = DefaultTokenChannel;
			// Stone.g:43:10: ( '-' )
			DebugEnterAlt(1);
			// Stone.g:43:12: '-'
			{
			DebugLocation(43, 12);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_MINUS", 8);
			LeaveRule("OP_MINUS", 8);
			LeaveRule_OP_MINUS();
		}
	}
	// $ANTLR end "OP_MINUS"

	partial void EnterRule_OP_MUL();
	partial void LeaveRule_OP_MUL();

	// $ANTLR start "OP_MUL"
	[GrammarRule("OP_MUL")]
	private void mOP_MUL()
	{
		EnterRule_OP_MUL();
		EnterRule("OP_MUL", 9);
		TraceIn("OP_MUL", 9);
		try
		{
			int _type = OP_MUL;
			int _channel = DefaultTokenChannel;
			// Stone.g:44:8: ( '*' )
			DebugEnterAlt(1);
			// Stone.g:44:10: '*'
			{
			DebugLocation(44, 10);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_MUL", 9);
			LeaveRule("OP_MUL", 9);
			LeaveRule_OP_MUL();
		}
	}
	// $ANTLR end "OP_MUL"

	partial void EnterRule_OP_NEQ();
	partial void LeaveRule_OP_NEQ();

	// $ANTLR start "OP_NEQ"
	[GrammarRule("OP_NEQ")]
	private void mOP_NEQ()
	{
		EnterRule_OP_NEQ();
		EnterRule("OP_NEQ", 10);
		TraceIn("OP_NEQ", 10);
		try
		{
			int _type = OP_NEQ;
			int _channel = DefaultTokenChannel;
			// Stone.g:45:8: ( '!=' )
			DebugEnterAlt(1);
			// Stone.g:45:10: '!='
			{
			DebugLocation(45, 10);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_NEQ", 10);
			LeaveRule("OP_NEQ", 10);
			LeaveRule_OP_NEQ();
		}
	}
	// $ANTLR end "OP_NEQ"

	partial void EnterRule_OP_PLUS();
	partial void LeaveRule_OP_PLUS();

	// $ANTLR start "OP_PLUS"
	[GrammarRule("OP_PLUS")]
	private void mOP_PLUS()
	{
		EnterRule_OP_PLUS();
		EnterRule("OP_PLUS", 11);
		TraceIn("OP_PLUS", 11);
		try
		{
			int _type = OP_PLUS;
			int _channel = DefaultTokenChannel;
			// Stone.g:46:9: ( '+' )
			DebugEnterAlt(1);
			// Stone.g:46:11: '+'
			{
			DebugLocation(46, 11);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP_PLUS", 11);
			LeaveRule("OP_PLUS", 11);
			LeaveRule_OP_PLUS();
		}
	}
	// $ANTLR end "OP_PLUS"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 12);
		TraceIn("T__62", 12);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// Stone.g:47:7: ( '(' )
			DebugEnterAlt(1);
			// Stone.g:47:9: '('
			{
			DebugLocation(47, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 12);
			LeaveRule("T__62", 12);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 13);
		TraceIn("T__63", 13);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// Stone.g:48:7: ( ')' )
			DebugEnterAlt(1);
			// Stone.g:48:9: ')'
			{
			DebugLocation(48, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 13);
			LeaveRule("T__63", 13);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 14);
		TraceIn("T__64", 14);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// Stone.g:49:7: ( ',' )
			DebugEnterAlt(1);
			// Stone.g:49:9: ','
			{
			DebugLocation(49, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 14);
			LeaveRule("T__64", 14);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 15);
		TraceIn("T__65", 15);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// Stone.g:50:7: ( '->' )
			DebugEnterAlt(1);
			// Stone.g:50:9: '->'
			{
			DebugLocation(50, 9);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 15);
			LeaveRule("T__65", 15);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 16);
		TraceIn("T__66", 16);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// Stone.g:51:7: ( ':' )
			DebugEnterAlt(1);
			// Stone.g:51:9: ':'
			{
			DebugLocation(51, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 16);
			LeaveRule("T__66", 16);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 17);
		TraceIn("T__67", 17);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// Stone.g:52:7: ( '::' )
			DebugEnterAlt(1);
			// Stone.g:52:9: '::'
			{
			DebugLocation(52, 9);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 17);
			LeaveRule("T__67", 17);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 18);
		TraceIn("T__68", 18);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// Stone.g:53:7: ( '=' )
			DebugEnterAlt(1);
			// Stone.g:53:9: '='
			{
			DebugLocation(53, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 18);
			LeaveRule("T__68", 18);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 19);
		TraceIn("T__69", 19);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// Stone.g:54:7: ( '=>' )
			DebugEnterAlt(1);
			// Stone.g:54:9: '=>'
			{
			DebugLocation(54, 9);
			Match("=>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 19);
			LeaveRule("T__69", 19);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 20);
		TraceIn("T__70", 20);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// Stone.g:55:7: ( '[' )
			DebugEnterAlt(1);
			// Stone.g:55:9: '['
			{
			DebugLocation(55, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 20);
			LeaveRule("T__70", 20);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 21);
		TraceIn("T__71", 21);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// Stone.g:56:7: ( '\\\\' )
			DebugEnterAlt(1);
			// Stone.g:56:9: '\\\\'
			{
			DebugLocation(56, 9);
			Match('\\'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 21);
			LeaveRule("T__71", 21);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_T__72();
	partial void LeaveRule_T__72();

	// $ANTLR start "T__72"
	[GrammarRule("T__72")]
	private void mT__72()
	{
		EnterRule_T__72();
		EnterRule("T__72", 22);
		TraceIn("T__72", 22);
		try
		{
			int _type = T__72;
			int _channel = DefaultTokenChannel;
			// Stone.g:57:7: ( ']' )
			DebugEnterAlt(1);
			// Stone.g:57:9: ']'
			{
			DebugLocation(57, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__72", 22);
			LeaveRule("T__72", 22);
			LeaveRule_T__72();
		}
	}
	// $ANTLR end "T__72"

	partial void EnterRule_T__73();
	partial void LeaveRule_T__73();

	// $ANTLR start "T__73"
	[GrammarRule("T__73")]
	private void mT__73()
	{
		EnterRule_T__73();
		EnterRule("T__73", 23);
		TraceIn("T__73", 23);
		try
		{
			int _type = T__73;
			int _channel = DefaultTokenChannel;
			// Stone.g:58:7: ( 'class' )
			DebugEnterAlt(1);
			// Stone.g:58:9: 'class'
			{
			DebugLocation(58, 9);
			Match("class"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__73", 23);
			LeaveRule("T__73", 23);
			LeaveRule_T__73();
		}
	}
	// $ANTLR end "T__73"

	partial void EnterRule_T__74();
	partial void LeaveRule_T__74();

	// $ANTLR start "T__74"
	[GrammarRule("T__74")]
	private void mT__74()
	{
		EnterRule_T__74();
		EnterRule("T__74", 24);
		TraceIn("T__74", 24);
		try
		{
			int _type = T__74;
			int _channel = DefaultTokenChannel;
			// Stone.g:59:7: ( 'data' )
			DebugEnterAlt(1);
			// Stone.g:59:9: 'data'
			{
			DebugLocation(59, 9);
			Match("data"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__74", 24);
			LeaveRule("T__74", 24);
			LeaveRule_T__74();
		}
	}
	// $ANTLR end "T__74"

	partial void EnterRule_T__75();
	partial void LeaveRule_T__75();

	// $ANTLR start "T__75"
	[GrammarRule("T__75")]
	private void mT__75()
	{
		EnterRule_T__75();
		EnterRule("T__75", 25);
		TraceIn("T__75", 25);
		try
		{
			int _type = T__75;
			int _channel = DefaultTokenChannel;
			// Stone.g:60:7: ( 'for' )
			DebugEnterAlt(1);
			// Stone.g:60:9: 'for'
			{
			DebugLocation(60, 9);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__75", 25);
			LeaveRule("T__75", 25);
			LeaveRule_T__75();
		}
	}
	// $ANTLR end "T__75"

	partial void EnterRule_T__76();
	partial void LeaveRule_T__76();

	// $ANTLR start "T__76"
	[GrammarRule("T__76")]
	private void mT__76()
	{
		EnterRule_T__76();
		EnterRule("T__76", 26);
		TraceIn("T__76", 26);
		try
		{
			int _type = T__76;
			int _channel = DefaultTokenChannel;
			// Stone.g:61:7: ( 'if' )
			DebugEnterAlt(1);
			// Stone.g:61:9: 'if'
			{
			DebugLocation(61, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__76", 26);
			LeaveRule("T__76", 26);
			LeaveRule_T__76();
		}
	}
	// $ANTLR end "T__76"

	partial void EnterRule_T__77();
	partial void LeaveRule_T__77();

	// $ANTLR start "T__77"
	[GrammarRule("T__77")]
	private void mT__77()
	{
		EnterRule_T__77();
		EnterRule("T__77", 27);
		TraceIn("T__77", 27);
		try
		{
			int _type = T__77;
			int _channel = DefaultTokenChannel;
			// Stone.g:62:7: ( 'in' )
			DebugEnterAlt(1);
			// Stone.g:62:9: 'in'
			{
			DebugLocation(62, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__77", 27);
			LeaveRule("T__77", 27);
			LeaveRule_T__77();
		}
	}
	// $ANTLR end "T__77"

	partial void EnterRule_T__78();
	partial void LeaveRule_T__78();

	// $ANTLR start "T__78"
	[GrammarRule("T__78")]
	private void mT__78()
	{
		EnterRule_T__78();
		EnterRule("T__78", 28);
		TraceIn("T__78", 28);
		try
		{
			int _type = T__78;
			int _channel = DefaultTokenChannel;
			// Stone.g:63:7: ( 'module' )
			DebugEnterAlt(1);
			// Stone.g:63:9: 'module'
			{
			DebugLocation(63, 9);
			Match("module"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__78", 28);
			LeaveRule("T__78", 28);
			LeaveRule_T__78();
		}
	}
	// $ANTLR end "T__78"

	partial void EnterRule_T__79();
	partial void LeaveRule_T__79();

	// $ANTLR start "T__79"
	[GrammarRule("T__79")]
	private void mT__79()
	{
		EnterRule_T__79();
		EnterRule("T__79", 29);
		TraceIn("T__79", 29);
		try
		{
			int _type = T__79;
			int _channel = DefaultTokenChannel;
			// Stone.g:64:7: ( 'new' )
			DebugEnterAlt(1);
			// Stone.g:64:9: 'new'
			{
			DebugLocation(64, 9);
			Match("new"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__79", 29);
			LeaveRule("T__79", 29);
			LeaveRule_T__79();
		}
	}
	// $ANTLR end "T__79"

	partial void EnterRule_T__80();
	partial void LeaveRule_T__80();

	// $ANTLR start "T__80"
	[GrammarRule("T__80")]
	private void mT__80()
	{
		EnterRule_T__80();
		EnterRule("T__80", 30);
		TraceIn("T__80", 30);
		try
		{
			int _type = T__80;
			int _channel = DefaultTokenChannel;
			// Stone.g:65:7: ( 'proxy' )
			DebugEnterAlt(1);
			// Stone.g:65:9: 'proxy'
			{
			DebugLocation(65, 9);
			Match("proxy"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__80", 30);
			LeaveRule("T__80", 30);
			LeaveRule_T__80();
		}
	}
	// $ANTLR end "T__80"

	partial void EnterRule_T__81();
	partial void LeaveRule_T__81();

	// $ANTLR start "T__81"
	[GrammarRule("T__81")]
	private void mT__81()
	{
		EnterRule_T__81();
		EnterRule("T__81", 31);
		TraceIn("T__81", 31);
		try
		{
			int _type = T__81;
			int _channel = DefaultTokenChannel;
			// Stone.g:66:7: ( 'return' )
			DebugEnterAlt(1);
			// Stone.g:66:9: 'return'
			{
			DebugLocation(66, 9);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__81", 31);
			LeaveRule("T__81", 31);
			LeaveRule_T__81();
		}
	}
	// $ANTLR end "T__81"

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 32);
		TraceIn("T__82", 32);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// Stone.g:67:7: ( 'while' )
			DebugEnterAlt(1);
			// Stone.g:67:9: 'while'
			{
			DebugLocation(67, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 32);
			LeaveRule("T__82", 32);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_T__83();
	partial void LeaveRule_T__83();

	// $ANTLR start "T__83"
	[GrammarRule("T__83")]
	private void mT__83()
	{
		EnterRule_T__83();
		EnterRule("T__83", 33);
		TraceIn("T__83", 33);
		try
		{
			int _type = T__83;
			int _channel = DefaultTokenChannel;
			// Stone.g:68:7: ( 'yield' )
			DebugEnterAlt(1);
			// Stone.g:68:9: 'yield'
			{
			DebugLocation(68, 9);
			Match("yield"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__83", 33);
			LeaveRule("T__83", 33);
			LeaveRule_T__83();
		}
	}
	// $ANTLR end "T__83"

	partial void EnterRule_T__84();
	partial void LeaveRule_T__84();

	// $ANTLR start "T__84"
	[GrammarRule("T__84")]
	private void mT__84()
	{
		EnterRule_T__84();
		EnterRule("T__84", 34);
		TraceIn("T__84", 34);
		try
		{
			int _type = T__84;
			int _channel = DefaultTokenChannel;
			// Stone.g:69:7: ( '|' )
			DebugEnterAlt(1);
			// Stone.g:69:9: '|'
			{
			DebugLocation(69, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__84", 34);
			LeaveRule("T__84", 34);
			LeaveRule_T__84();
		}
	}
	// $ANTLR end "T__84"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 35);
		TraceIn("NEWLINE", 35);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// Stone.g:365:3: ( ( '\\n' )+ ( ' ' | '\\t' )* )
			DebugEnterAlt(1);
			// Stone.g:365:3: ( '\\n' )+ ( ' ' | '\\t' )*
			{
			DebugLocation(365, 3);
			// Stone.g:365:3: ( '\\n' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='\n'))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:365:3: '\\n'
					{
					DebugLocation(365, 3);
					Match('\n'); 

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(365, 9);
			// Stone.g:365:9: ( ' ' | '\\t' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0=='\t'||LA2_0==' '))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:
					{
					DebugLocation(365, 9);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(366, 1);

			       int indent = Text.Length;
				   while (indent != 0 && Text[Text.Length - indent] != '\t' && Text[Text.Length - indent] != ' ') indent--;
				   IToken token_newline = new CommonToken(NEWLINE, "NEWLINE");
				   token_newline.StartIndex = CharIndex;
				   token_newline.StopIndex = CharIndex;
				   Emit(token_newline);
			       if (indent > CurrentIndent)
			       {
				          for (int i = 0; i < indent - CurrentIndent; i++)
						  {
							IToken token = new CommonToken(INDENT, "INDENT -- " + indent);
							token.StartIndex = CharIndex;
							token.StopIndex = CharIndex;
			                Emit(token);
						  }
			       }
			       else if (indent < CurrentIndent)
			       {
			              for (int i=0; i < CurrentIndent - indent; i++)
			              {
							IToken token = new CommonToken(DEDENT, "DEDENT -- " + CurrentIndent);
							token.StartIndex = CharIndex;
							token.StopIndex = CharIndex;
			                Emit(token);
			              }
			       }
			       else
			       {
			       }
			       CurrentIndent = indent;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 35);
			LeaveRule("NEWLINE", 35);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 36);
		TraceIn("IDENT", 36);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// Stone.g:400:6: ( ( ( 'a' .. 'z' | 'A' .. 'Z' )+ ':' )* ( 'a' .. 'z' | 'A' .. 'Z' )+ ( '0' .. '9' )* )
			DebugEnterAlt(1);
			// Stone.g:400:8: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ ':' )* ( 'a' .. 'z' | 'A' .. 'Z' )+ ( '0' .. '9' )*
			{
			DebugLocation(400, 8);
			// Stone.g:400:8: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ ':' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				try
				{
					alt4 = dfa4.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:400:9: ( 'a' .. 'z' | 'A' .. 'Z' )+ ':'
					{
					DebugLocation(400, 9);
					// Stone.g:400:9: ( 'a' .. 'z' | 'A' .. 'Z' )+
					int cnt3=0;
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_0 = input.LA(1);

						if (((LA3_0>='A' && LA3_0<='Z')||(LA3_0>='a' && LA3_0<='z')))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch (alt3)
						{
						case 1:
							DebugEnterAlt(1);
							// Stone.g:
							{
							DebugLocation(400, 9);
							input.Consume();


							}
							break;

						default:
							if (cnt3 >= 1)
								goto loop3;

							EarlyExitException eee3 = new EarlyExitException( 3, input );
							DebugRecognitionException(eee3);
							throw eee3;
						}
						cnt3++;
					}
					loop3:
						;

					} finally { DebugExitSubRule(3); }

					DebugLocation(400, 32);
					Match(':'); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(400, 38);
			// Stone.g:400:38: ( 'a' .. 'z' | 'A' .. 'Z' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='A' && LA5_0<='Z')||(LA5_0>='a' && LA5_0<='z')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:
					{
					DebugLocation(400, 38);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(400, 61);
			// Stone.g:400:61: ( '0' .. '9' )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:
					{
					DebugLocation(400, 61);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 36);
			LeaveRule("IDENT", 36);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_NORMAL_STRING();
	partial void LeaveRule_NORMAL_STRING();

	// $ANTLR start "NORMAL_STRING"
	[GrammarRule("NORMAL_STRING")]
	private void mNORMAL_STRING()
	{
		EnterRule_NORMAL_STRING();
		EnterRule("NORMAL_STRING", 37);
		TraceIn("NORMAL_STRING", 37);
		try
		{
			int _type = NORMAL_STRING;
			int _channel = DefaultTokenChannel;
			// Stone.g:404:2: ( '\"' (~ '\"' )* '\"' | '\\'' (~ '\\'' )* '\\'' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='\"'))
			{
				alt9 = 1;
			}
			else if ((LA9_0=='\''))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:404:4: '\"' (~ '\"' )* '\"'
				{
				DebugLocation(404, 4);
				Match('\"'); 
				DebugLocation(404, 8);
				// Stone.g:404:8: (~ '\"' )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='\u0000' && LA7_0<='!')||(LA7_0>='#' && LA7_0<='\uFFFF')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:
						{
						DebugLocation(404, 8);
						input.Consume();


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(404, 16);
				Match('\"'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:405:4: '\\'' (~ '\\'' )* '\\''
				{
				DebugLocation(405, 4);
				Match('\''); 
				DebugLocation(405, 9);
				// Stone.g:405:9: (~ '\\'' )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='\u0000' && LA8_0<='&')||(LA8_0>='(' && LA8_0<='\uFFFF')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:
						{
						DebugLocation(405, 9);
						input.Consume();


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(405, 18);
				Match('\''); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NORMAL_STRING", 37);
			LeaveRule("NORMAL_STRING", 37);
			LeaveRule_NORMAL_STRING();
		}
	}
	// $ANTLR end "NORMAL_STRING"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 38);
		TraceIn("INT", 38);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Stone.g:409:7: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// Stone.g:409:9: ( '0' .. '9' )+
			{
			DebugLocation(409, 9);
			// Stone.g:409:9: ( '0' .. '9' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if (((LA10_0>='0' && LA10_0<='9')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:
					{
					DebugLocation(409, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 38);
			LeaveRule("INT", 38);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_DOUBLE();
	partial void LeaveRule_DOUBLE();

	// $ANTLR start "DOUBLE"
	[GrammarRule("DOUBLE")]
	private void mDOUBLE()
	{
		EnterRule_DOUBLE();
		EnterRule("DOUBLE", 39);
		TraceIn("DOUBLE", 39);
		try
		{
			int _type = DOUBLE;
			int _channel = DefaultTokenChannel;
			// Stone.g:413:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			try
			{
				alt17 = dfa17.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:413:7: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(413, 7);
				// Stone.g:413:7: ( '0' .. '9' )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>='0' && LA11_0<='9')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:
						{
						DebugLocation(413, 7);
						input.Consume();


						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(413, 19);
				Match('.'); 
				DebugLocation(413, 23);
				// Stone.g:413:23: ( '0' .. '9' )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if (((LA12_0>='0' && LA12_0<='9')))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:
						{
						DebugLocation(413, 23);
						input.Consume();


						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(413, 35);
				// Stone.g:413:35: ( EXPONENT )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0=='E'||LA13_0=='e'))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:413:35: EXPONENT
					{
					DebugLocation(413, 35);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Stone.g:414:7: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(414, 7);
				Match('.'); 
				DebugLocation(414, 11);
				// Stone.g:414:11: ( '0' .. '9' )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if (((LA14_0>='0' && LA14_0<='9')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:
						{
						DebugLocation(414, 11);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(414, 23);
				// Stone.g:414:23: ( EXPONENT )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0=='E'||LA15_0=='e'))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:414:23: EXPONENT
					{
					DebugLocation(414, 23);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(15); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Stone.g:415:7: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(415, 7);
				// Stone.g:415:7: ( '0' .. '9' )+
				int cnt16=0;
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if (((LA16_0>='0' && LA16_0<='9')))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// Stone.g:
						{
						DebugLocation(415, 7);
						input.Consume();


						}
						break;

					default:
						if (cnt16 >= 1)
							goto loop16;

						EarlyExitException eee16 = new EarlyExitException( 16, input );
						DebugRecognitionException(eee16);
						throw eee16;
					}
					cnt16++;
				}
				loop16:
					;

				} finally { DebugExitSubRule(16); }

				DebugLocation(415, 19);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE", 39);
			LeaveRule("DOUBLE", 39);
			LeaveRule_DOUBLE();
		}
	}
	// $ANTLR end "DOUBLE"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 40);
		TraceIn("EXPONENT", 40);
		try
		{
			// Stone.g:421:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// Stone.g:422:5: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(422, 5);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(422, 15);
			// Stone.g:422:15: ( '+' | '-' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0=='+'||LA18_0=='-'))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Stone.g:
				{
				DebugLocation(422, 15);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(422, 26);
			// Stone.g:422:26: ( '0' .. '9' )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if (((LA19_0>='0' && LA19_0<='9')))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Stone.g:
					{
					DebugLocation(422, 26);
					input.Consume();


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 40);
			LeaveRule("EXPONENT", 40);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_INDENT();
	partial void LeaveRule_INDENT();

	// $ANTLR start "INDENT"
	[GrammarRule("INDENT")]
	private void mINDENT()
	{
		EnterRule_INDENT();
		EnterRule("INDENT", 41);
		TraceIn("INDENT", 41);
		try
		{
			int _type = INDENT;
			int _channel = DefaultTokenChannel;
			// Stone.g:424:7: ( 'nothing_will_match_this_indent' )
			DebugEnterAlt(1);
			// Stone.g:424:9: 'nothing_will_match_this_indent'
			{
			DebugLocation(424, 9);
			Match("nothing_will_match_this_indent"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INDENT", 41);
			LeaveRule("INDENT", 41);
			LeaveRule_INDENT();
		}
	}
	// $ANTLR end "INDENT"

	partial void EnterRule_DEDENT();
	partial void LeaveRule_DEDENT();

	// $ANTLR start "DEDENT"
	[GrammarRule("DEDENT")]
	private void mDEDENT()
	{
		EnterRule_DEDENT();
		EnterRule("DEDENT", 42);
		TraceIn("DEDENT", 42);
		try
		{
			int _type = DEDENT;
			int _channel = DefaultTokenChannel;
			// Stone.g:425:7: ( 'nothing_will_match_this_dedent' )
			DebugEnterAlt(1);
			// Stone.g:425:9: 'nothing_will_match_this_dedent'
			{
			DebugLocation(425, 9);
			Match("nothing_will_match_this_dedent"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEDENT", 42);
			LeaveRule("DEDENT", 42);
			LeaveRule_DEDENT();
		}
	}
	// $ANTLR end "DEDENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 43);
		TraceIn("WS", 43);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Stone.g:427:3: ( ' ' )
			DebugEnterAlt(1);
			// Stone.g:427:5: ' '
			{
			DebugLocation(427, 5);
			Match(' '); 
			DebugLocation(427, 9);
			 Skip(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 43);
			LeaveRule("WS", 43);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// Stone.g:1:8: ( Expr_Access | OP_DIV | OP_EQU | OP_GEQ | OP_GTR | OP_LEQ | OP_LSS | OP_MINUS | OP_MUL | OP_NEQ | OP_PLUS | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | NEWLINE | IDENT | NORMAL_STRING | INT | DOUBLE | INDENT | DEDENT | WS )
		int alt20=42;
		try { DebugEnterDecision(20, false);
		try
		{
			alt20 = dfa20.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(20); }
		switch (alt20)
		{
		case 1:
			DebugEnterAlt(1);
			// Stone.g:1:10: Expr_Access
			{
			DebugLocation(1, 10);
			mExpr_Access(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Stone.g:1:22: OP_DIV
			{
			DebugLocation(1, 22);
			mOP_DIV(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Stone.g:1:29: OP_EQU
			{
			DebugLocation(1, 29);
			mOP_EQU(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Stone.g:1:36: OP_GEQ
			{
			DebugLocation(1, 36);
			mOP_GEQ(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Stone.g:1:43: OP_GTR
			{
			DebugLocation(1, 43);
			mOP_GTR(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Stone.g:1:50: OP_LEQ
			{
			DebugLocation(1, 50);
			mOP_LEQ(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Stone.g:1:57: OP_LSS
			{
			DebugLocation(1, 57);
			mOP_LSS(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Stone.g:1:64: OP_MINUS
			{
			DebugLocation(1, 64);
			mOP_MINUS(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Stone.g:1:73: OP_MUL
			{
			DebugLocation(1, 73);
			mOP_MUL(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Stone.g:1:80: OP_NEQ
			{
			DebugLocation(1, 80);
			mOP_NEQ(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Stone.g:1:87: OP_PLUS
			{
			DebugLocation(1, 87);
			mOP_PLUS(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Stone.g:1:95: T__62
			{
			DebugLocation(1, 95);
			mT__62(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Stone.g:1:101: T__63
			{
			DebugLocation(1, 101);
			mT__63(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Stone.g:1:107: T__64
			{
			DebugLocation(1, 107);
			mT__64(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Stone.g:1:113: T__65
			{
			DebugLocation(1, 113);
			mT__65(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Stone.g:1:119: T__66
			{
			DebugLocation(1, 119);
			mT__66(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Stone.g:1:125: T__67
			{
			DebugLocation(1, 125);
			mT__67(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Stone.g:1:131: T__68
			{
			DebugLocation(1, 131);
			mT__68(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Stone.g:1:137: T__69
			{
			DebugLocation(1, 137);
			mT__69(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Stone.g:1:143: T__70
			{
			DebugLocation(1, 143);
			mT__70(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Stone.g:1:149: T__71
			{
			DebugLocation(1, 149);
			mT__71(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Stone.g:1:155: T__72
			{
			DebugLocation(1, 155);
			mT__72(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Stone.g:1:161: T__73
			{
			DebugLocation(1, 161);
			mT__73(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Stone.g:1:167: T__74
			{
			DebugLocation(1, 167);
			mT__74(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Stone.g:1:173: T__75
			{
			DebugLocation(1, 173);
			mT__75(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Stone.g:1:179: T__76
			{
			DebugLocation(1, 179);
			mT__76(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Stone.g:1:185: T__77
			{
			DebugLocation(1, 185);
			mT__77(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Stone.g:1:191: T__78
			{
			DebugLocation(1, 191);
			mT__78(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Stone.g:1:197: T__79
			{
			DebugLocation(1, 197);
			mT__79(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Stone.g:1:203: T__80
			{
			DebugLocation(1, 203);
			mT__80(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Stone.g:1:209: T__81
			{
			DebugLocation(1, 209);
			mT__81(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Stone.g:1:215: T__82
			{
			DebugLocation(1, 215);
			mT__82(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Stone.g:1:221: T__83
			{
			DebugLocation(1, 221);
			mT__83(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Stone.g:1:227: T__84
			{
			DebugLocation(1, 227);
			mT__84(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Stone.g:1:233: NEWLINE
			{
			DebugLocation(1, 233);
			mNEWLINE(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Stone.g:1:241: IDENT
			{
			DebugLocation(1, 241);
			mIDENT(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Stone.g:1:247: NORMAL_STRING
			{
			DebugLocation(1, 247);
			mNORMAL_STRING(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Stone.g:1:261: INT
			{
			DebugLocation(1, 261);
			mINT(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Stone.g:1:265: DOUBLE
			{
			DebugLocation(1, 265);
			mDOUBLE(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// Stone.g:1:272: INDENT
			{
			DebugLocation(1, 272);
			mINDENT(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// Stone.g:1:279: DEDENT
			{
			DebugLocation(1, 279);
			mDEDENT(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// Stone.g:1:286: WS
			{
			DebugLocation(1, 286);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA4 dfa4;
	DFA17 dfa17;
	DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4(this);
		dfa17 = new DFA17(this);
		dfa20 = new DFA20(this);
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x1\xFFFF\x1\x2\x2\xFFFF";
		private const string DFA4_eofS =
			"\x4\xFFFF";
		private const string DFA4_minS =
			"\x1\x41\x1\x3A\x2\xFFFF";
		private const string DFA4_maxS =
			"\x2\x7A\x2\xFFFF";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA4_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1A\x1\x6\xFFFF\x1A\x1",
				"\x1\x3\x6\xFFFF\x1A\x1\x6\xFFFF\x1A\x1",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "()* loopback of 400:8: ( ( 'a' .. 'z' | 'A' .. 'Z' )+ ':' )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x5\xFFFF";
		private const string DFA17_eofS =
			"\x5\xFFFF";
		private const string DFA17_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA17_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA17_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA17_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "412:1: DOUBLE : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x1\xFFFF\x1\x21\x1\xFFFF\x1\x25\x1\x27\x1\x29\x1\x2B\x6\xFFFF\x1\x2D"+
			"\x3\xFFFF\xA\x1D\x4\xFFFF\x1\x3A\xE\xFFFF\x3\x1D\x1\x3E\x1\x3F\x7\x1D"+
			"\x1\xFFFF\x2\x1D\x1\x49\x2\xFFFF\x1\x1D\x1\x4B\x6\x1D\x1\x52\x1\xFFFF"+
			"\x1\x1D\x1\xFFFF\x5\x1D\x1\x59\x1\xFFFF\x2\x1D\x1\x5C\x1\x1D\x1\x5E\x1"+
			"\x5F\x1\xFFFF\x1\x60\x1\x1D\x1\xFFFF\x1\x62\x3\xFFFF\x1\x1D\x14\xFFFF";
		private const string DFA20_eofS =
			"\x76\xFFFF";
		private const string DFA20_minS =
			"\x1\xA\x1\x30\x1\xFFFF\x3\x3D\x1\x3E\x6\xFFFF\x1\x3A\x3\xFFFF\x1\x6C"+
			"\x1\x61\x1\x6F\x1\x66\x1\x6F\x1\x65\x1\x72\x1\x65\x1\x68\x1\x69\x4\xFFFF"+
			"\x1\x2E\xE\xFFFF\x1\x61\x1\x74\x1\x72\x2\x30\x1\x64\x1\x77\x1\x74\x1"+
			"\x6F\x1\x74\x1\x69\x1\x65\x1\xFFFF\x1\x73\x1\x61\x1\x30\x2\xFFFF\x1\x75"+
			"\x1\x30\x1\x68\x1\x78\x1\x75\x2\x6C\x1\x73\x1\x30\x1\xFFFF\x1\x6C\x1"+
			"\xFFFF\x1\x69\x1\x79\x1\x72\x1\x65\x1\x64\x1\x30\x1\xFFFF\x1\x65\x1\x6E"+
			"\x1\x30\x1\x6E\x2\x30\x1\xFFFF\x1\x30\x1\x67\x1\xFFFF\x1\x30\x3\xFFFF"+
			"\x1\x5F\x1\xFFFF\x1\x77\x1\x69\x2\x6C\x1\x5F\x1\x6D\x1\x61\x1\x74\x1"+
			"\x63\x1\x68\x1\x5F\x1\x74\x1\x68\x1\x69\x1\x73\x1\x5F\x1\x64\x2\xFFFF";
		private const string DFA20_maxS =
			"\x1\x7C\x1\x39\x1\xFFFF\x1\x3E\x2\x3D\x1\x3E\x6\xFFFF\x1\x3A\x3\xFFFF"+
			"\x1\x6C\x1\x61\x1\x6F\x1\x6E\x2\x6F\x1\x72\x1\x65\x1\x68\x1\x69\x4\xFFFF"+
			"\x1\x65\xE\xFFFF\x1\x61\x1\x74\x1\x72\x2\x7A\x1\x64\x1\x77\x1\x74\x1"+
			"\x6F\x1\x74\x1\x69\x1\x65\x1\xFFFF\x1\x73\x1\x61\x1\x7A\x2\xFFFF\x1\x75"+
			"\x1\x7A\x1\x68\x1\x78\x1\x75\x2\x6C\x1\x73\x1\x7A\x1\xFFFF\x1\x6C\x1"+
			"\xFFFF\x1\x69\x1\x79\x1\x72\x1\x65\x1\x64\x1\x7A\x1\xFFFF\x1\x65\x1\x6E"+
			"\x1\x7A\x1\x6E\x2\x7A\x1\xFFFF\x1\x7A\x1\x67\x1\xFFFF\x1\x7A\x3\xFFFF"+
			"\x1\x5F\x1\xFFFF\x1\x77\x1\x69\x2\x6C\x1\x5F\x1\x6D\x1\x61\x1\x74\x1"+
			"\x63\x1\x68\x1\x5F\x1\x74\x1\x68\x1\x69\x1\x73\x1\x5F\x1\x69\x2\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xFFFF"+
			"\x1\x14\x1\x15\x1\x16\xA\xFFFF\x1\x22\x1\x23\x1\x24\x1\x25\x1\xFFFF\x1"+
			"\x2A\x1\x1\x1\x27\x1\x3\x1\x13\x1\x12\x1\x4\x1\x5\x1\x6\x1\x7\x1\xF\x1"+
			"\x8\x1\x11\x1\x10\xC\xFFFF\x1\x26\x3\xFFFF\x1\x1A\x1\x1B\x9\xFFFF\x1"+
			"\x19\x1\xFFFF\x1\x1D\x6\xFFFF\x1\x18\x6\xFFFF\x1\x17\x2\xFFFF\x1\x1E"+
			"\x1\xFFFF\x1\x20\x1\x21\x1\x1C\x1\xFFFF\x1\x1F\x11\xFFFF\x1\x28\x1\x29";
		private const string DFA20_specialS =
			"\x76\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x1C\x15\xFFFF\x1\x20\x1\x8\x1\x1E\x4\xFFFF\x1\x1E\x1\xA\x1\xB\x1"+
				"\x7\x1\x9\x1\xC\x1\x6\x1\x1\x1\x2\xA\x1F\x1\xD\x1\xFFFF\x1\x5\x1\x3"+
				"\x1\x4\x2\xFFFF\x1A\x1D\x1\xE\x1\xF\x1\x10\x3\xFFFF\x2\x1D\x1\x11\x1"+
				"\x12\x1\x1D\x1\x13\x2\x1D\x1\x14\x3\x1D\x1\x15\x1\x16\x1\x1D\x1\x17"+
				"\x1\x1D\x1\x18\x4\x1D\x1\x19\x1\x1D\x1\x1A\x1\x1D\x1\xFFFF\x1\x1B",
				"\xA\x22",
				"",
				"\x1\x23\x1\x24",
				"\x1\x26",
				"\x1\x28",
				"\x1\x2A",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2C",
				"",
				"",
				"",
				"\x1\x2E",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x31\x7\xFFFF\x1\x32",
				"\x1\x33",
				"\x1\x34\x9\xFFFF\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"",
				"",
				"",
				"",
				"\x1\x22\x1\xFFFF\xA\x1F\xB\xFFFF\x1\x22\x1F\xFFFF\x1\x22",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3B",
				"\x1\x3C",
				"\x1\x3D",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"",
				"\x1\x47",
				"\x1\x48",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"",
				"\x1\x4A",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1\x53",
				"",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57",
				"\x1\x58",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1\x5A",
				"\x1\x5B",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x5D",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x61",
				"",
				"\xB\x1D\x6\xFFFF\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"",
				"",
				"\x1\x63",
				"",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x75\x4\xFFFF\x1\x74",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( Expr_Access | OP_DIV | OP_EQU | OP_GEQ | OP_GTR | OP_LEQ | OP_LSS | OP_MINUS | OP_MUL | OP_NEQ | OP_PLUS | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | NEWLINE | IDENT | NORMAL_STRING | INT | DOUBLE | INDENT | DEDENT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Stone.Compiler 
